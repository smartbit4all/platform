import { SelectionModel } from "@angular/cdk/collections";
export var SmartTableType;
(function (SmartTableType) {
    SmartTableType[SmartTableType["INHERITED"] = 0] = "INHERITED";
    SmartTableType[SmartTableType["CHECK_BOX"] = 1] = "CHECK_BOX";
})(SmartTableType || (SmartTableType = {}));
export class SmartTable {
    constructor(tableRows, tableType, customSmartTableHeaders, title, isMultiple, options) {
        this.equalsIgnoreOrder = (a, b) => {
            if (a.length !== b.length)
                return false;
            const uniqueValues = new Set([...a, ...b]);
            for (const v of uniqueValues) {
                const aCount = a.filter((e) => e === v).length;
                const bCount = b.filter((e) => e === v).length;
                if (aCount !== bCount)
                    return false;
            }
            return true;
        };
        this.tableHeaders = Object.getOwnPropertyNames(tableRows[0]);
        this.customSmartTableHeaders = customSmartTableHeaders;
        this.customTableHeaders = [];
        if (this.customSmartTableHeaders &&
            this.equalsIgnoreOrder(this.tableHeaders, this.customSmartTableHeaders.map((tableHeader) => tableHeader.propertyName))) {
            this.tableHeaders = [];
            this.customSmartTableHeaders.forEach((tableHeader) => {
                if (!tableHeader.isHidden) {
                    this.tableHeaders.push(tableHeader.propertyName);
                    this.customTableHeaders.push(tableHeader.label);
                }
            });
        }
        else {
            this.customTableHeaders = this.tableHeaders;
        }
        this.tableRows = tableRows;
        this.tableType = tableType;
        this.title = title;
        this.isMultiple = isMultiple;
        this.options = options;
        if (this.options && this.options.length) {
            this.tableHeaders.push("options");
        }
        // if (this.hideCols !== undefined && this.hideCols.length > 0) {
        //     this.hideCols.forEach((hideCol, index) => {
        //         hideCol -= index;
        //         this.tableHeaders.splice(hideCol, 1);
        //     });
        // }
        if (tableType !== SmartTableType.INHERITED) {
            this.tableHeaders = ["select"].concat(this.tableHeaders);
            this.selection = new SelectionModel(this.isMultiple, []);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnR0YWJsZS5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NtYXJ0dGFibGUvc3JjL2xpYi9zbWFydHRhYmxlLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUxRCxNQUFNLENBQU4sSUFBWSxjQUdYO0FBSEQsV0FBWSxjQUFjO0lBQ3RCLDZEQUFTLENBQUE7SUFDVCw2REFBUyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLGNBQWMsS0FBZCxjQUFjLFFBR3pCO0FBMEJELE1BQU0sT0FBTyxVQUFVO0lBc0JuQixZQUNJLFNBQWMsRUFDZCxTQUF5QixFQUN6Qix1QkFBNEMsRUFDNUMsS0FBYyxFQUNkLFVBQW9CLEVBQ3BCLE9BQTRCO1FBakJoQyxzQkFBaUIsR0FBRyxDQUFDLENBQVcsRUFBRSxDQUFXLEVBQUUsRUFBRTtZQUM3QyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLE1BQU07Z0JBQUUsT0FBTyxLQUFLLENBQUM7WUFDeEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0MsS0FBSyxNQUFNLENBQUMsSUFBSSxZQUFZLEVBQUU7Z0JBQzFCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQy9DLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQy9DLElBQUksTUFBTSxLQUFLLE1BQU07b0JBQUUsT0FBTyxLQUFLLENBQUM7YUFDdkM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUM7UUFVRSxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsdUJBQXVCLEdBQUcsdUJBQXVCLENBQUM7UUFDdkQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztRQUU3QixJQUNJLElBQUksQ0FBQyx1QkFBdUI7WUFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUNsQixJQUFJLENBQUMsWUFBWSxFQUNqQixJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQzlFLEVBQ0g7WUFDRSxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7Z0JBQ2pELElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO29CQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQ2pELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuRDtZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNILElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQy9DO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFdkIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsaUVBQWlFO1FBQ2pFLGtEQUFrRDtRQUNsRCw0QkFBNEI7UUFDNUIsZ0RBQWdEO1FBQ2hELFVBQVU7UUFDVixJQUFJO1FBRUosSUFBSSxTQUFTLEtBQUssY0FBYyxDQUFDLFNBQVMsRUFBRTtZQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN6RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksY0FBYyxDQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0Q7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZWxlY3Rpb25Nb2RlbCB9IGZyb20gXCJAYW5ndWxhci9jZGsvY29sbGVjdGlvbnNcIjtcblxuZXhwb3J0IGVudW0gU21hcnRUYWJsZVR5cGUge1xuICAgIElOSEVSSVRFRCxcbiAgICBDSEVDS19CT1gsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU21hcnRUYWJsZU9wdGlvbiB7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBpY29uPzogc3RyaW5nO1xuICAgIGNhbGxiYWNrOiAoaWQ6IHN0cmluZykgPT4gYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNtYXJ0VGFibGVIZWFkZXIge1xuICAgIHByb3BlcnR5TmFtZTogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgaXNIaWRkZW4/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNtYXJ0VGFibGVJbnRlcmZhY2U8VD4ge1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIHRhYmxlSGVhZGVyczogc3RyaW5nW107XG4gICAgY3VzdG9tU21hcnRUYWJsZUhlYWRlcnM/OiBTbWFydFRhYmxlSGVhZGVyW107XG4gICAgLy8gdGFibGVIZWFkZXJzT3JkZXI/OiBzdHJpbmdbXTtcbiAgICBjdXN0b21UYWJsZUhlYWRlcnM6IHN0cmluZ1tdO1xuICAgIHRhYmxlUm93czogVFtdO1xuICAgIHRhYmxlVHlwZTogU21hcnRUYWJsZVR5cGU7XG4gICAgb3B0aW9ucz86IFNtYXJ0VGFibGVPcHRpb25bXTtcbiAgICBlcXVhbHNJZ25vcmVPcmRlcjogKGE6IHN0cmluZ1tdLCBiOiBzdHJpbmdbXSkgPT4gYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFNtYXJ0VGFibGU8VD4gaW1wbGVtZW50cyBTbWFydFRhYmxlSW50ZXJmYWNlPFQ+IHtcbiAgICB0aXRsZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICB0YWJsZUhlYWRlcnM6IHN0cmluZ1tdO1xuICAgIGN1c3RvbVNtYXJ0VGFibGVIZWFkZXJzPzogU21hcnRUYWJsZUhlYWRlcltdO1xuICAgIGN1c3RvbVRhYmxlSGVhZGVycyE6IHN0cmluZ1tdO1xuICAgIHRhYmxlUm93czogVFtdO1xuICAgIHRhYmxlVHlwZTogU21hcnRUYWJsZVR5cGU7XG4gICAgc2VsZWN0aW9uPzogU2VsZWN0aW9uTW9kZWw8VD47XG4gICAgaXNNdWx0aXBsZT86IGJvb2xlYW47XG4gICAgb3B0aW9ucz86IFNtYXJ0VGFibGVPcHRpb25bXTtcblxuICAgIGVxdWFsc0lnbm9yZU9yZGVyID0gKGE6IHN0cmluZ1tdLCBiOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHVuaXF1ZVZhbHVlcyA9IG5ldyBTZXQoWy4uLmEsIC4uLmJdKTtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIHVuaXF1ZVZhbHVlcykge1xuICAgICAgICAgICAgY29uc3QgYUNvdW50ID0gYS5maWx0ZXIoKGUpID0+IGUgPT09IHYpLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGJDb3VudCA9IGIuZmlsdGVyKChlKSA9PiBlID09PSB2KS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoYUNvdW50ICE9PSBiQ291bnQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRhYmxlUm93czogVFtdLFxuICAgICAgICB0YWJsZVR5cGU6IFNtYXJ0VGFibGVUeXBlLFxuICAgICAgICBjdXN0b21TbWFydFRhYmxlSGVhZGVycz86IFNtYXJ0VGFibGVIZWFkZXJbXSxcbiAgICAgICAgdGl0bGU/OiBzdHJpbmcsXG4gICAgICAgIGlzTXVsdGlwbGU/OiBib29sZWFuLFxuICAgICAgICBvcHRpb25zPzogU21hcnRUYWJsZU9wdGlvbltdXG4gICAgKSB7XG4gICAgICAgIHRoaXMudGFibGVIZWFkZXJzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFibGVSb3dzWzBdKTtcbiAgICAgICAgdGhpcy5jdXN0b21TbWFydFRhYmxlSGVhZGVycyA9IGN1c3RvbVNtYXJ0VGFibGVIZWFkZXJzO1xuICAgICAgICB0aGlzLmN1c3RvbVRhYmxlSGVhZGVycyA9IFtdO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tU21hcnRUYWJsZUhlYWRlcnMgJiZcbiAgICAgICAgICAgIHRoaXMuZXF1YWxzSWdub3JlT3JkZXIoXG4gICAgICAgICAgICAgICAgdGhpcy50YWJsZUhlYWRlcnMsXG4gICAgICAgICAgICAgICAgdGhpcy5jdXN0b21TbWFydFRhYmxlSGVhZGVycy5tYXAoKHRhYmxlSGVhZGVyKSA9PiB0YWJsZUhlYWRlci5wcm9wZXJ0eU5hbWUpXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy50YWJsZUhlYWRlcnMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tU21hcnRUYWJsZUhlYWRlcnMuZm9yRWFjaCgodGFibGVIZWFkZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRhYmxlSGVhZGVyLmlzSGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFibGVIZWFkZXJzLnB1c2godGFibGVIZWFkZXIucHJvcGVydHlOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXN0b21UYWJsZUhlYWRlcnMucHVzaCh0YWJsZUhlYWRlci5sYWJlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1c3RvbVRhYmxlSGVhZGVycyA9IHRoaXMudGFibGVIZWFkZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50YWJsZVJvd3MgPSB0YWJsZVJvd3M7XG4gICAgICAgIHRoaXMudGFibGVUeXBlID0gdGFibGVUeXBlO1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMuaXNNdWx0aXBsZSA9IGlzTXVsdGlwbGU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnRhYmxlSGVhZGVycy5wdXNoKFwib3B0aW9uc1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmICh0aGlzLmhpZGVDb2xzICE9PSB1bmRlZmluZWQgJiYgdGhpcy5oaWRlQ29scy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmhpZGVDb2xzLmZvckVhY2goKGhpZGVDb2wsIGluZGV4KSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgaGlkZUNvbCAtPSBpbmRleDtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLnRhYmxlSGVhZGVycy5zcGxpY2UoaGlkZUNvbCwgMSk7XG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIGlmICh0YWJsZVR5cGUgIT09IFNtYXJ0VGFibGVUeXBlLklOSEVSSVRFRCkge1xuICAgICAgICAgICAgdGhpcy50YWJsZUhlYWRlcnMgPSBbXCJzZWxlY3RcIl0uY29uY2F0KHRoaXMudGFibGVIZWFkZXJzKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IFNlbGVjdGlvbk1vZGVsPFQ+KHRoaXMuaXNNdWx0aXBsZSwgW10pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19