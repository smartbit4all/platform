import { SelectionModel } from "@angular/cdk/collections";
export var SmartTableType;
(function (SmartTableType) {
    SmartTableType[SmartTableType["INHERITED"] = 0] = "INHERITED";
    SmartTableType[SmartTableType["CHECK_BOX"] = 1] = "CHECK_BOX";
})(SmartTableType || (SmartTableType = {}));
export class SmartTable {
    constructor(tableRows, tableType, customSmartTableHeaders, title, isMultiple, options) {
        this.tableHeaders = Object.getOwnPropertyNames(tableRows[0]);
        this.customSmartTableHeaders = customSmartTableHeaders;
        this.setTableHeaders();
        this.tableRows = tableRows;
        this.tableType = tableType;
        this.title = title;
        this.isMultiple = isMultiple;
        this.options = options;
        this.pushOptions();
        this.setTableSelectionType(tableType);
    }
    setTableSelectionType(tableType) {
        if (tableType !== SmartTableType.INHERITED) {
            this.tableHeaders = ["select"].concat(this.tableHeaders);
            this.customTableHeaders = ["select"].concat(this.customTableHeaders);
            this.selection = new SelectionModel(this.isMultiple, []);
        }
    }
    pushOptions() {
        if (this.options && this.options.length) {
            this.tableHeaders.push("options");
        }
    }
    setTableHeaders() {
        if (this.customSmartTableHeaders && this.customSmartTableHeaders.length) {
            let originalHeaders = this.tableHeaders;
            this.tableHeaders = [];
            this.customTableHeaders = [];
            this.customSmartTableHeaders.forEach((tableHeader) => {
                if (originalHeaders.includes(tableHeader.propertyName) && !tableHeader.isHidden) {
                    this.tableHeaders.push(tableHeader.propertyName);
                    this.customTableHeaders.push(tableHeader.label);
                }
            });
        }
        else {
            this.customTableHeaders = this.tableHeaders;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnR0YWJsZS5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NtYXJ0dGFibGUvc3JjL2xpYi9zbWFydHRhYmxlLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUxRCxNQUFNLENBQU4sSUFBWSxjQUdYO0FBSEQsV0FBWSxjQUFjO0lBQ3RCLDZEQUFTLENBQUE7SUFDVCw2REFBUyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLGNBQWMsS0FBZCxjQUFjLFFBR3pCO0FBOEJELE1BQU0sT0FBTyxVQUFVO0lBV25CLFlBQ0ksU0FBYyxFQUNkLFNBQXlCLEVBQ3pCLHVCQUE0QyxFQUM1QyxLQUFjLEVBQ2QsVUFBb0IsRUFDcEIsT0FBNEI7UUFFNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLHVCQUF1QixHQUFHLHVCQUF1QixDQUFDO1FBRXZELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUV2QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxTQUF5QjtRQUMzQyxJQUFJLFNBQVMsS0FBSyxjQUFjLENBQUMsU0FBUyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3pELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUNyRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksY0FBYyxDQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0Q7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNyQztJQUNMLENBQUM7SUFFRCxlQUFlO1FBQ1gsSUFBSSxJQUFJLENBQUMsdUJBQXVCLElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRTtZQUNyRSxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUNqRCxJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRTtvQkFDN0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUNqRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkQ7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO2FBQU07WUFDSCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztTQUMvQztJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlbGVjdGlvbk1vZGVsIH0gZnJvbSBcIkBhbmd1bGFyL2Nkay9jb2xsZWN0aW9uc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gU21hcnRUYWJsZVR5cGUge1xyXG4gICAgSU5IRVJJVEVELFxyXG4gICAgQ0hFQ0tfQk9YLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNtYXJ0VGFibGVPcHRpb24ge1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxuICAgIGljb24/OiBzdHJpbmc7XHJcbiAgICBjYWxsYmFjazogKGlkOiBzdHJpbmcpID0+IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTbWFydFRhYmxlSGVhZGVyIHtcclxuICAgIHByb3BlcnR5TmFtZTogc3RyaW5nO1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxuICAgIGlzSGlkZGVuPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTbWFydFRhYmxlQnV0dG9uIHtcclxuICAgIGxhYmxlOiBzdHJpbmc7XHJcbiAgICBpY29uPzogc3RyaW5nO1xyXG4gICAgb25DbGljaz86IChhcmdzPzogYW55W10pID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU21hcnRUYWJsZUludGVyZmFjZTxUPiB7XHJcbiAgICB0aXRsZT86IHN0cmluZztcclxuICAgIHRhYmxlSGVhZGVyczogc3RyaW5nW107XHJcbiAgICBjdXN0b21TbWFydFRhYmxlSGVhZGVycz86IFNtYXJ0VGFibGVIZWFkZXJbXTtcclxuICAgIGN1c3RvbVRhYmxlSGVhZGVyczogc3RyaW5nW107XHJcbiAgICB0YWJsZVJvd3M6IFRbXTtcclxuICAgIHRhYmxlVHlwZTogU21hcnRUYWJsZVR5cGU7XHJcbiAgICBvcHRpb25zPzogU21hcnRUYWJsZU9wdGlvbltdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRUYWJsZTxUPiBpbXBsZW1lbnRzIFNtYXJ0VGFibGVJbnRlcmZhY2U8VD4ge1xyXG4gICAgdGl0bGU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICB0YWJsZUhlYWRlcnM6IHN0cmluZ1tdO1xyXG4gICAgY3VzdG9tU21hcnRUYWJsZUhlYWRlcnM/OiBTbWFydFRhYmxlSGVhZGVyW107XHJcbiAgICBjdXN0b21UYWJsZUhlYWRlcnMhOiBzdHJpbmdbXTtcclxuICAgIHRhYmxlUm93czogVFtdO1xyXG4gICAgdGFibGVUeXBlOiBTbWFydFRhYmxlVHlwZTtcclxuICAgIHNlbGVjdGlvbj86IFNlbGVjdGlvbk1vZGVsPFQ+O1xyXG4gICAgaXNNdWx0aXBsZT86IGJvb2xlYW47XHJcbiAgICBvcHRpb25zPzogU21hcnRUYWJsZU9wdGlvbltdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHRhYmxlUm93czogVFtdLFxyXG4gICAgICAgIHRhYmxlVHlwZTogU21hcnRUYWJsZVR5cGUsXHJcbiAgICAgICAgY3VzdG9tU21hcnRUYWJsZUhlYWRlcnM/OiBTbWFydFRhYmxlSGVhZGVyW10sXHJcbiAgICAgICAgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICAgICAgaXNNdWx0aXBsZT86IGJvb2xlYW4sXHJcbiAgICAgICAgb3B0aW9ucz86IFNtYXJ0VGFibGVPcHRpb25bXVxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy50YWJsZUhlYWRlcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YWJsZVJvd3NbMF0pO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tU21hcnRUYWJsZUhlYWRlcnMgPSBjdXN0b21TbWFydFRhYmxlSGVhZGVycztcclxuXHJcbiAgICAgICAgdGhpcy5zZXRUYWJsZUhlYWRlcnMoKTtcclxuXHJcbiAgICAgICAgdGhpcy50YWJsZVJvd3MgPSB0YWJsZVJvd3M7XHJcbiAgICAgICAgdGhpcy50YWJsZVR5cGUgPSB0YWJsZVR5cGU7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuaXNNdWx0aXBsZSA9IGlzTXVsdGlwbGU7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHJcbiAgICAgICAgdGhpcy5wdXNoT3B0aW9ucygpO1xyXG4gICAgICAgIHRoaXMuc2V0VGFibGVTZWxlY3Rpb25UeXBlKHRhYmxlVHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGFibGVTZWxlY3Rpb25UeXBlKHRhYmxlVHlwZTogU21hcnRUYWJsZVR5cGUpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGFibGVUeXBlICE9PSBTbWFydFRhYmxlVHlwZS5JTkhFUklURUQpIHtcclxuICAgICAgICAgICAgdGhpcy50YWJsZUhlYWRlcnMgPSBbXCJzZWxlY3RcIl0uY29uY2F0KHRoaXMudGFibGVIZWFkZXJzKTtcclxuICAgICAgICAgICAgdGhpcy5jdXN0b21UYWJsZUhlYWRlcnMgPSBbXCJzZWxlY3RcIl0uY29uY2F0KHRoaXMuY3VzdG9tVGFibGVIZWFkZXJzKTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uTW9kZWw8VD4odGhpcy5pc011bHRpcGxlLCBbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1c2hPcHRpb25zKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhYmxlSGVhZGVycy5wdXNoKFwib3B0aW9uc1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGFibGVIZWFkZXJzKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmN1c3RvbVNtYXJ0VGFibGVIZWFkZXJzICYmIHRoaXMuY3VzdG9tU21hcnRUYWJsZUhlYWRlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCBvcmlnaW5hbEhlYWRlcnMgPSB0aGlzLnRhYmxlSGVhZGVycztcclxuICAgICAgICAgICAgdGhpcy50YWJsZUhlYWRlcnMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5jdXN0b21UYWJsZUhlYWRlcnMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5jdXN0b21TbWFydFRhYmxlSGVhZGVycy5mb3JFYWNoKCh0YWJsZUhlYWRlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsSGVhZGVycy5pbmNsdWRlcyh0YWJsZUhlYWRlci5wcm9wZXJ0eU5hbWUpICYmICF0YWJsZUhlYWRlci5pc0hpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFibGVIZWFkZXJzLnB1c2godGFibGVIZWFkZXIucHJvcGVydHlOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbVRhYmxlSGVhZGVycy5wdXNoKHRhYmxlSGVhZGVyLmxhYmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jdXN0b21UYWJsZUhlYWRlcnMgPSB0aGlzLnRhYmxlSGVhZGVycztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19