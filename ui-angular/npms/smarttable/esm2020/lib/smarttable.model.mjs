import { SelectionModel } from "@angular/cdk/collections";
export var SmartTableType;
(function (SmartTableType) {
    SmartTableType[SmartTableType["INHERITED"] = 0] = "INHERITED";
    SmartTableType[SmartTableType["CHECK_BOX"] = 1] = "CHECK_BOX";
})(SmartTableType || (SmartTableType = {}));
export class SmartTable {
    constructor(tableRows, tableType, customSmartTableHeaders, title, isMultiple, options) {
        this.tableHeaders = Object.getOwnPropertyNames(tableRows[0]);
        this.customSmartTableHeaders = customSmartTableHeaders;
        this.setTableHeaders();
        this.tableRows = tableRows;
        this.tableType = tableType;
        this.title = title;
        this.isMultiple = isMultiple;
        this.options = options;
        this.pushOptions();
        this.setTableSelectionType(tableType);
    }
    setTableSelectionType(tableType) {
        if (tableType !== SmartTableType.INHERITED) {
            this.tableHeaders = ["select"].concat(this.tableHeaders);
            this.customTableHeaders = ["select"].concat(this.customTableHeaders);
            this.selection = new SelectionModel(this.isMultiple, []);
        }
    }
    pushOptions() {
        if (this.options && this.options.length) {
            this.tableHeaders.push("options");
        }
    }
    setTableHeaders() {
        if (this.customSmartTableHeaders && this.customSmartTableHeaders.length) {
            let originalHeaders = this.tableHeaders;
            this.tableHeaders = [];
            this.customTableHeaders = [];
            this.customSmartTableHeaders.forEach((tableHeader) => {
                if (originalHeaders.includes(tableHeader.propertyName) && !tableHeader.isHidden) {
                    this.tableHeaders.push(tableHeader.propertyName);
                    this.customTableHeaders.push(tableHeader.label);
                }
            });
        }
        else {
            this.customTableHeaders = this.tableHeaders;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnR0YWJsZS5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NtYXJ0dGFibGUvc3JjL2xpYi9zbWFydHRhYmxlLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUxRCxNQUFNLENBQU4sSUFBWSxjQUdYO0FBSEQsV0FBWSxjQUFjO0lBQ3RCLDZEQUFTLENBQUE7SUFDVCw2REFBUyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLGNBQWMsS0FBZCxjQUFjLFFBR3pCO0FBd0JELE1BQU0sT0FBTyxVQUFVO0lBV25CLFlBQ0ksU0FBYyxFQUNkLFNBQXlCLEVBQ3pCLHVCQUE0QyxFQUM1QyxLQUFjLEVBQ2QsVUFBb0IsRUFDcEIsT0FBNEI7UUFFNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLHVCQUF1QixHQUFHLHVCQUF1QixDQUFDO1FBRXZELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUV2QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxTQUF5QjtRQUMzQyxJQUFJLFNBQVMsS0FBSyxjQUFjLENBQUMsU0FBUyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3pELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUNyRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksY0FBYyxDQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0Q7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNyQztJQUNMLENBQUM7SUFFRCxlQUFlO1FBQ1gsSUFBSSxJQUFJLENBQUMsdUJBQXVCLElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRTtZQUNyRSxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUNqRCxJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRTtvQkFDN0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUNqRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkQ7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO2FBQU07WUFDSCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztTQUMvQztJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlbGVjdGlvbk1vZGVsIH0gZnJvbSBcIkBhbmd1bGFyL2Nkay9jb2xsZWN0aW9uc1wiO1xuXG5leHBvcnQgZW51bSBTbWFydFRhYmxlVHlwZSB7XG4gICAgSU5IRVJJVEVELFxuICAgIENIRUNLX0JPWCxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTbWFydFRhYmxlT3B0aW9uIHtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGljb24/OiBzdHJpbmc7XG4gICAgY2FsbGJhY2s6IChpZDogc3RyaW5nKSA9PiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU21hcnRUYWJsZUhlYWRlciB7XG4gICAgcHJvcGVydHlOYW1lOiBzdHJpbmc7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBpc0hpZGRlbj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU21hcnRUYWJsZUludGVyZmFjZTxUPiB7XG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgdGFibGVIZWFkZXJzOiBzdHJpbmdbXTtcbiAgICBjdXN0b21TbWFydFRhYmxlSGVhZGVycz86IFNtYXJ0VGFibGVIZWFkZXJbXTtcbiAgICBjdXN0b21UYWJsZUhlYWRlcnM6IHN0cmluZ1tdO1xuICAgIHRhYmxlUm93czogVFtdO1xuICAgIHRhYmxlVHlwZTogU21hcnRUYWJsZVR5cGU7XG4gICAgb3B0aW9ucz86IFNtYXJ0VGFibGVPcHRpb25bXTtcbn1cblxuZXhwb3J0IGNsYXNzIFNtYXJ0VGFibGU8VD4gaW1wbGVtZW50cyBTbWFydFRhYmxlSW50ZXJmYWNlPFQ+IHtcbiAgICB0aXRsZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICB0YWJsZUhlYWRlcnM6IHN0cmluZ1tdO1xuICAgIGN1c3RvbVNtYXJ0VGFibGVIZWFkZXJzPzogU21hcnRUYWJsZUhlYWRlcltdO1xuICAgIGN1c3RvbVRhYmxlSGVhZGVycyE6IHN0cmluZ1tdO1xuICAgIHRhYmxlUm93czogVFtdO1xuICAgIHRhYmxlVHlwZTogU21hcnRUYWJsZVR5cGU7XG4gICAgc2VsZWN0aW9uPzogU2VsZWN0aW9uTW9kZWw8VD47XG4gICAgaXNNdWx0aXBsZT86IGJvb2xlYW47XG4gICAgb3B0aW9ucz86IFNtYXJ0VGFibGVPcHRpb25bXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0YWJsZVJvd3M6IFRbXSxcbiAgICAgICAgdGFibGVUeXBlOiBTbWFydFRhYmxlVHlwZSxcbiAgICAgICAgY3VzdG9tU21hcnRUYWJsZUhlYWRlcnM/OiBTbWFydFRhYmxlSGVhZGVyW10sXG4gICAgICAgIHRpdGxlPzogc3RyaW5nLFxuICAgICAgICBpc011bHRpcGxlPzogYm9vbGVhbixcbiAgICAgICAgb3B0aW9ucz86IFNtYXJ0VGFibGVPcHRpb25bXVxuICAgICkge1xuICAgICAgICB0aGlzLnRhYmxlSGVhZGVycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhYmxlUm93c1swXSk7XG4gICAgICAgIHRoaXMuY3VzdG9tU21hcnRUYWJsZUhlYWRlcnMgPSBjdXN0b21TbWFydFRhYmxlSGVhZGVycztcblxuICAgICAgICB0aGlzLnNldFRhYmxlSGVhZGVycygpO1xuXG4gICAgICAgIHRoaXMudGFibGVSb3dzID0gdGFibGVSb3dzO1xuICAgICAgICB0aGlzLnRhYmxlVHlwZSA9IHRhYmxlVHlwZTtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLmlzTXVsdGlwbGUgPSBpc011bHRpcGxlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIHRoaXMucHVzaE9wdGlvbnMoKTtcbiAgICAgICAgdGhpcy5zZXRUYWJsZVNlbGVjdGlvblR5cGUodGFibGVUeXBlKTtcbiAgICB9XG5cbiAgICBzZXRUYWJsZVNlbGVjdGlvblR5cGUodGFibGVUeXBlOiBTbWFydFRhYmxlVHlwZSk6IHZvaWQge1xuICAgICAgICBpZiAodGFibGVUeXBlICE9PSBTbWFydFRhYmxlVHlwZS5JTkhFUklURUQpIHtcbiAgICAgICAgICAgIHRoaXMudGFibGVIZWFkZXJzID0gW1wic2VsZWN0XCJdLmNvbmNhdCh0aGlzLnRhYmxlSGVhZGVycyk7XG4gICAgICAgICAgICB0aGlzLmN1c3RvbVRhYmxlSGVhZGVycyA9IFtcInNlbGVjdFwiXS5jb25jYXQodGhpcy5jdXN0b21UYWJsZUhlYWRlcnMpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uTW9kZWw8VD4odGhpcy5pc011bHRpcGxlLCBbXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdXNoT3B0aW9ucygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnRhYmxlSGVhZGVycy5wdXNoKFwib3B0aW9uc1wiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFRhYmxlSGVhZGVycygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tU21hcnRUYWJsZUhlYWRlcnMgJiYgdGhpcy5jdXN0b21TbWFydFRhYmxlSGVhZGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBvcmlnaW5hbEhlYWRlcnMgPSB0aGlzLnRhYmxlSGVhZGVycztcbiAgICAgICAgICAgIHRoaXMudGFibGVIZWFkZXJzID0gW107XG4gICAgICAgICAgICB0aGlzLmN1c3RvbVRhYmxlSGVhZGVycyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5jdXN0b21TbWFydFRhYmxlSGVhZGVycy5mb3JFYWNoKCh0YWJsZUhlYWRlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEhlYWRlcnMuaW5jbHVkZXModGFibGVIZWFkZXIucHJvcGVydHlOYW1lKSAmJiAhdGFibGVIZWFkZXIuaXNIaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YWJsZUhlYWRlcnMucHVzaCh0YWJsZUhlYWRlci5wcm9wZXJ0eU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbVRhYmxlSGVhZGVycy5wdXNoKHRhYmxlSGVhZGVyLmxhYmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tVGFibGVIZWFkZXJzID0gdGhpcy50YWJsZUhlYWRlcnM7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=