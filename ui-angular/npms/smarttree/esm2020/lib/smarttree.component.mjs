import { NestedTreeControl } from "@angular/cdk/tree";
import { Component, Input } from "@angular/core";
import { MatTreeNestedDataSource } from "@angular/material/tree";
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/material/tree";
import * as i3 from "@angular/material/icon";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/common";
export class SmartTreeComponent {
    constructor(router) {
        this.router = router;
        this.treeControl = new NestedTreeControl((node) => node.childrenNodes);
        this.dataSource = new MatTreeNestedDataSource();
        this.hasChild = (_, node) => node.hasChildren;
    }
    ngOnInit() {
        this.dataSource.data = this.treeData.rootNodes;
    }
    onNodeClick(node) {
        if (this.tempActiveNode)
            this.tempActiveNode.selected = false;
        node.selected = true;
        this.tempActiveNode = node;
        this.router.navigateByUrl(node.objectUri);
    }
    getNodeStyle(node) {
        if (this.treeStyle) {
            var style = node.selected
                ? {
                    background: this.treeStyle.activeStyle?.backgroundColor,
                    color: this.treeStyle.activeStyle?.color,
                    "padding-left": 15 * node.level + "px",
                }
                : {
                    background: this.treeStyle.levelBackgroundColor[node.level - 1],
                    color: this.treeStyle.color,
                    "padding-left": 15 * node.level + "px",
                };
            return style;
        }
        return {};
    }
}
SmartTreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartTreeComponent, deps: [{ token: i1.Router }], target: i0.ɵɵFactoryTarget.Component });
SmartTreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: SmartTreeComponent, selector: "smart-tree", inputs: { treeData: "treeData", treeStyle: "treeStyle" }, ngImport: i0, template: "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"sm-tree\">\n\t<mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\">\n\t\t<div\n\t\t\tclass=\"mat-tree-node sm-tree-node\"\n\t\t\t(click)=\"onNodeClick(node)\"\n\t\t\t[ngStyle]=\"getNodeStyle(node)\"\n\t\t>\n\t\t\t<mat-icon class=\"mat-icon-rtl-mirror\">\n\t\t\t\t<div *ngIf=\"hasChild(node.level, node)\">\n\t\t\t\t\t{{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}\n\t\t\t\t</div>\n\t\t\t</mat-icon>\n\t\t\t<button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.name\">\n\t\t\t\t<mat-icon>\n\t\t\t\t\t{{ node.icon }}\n\t\t\t\t</mat-icon>\n\t\t\t</button>\n\t\t\t<div class=\"sm-tree-node-name\">\n\t\t\t\t{{ node.caption }}\n\t\t\t\t<p class=\"sm-tree-node-id\">Azonos\u00EDt\u00F3:{{ node.shortDescription }}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<div [class.sm-tree-invisible]=\"!treeControl.isExpanded(node)\" role=\"group\">\n\t\t\t<ng-container matTreeNodeOutlet></ng-container>\n\t\t</div>\n\t</mat-nested-tree-node>\n</mat-tree>\n", styles: [".sm-tree-invisible{display:none}.sm-tree ul,.sm-tree li{margin-top:0;margin-bottom:0;list-style-type:none}.sm-tree div[role=group]>.mat-tree-node{padding-left:40px}.sm-tee-node{padding-left:40px}.sm-tree-node-name{padding-left:15px;padding-top:15px;display:flex;flex-direction:column}.sm-tee-node-id{font-weight:lighter}.mat-tree-node:hover{cursor:pointer}::ng-deep .mat-icon-rtl-mirror{display:flex;flex-direction:row}\n"], components: [{ type: i2.MatTree, selector: "mat-tree", exportAs: ["matTree"] }, { type: i3.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i2.MatTreeNodeDef, selector: "[matTreeNodeDef]", inputs: ["matTreeNodeDefWhen", "matTreeNode"] }, { type: i2.MatNestedTreeNode, selector: "mat-nested-tree-node", inputs: ["role", "disabled", "tabIndex", "matNestedTreeNode"], exportAs: ["matNestedTreeNode"] }, { type: i5.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.MatTreeNodeToggle, selector: "[matTreeNodeToggle]", inputs: ["matTreeNodeToggleRecursive"] }, { type: i2.MatTreeNodeOutlet, selector: "[matTreeNodeOutlet]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartTreeComponent, decorators: [{
            type: Component,
            args: [{ selector: "smart-tree", template: "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"sm-tree\">\n\t<mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\">\n\t\t<div\n\t\t\tclass=\"mat-tree-node sm-tree-node\"\n\t\t\t(click)=\"onNodeClick(node)\"\n\t\t\t[ngStyle]=\"getNodeStyle(node)\"\n\t\t>\n\t\t\t<mat-icon class=\"mat-icon-rtl-mirror\">\n\t\t\t\t<div *ngIf=\"hasChild(node.level, node)\">\n\t\t\t\t\t{{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}\n\t\t\t\t</div>\n\t\t\t</mat-icon>\n\t\t\t<button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.name\">\n\t\t\t\t<mat-icon>\n\t\t\t\t\t{{ node.icon }}\n\t\t\t\t</mat-icon>\n\t\t\t</button>\n\t\t\t<div class=\"sm-tree-node-name\">\n\t\t\t\t{{ node.caption }}\n\t\t\t\t<p class=\"sm-tree-node-id\">Azonos\u00EDt\u00F3:{{ node.shortDescription }}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<div [class.sm-tree-invisible]=\"!treeControl.isExpanded(node)\" role=\"group\">\n\t\t\t<ng-container matTreeNodeOutlet></ng-container>\n\t\t</div>\n\t</mat-nested-tree-node>\n</mat-tree>\n", styles: [".sm-tree-invisible{display:none}.sm-tree ul,.sm-tree li{margin-top:0;margin-bottom:0;list-style-type:none}.sm-tree div[role=group]>.mat-tree-node{padding-left:40px}.sm-tee-node{padding-left:40px}.sm-tree-node-name{padding-left:15px;padding-top:15px;display:flex;flex-direction:column}.sm-tee-node-id{font-weight:lighter}.mat-tree-node:hover{cursor:pointer}::ng-deep .mat-icon-rtl-mirror{display:flex;flex-direction:row}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.Router }]; }, propDecorators: { treeData: [{
                type: Input
            }], treeStyle: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnR0cmVlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NtYXJ0dHJlZS9zcmMvbGliL3NtYXJ0dHJlZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zbWFydHRyZWUvc3JjL2xpYi9zbWFydHRyZWUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7Ozs7QUFVakUsTUFBTSxPQUFPLGtCQUFrQjtJQU8zQixZQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQU5sQyxnQkFBVyxHQUFHLElBQUksaUJBQWlCLENBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RSxlQUFVLEdBQUcsSUFBSSx1QkFBdUIsRUFBWSxDQUFDO1FBaUJyRCxhQUFRLEdBQUcsQ0FBQyxDQUFTLEVBQUUsSUFBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBWnRCLENBQUM7SUFDdEMsUUFBUTtRQUNKLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0lBQ25ELENBQUM7SUFFRCxXQUFXLENBQUMsSUFBYztRQUN0QixJQUFJLElBQUksQ0FBQyxjQUFjO1lBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzlELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFVLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBSUQsWUFBWSxDQUFDLElBQWM7UUFDdkIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRO2dCQUNyQixDQUFDLENBQUM7b0JBQ0ksVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLGVBQWU7b0JBQ3ZELEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxLQUFLO29CQUN4QyxjQUFjLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFNLEdBQUcsSUFBSTtpQkFDMUM7Z0JBQ0gsQ0FBQyxDQUFDO29CQUNJLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFxQixDQUFDLElBQUksQ0FBQyxLQUFNLEdBQUcsQ0FBQyxDQUFDO29CQUNqRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFNO29CQUM1QixjQUFjLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFNLEdBQUcsSUFBSTtpQkFDMUMsQ0FBQztZQUNSLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOzsrR0FyQ1Esa0JBQWtCO21HQUFsQixrQkFBa0IsNEdDWi9CLCtpQ0EyQkE7MkZEZmEsa0JBQWtCO2tCQUw5QixTQUFTOytCQUNJLFlBQVk7NkZBUWIsUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmVzdGVkVHJlZUNvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvY2RrL3RyZWVcIjtcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBNYXRUcmVlTmVzdGVkRGF0YVNvdXJjZSB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC90cmVlXCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5pbXBvcnQgeyBUcmVlTW9kZWwsIFRyZWVOb2RlIH0gZnJvbSBcIi4vY29yZS9hcGkvdHJlZVwiO1xuaW1wb3J0IHsgVHJlZVN0eWxlIH0gZnJvbSBcIi4vc21hcnR0cmVlLm5vZGUubW9kZWxcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwic21hcnQtdHJlZVwiLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vc21hcnR0cmVlLmNvbXBvbmVudC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbXCIuL3NtYXJ0dHJlZS5jb21wb25lbnQuY3NzXCJdLFxufSlcbmV4cG9ydCBjbGFzcyBTbWFydFRyZWVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHRyZWVDb250cm9sID0gbmV3IE5lc3RlZFRyZWVDb250cm9sPFRyZWVOb2RlPigobm9kZSkgPT4gbm9kZS5jaGlsZHJlbk5vZGVzKTtcbiAgICBkYXRhU291cmNlID0gbmV3IE1hdFRyZWVOZXN0ZWREYXRhU291cmNlPFRyZWVOb2RlPigpO1xuICAgIHRlbXBBY3RpdmVOb2RlPzogVHJlZU5vZGU7XG4gICAgQElucHV0KCkgdHJlZURhdGEhOiBUcmVlTW9kZWw7XG4gICAgQElucHV0KCkgdHJlZVN0eWxlPzogVHJlZVN0eWxlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge31cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlLmRhdGEgPSB0aGlzLnRyZWVEYXRhLnJvb3ROb2RlcztcbiAgICB9XG5cbiAgICBvbk5vZGVDbGljayhub2RlOiBUcmVlTm9kZSkge1xuICAgICAgICBpZiAodGhpcy50ZW1wQWN0aXZlTm9kZSkgdGhpcy50ZW1wQWN0aXZlTm9kZS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICBub2RlLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50ZW1wQWN0aXZlTm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwobm9kZS5vYmplY3RVcmkhKTtcbiAgICB9XG5cbiAgICBoYXNDaGlsZCA9IChfOiBudW1iZXIsIG5vZGU6IFRyZWVOb2RlKSA9PiBub2RlLmhhc0NoaWxkcmVuO1xuXG4gICAgZ2V0Tm9kZVN0eWxlKG5vZGU6IFRyZWVOb2RlKSB7XG4gICAgICAgIGlmICh0aGlzLnRyZWVTdHlsZSkge1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gbm9kZS5zZWxlY3RlZFxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRoaXMudHJlZVN0eWxlLmFjdGl2ZVN0eWxlPy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHRoaXMudHJlZVN0eWxlLmFjdGl2ZVN0eWxlPy5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICBcInBhZGRpbmctbGVmdFwiOiAxNSAqIG5vZGUubGV2ZWwhICsgXCJweFwiLFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRoaXMudHJlZVN0eWxlLmxldmVsQmFja2dyb3VuZENvbG9yIVtub2RlLmxldmVsISAtIDFdLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLnRyZWVTdHlsZS5jb2xvciEsXG4gICAgICAgICAgICAgICAgICAgICAgXCJwYWRkaW5nLWxlZnRcIjogMTUgKiBub2RlLmxldmVsISArIFwicHhcIixcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbn1cbiIsIjxtYXQtdHJlZSBbZGF0YVNvdXJjZV09XCJkYXRhU291cmNlXCIgW3RyZWVDb250cm9sXT1cInRyZWVDb250cm9sXCIgY2xhc3M9XCJzbS10cmVlXCI+XG5cdDxtYXQtbmVzdGVkLXRyZWUtbm9kZSAqbWF0VHJlZU5vZGVEZWY9XCJsZXQgbm9kZTsgd2hlbjogaGFzQ2hpbGRcIj5cblx0XHQ8ZGl2XG5cdFx0XHRjbGFzcz1cIm1hdC10cmVlLW5vZGUgc20tdHJlZS1ub2RlXCJcblx0XHRcdChjbGljayk9XCJvbk5vZGVDbGljayhub2RlKVwiXG5cdFx0XHRbbmdTdHlsZV09XCJnZXROb2RlU3R5bGUobm9kZSlcIlxuXHRcdD5cblx0XHRcdDxtYXQtaWNvbiBjbGFzcz1cIm1hdC1pY29uLXJ0bC1taXJyb3JcIj5cblx0XHRcdFx0PGRpdiAqbmdJZj1cImhhc0NoaWxkKG5vZGUubGV2ZWwsIG5vZGUpXCI+XG5cdFx0XHRcdFx0e3sgdHJlZUNvbnRyb2wuaXNFeHBhbmRlZChub2RlKSA/ICdleHBhbmRfbW9yZScgOiAnY2hldnJvbl9yaWdodCcgfX1cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L21hdC1pY29uPlxuXHRcdFx0PGJ1dHRvbiBtYXQtaWNvbi1idXR0b24gbWF0VHJlZU5vZGVUb2dnbGUgW2F0dHIuYXJpYS1sYWJlbF09XCInVG9nZ2xlICcgKyBub2RlLm5hbWVcIj5cblx0XHRcdFx0PG1hdC1pY29uPlxuXHRcdFx0XHRcdHt7IG5vZGUuaWNvbiB9fVxuXHRcdFx0XHQ8L21hdC1pY29uPlxuXHRcdFx0PC9idXR0b24+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwic20tdHJlZS1ub2RlLW5hbWVcIj5cblx0XHRcdFx0e3sgbm9kZS5jYXB0aW9uIH19XG5cdFx0XHRcdDxwIGNsYXNzPVwic20tdHJlZS1ub2RlLWlkXCI+QXpvbm9zw610w7M6e3sgbm9kZS5zaG9ydERlc2NyaXB0aW9uIH19PC9wPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdFx0PGRpdiBbY2xhc3Muc20tdHJlZS1pbnZpc2libGVdPVwiIXRyZWVDb250cm9sLmlzRXhwYW5kZWQobm9kZSlcIiByb2xlPVwiZ3JvdXBcIj5cblx0XHRcdDxuZy1jb250YWluZXIgbWF0VHJlZU5vZGVPdXRsZXQ+PC9uZy1jb250YWluZXI+XG5cdFx0PC9kaXY+XG5cdDwvbWF0LW5lc3RlZC10cmVlLW5vZGU+XG48L21hdC10cmVlPlxuIl19