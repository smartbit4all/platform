{"version":3,"file":"smartbit4all-form.mjs","sources":["../../../projects/smartform/src/lib/smartform.model.ts","../../../projects/smartform/src/lib/services/smartform.service.ts","../../../projects/smartform/src/lib/widgets/smartformwidget/smartformwidget.component.ts","../../../projects/smartform/src/lib/widgets/smartformwidget/smartformwidget.component.html","../../../projects/smartform/src/lib/smartform.component.ts","../../../projects/smartform/src/lib/smartform.component.html","../../../projects/smartform/src/lib/smartfileuploader/smartfileuploader.component.ts","../../../projects/smartform/src/lib/smartfileuploader/smartfileuploader.component.html","../../../projects/smartform/src/lib/smartform.module.ts","../../../projects/smartform/src/public-api.ts","../../../projects/smartform/src/smartbit4all-form.ts"],"sourcesContent":["import { ValidatorFn } from \"@angular/forms\";\r\n\r\n/**\r\n * This enum containes the available types of the form widgets.\r\n *\r\n * @author Roland Fényes\r\n */\r\nexport enum SmartFormWidgetType {\r\n    TEXT_FIELD,\r\n    TEXT_FIELD_NUMBER,\r\n    TEXT_FIELD_CHIPS,\r\n    TEXT_BOX,\r\n    SELECT,\r\n    SELECT_MULTIPLE,\r\n    CHECK_BOX,\r\n    CHECK_BOX_TABLE,\r\n    RADIO_BUTTON,\r\n    DATE_PICKER,\r\n    FILE_UPLOAD,\r\n    ITEM,\r\n    CONTAINER,\r\n    LABEL\r\n}\r\n\r\nexport enum SmartFormWidgetDirection {\r\n    COL,\r\n    ROW,\r\n}\r\n\r\nexport enum SmartFormWidgetWidth {\r\n    SMALL = 150,\r\n    MEDIUM = 250,\r\n    LARGE = 350,\r\n    EXTRA_LARGE = 450,\r\n}\r\n\r\n/**\r\n * This interface describes a widget in a form.\r\n *\r\n * @param key Must be unique\r\n * @param label The label of the widget\r\n * @param value Default value\r\n * @param type The type of the form widget\r\n * @param callback Action callback\r\n * @param valueList Use this if you want to define selectable values\r\n * @param isRequired\r\n * @param icon Please use Angular Material icons\r\n *\r\n * @author Roland Fényes\r\n */\r\nexport interface SmartFormWidget<T> {\r\n    key: string;\r\n    label: string;\r\n    showLabel?: boolean;\r\n    value: T;\r\n    widgetDescription?: string;\r\n    type: SmartFormWidgetType;\r\n    callback?: (args: any[]) => any;\r\n    placeholder?: string;\r\n    minValues?: number;\r\n    maxValues?: number;\r\n    direction?: SmartFormWidgetDirection;\r\n    valueList?: SmartFormWidget<T>[];\r\n    isRequired?: boolean;\r\n    icon?: string;\r\n    minWidth?: SmartFormWidgetWidth;\r\n    isDisabled?: boolean;\r\n    prefix?: string;\r\n    suffix?: string;\r\n    validators?: ValidatorFn[];\r\n    errorMessage?: string;\r\n}\r\n\r\n/**\r\n * Dynamic forms can be easily defined with this interface.\r\n *\r\n * @param name The name of the form\r\n * @param widgets The widgets presented in the form\r\n *\r\n * @author Roland Fényes\r\n */\r\nexport interface SmartForm {\r\n    name: string;\r\n    direction: SmartFormWidgetDirection;\r\n    widgets: SmartFormWidget<any>[];\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { FormControl, FormGroup, ValidatorFn, Validators } from \"@angular/forms\";\r\nimport { SmartForm, SmartFormWidget, SmartFormWidgetType } from \"../smartform.model\";\r\n\r\n@Injectable()\r\nexport class SmartFormService {\r\n    group: any = {};\r\n\r\n    toFormGroup(smartForm: SmartForm): FormGroup {\r\n        this.createFormControls(smartForm.widgets);\r\n\r\n        return new FormGroup(this.group);\r\n    }\r\n\r\n    createFormControls(widgets: SmartFormWidget<any>[]) {\r\n        widgets.forEach((widget) => {\r\n            if (\r\n                widget.validators &&\r\n                widget.isRequired &&\r\n                !this.isValidatorInList(Validators.required, widget.validators)\r\n            ) {\r\n                widget.validators.push(Validators.required);\r\n            } else if (!widget.validators && widget.isRequired) {\r\n                widget.validators = [Validators.required];\r\n            }\r\n\r\n            let formControl = new FormControl(widget.value || \"\", widget.validators);\r\n\r\n            if (widget.isDisabled) {\r\n                formControl.disable();\r\n            }\r\n\r\n            this.group[widget.key] = formControl;\r\n            if (widget.type === SmartFormWidgetType.CONTAINER && widget.valueList?.length) {\r\n                this.createFormControls(widget.valueList);\r\n            }\r\n        });\r\n    }\r\n\r\n    isValidatorInList(validator: Validators, list?: ValidatorFn[]): boolean {\r\n        return list !== undefined && list.length > 0 && list.some((v) => v === validator);\r\n    }\r\n\r\n    toSmartForm(group: FormGroup, smartForm: SmartForm): SmartForm {\r\n        smartForm.widgets.forEach((widget) => {\r\n            widget.value = group.controls[widget.key].value;\r\n        });\r\n\r\n        return smartForm;\r\n    }\r\n}\r\n","import { COMMA, ENTER } from \"@angular/cdk/keycodes\";\r\nimport { Component, Input, ViewEncapsulation } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { MatChipInputEvent } from \"@angular/material/chips\";\r\nimport {\r\n    SmartFormWidget,\r\n    SmartFormWidgetDirection,\r\n    SmartFormWidgetType,\r\n} from \"../../smartform.model\";\r\n\r\n@Component({\r\n    selector: \"smartformwidget\",\r\n    templateUrl: \"./smartformwidget.component.html\",\r\n    styleUrls: [\"./smartformwidget.component.css\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SmartformwidgetComponent {\r\n    @Input() form!: FormGroup;\r\n    @Input() widgetInstance!: SmartFormWidget<any>;\r\n\r\n    smartFormWidgetType = SmartFormWidgetType;\r\n\r\n    constructor() {}\r\n\r\n    addOnBlur = true;\r\n    readonly separatorKeysCodes = [ENTER, COMMA] as const;\r\n\r\n    add(event: MatChipInputEvent): void {\r\n        const value = (event.value || \"\").trim();\r\n\r\n        if (value) {\r\n            if (\r\n                (this.widgetInstance.maxValues &&\r\n                    this.widgetInstance.valueList!.length < this.widgetInstance.maxValues) ||\r\n                !this.widgetInstance.maxValues\r\n            ) {\r\n                this.widgetInstance.valueList!.push({\r\n                    key: value,\r\n                    label: value,\r\n                    type: SmartFormWidgetType.ITEM,\r\n                    value: value,\r\n                    callback: this.widgetInstance.callback,\r\n                });\r\n            }\r\n        }\r\n\r\n        // Clear the input value\r\n        event.chipInput!.clear();\r\n    }\r\n\r\n    remove(value: SmartFormWidget<any>): void {\r\n        const index = this.widgetInstance.valueList!.indexOf(value);\r\n\r\n        if (index >= 0) {\r\n            this.widgetInstance.valueList!.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    getDirection(): string {\r\n        if (this.widgetInstance.direction === undefined) {\r\n            return \"\";\r\n        } else if (this.widgetInstance.direction === SmartFormWidgetDirection.COL) {\r\n            return \"direction-col\";\r\n        } else {\r\n            return \"direction-row\";\r\n        }\r\n    }\r\n}\r\n","<div class=\"container\" [formGroup]=\"form\">\r\n  <div [ngSwitch]=\"widgetInstance.type\" class=\"container\">\r\n    <div\r\n      *ngSwitchCase=\"smartFormWidgetType.CONTAINER\"\r\n      [ngClass]=\"getDirection()\"\r\n    >\r\n      <smartformwidget\r\n        *ngFor=\"let widget of widgetInstance.valueList\"\r\n        [form]=\"form\"\r\n        [widgetInstance]=\"widget\"\r\n      ></smartformwidget>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h4>{{ widgetInstance.label }}</h4>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input textField\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <input\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [type]=\"'string'\"\r\n          [value]=\"widgetInstance.value\"\r\n          placeholder=\"{{ widgetInstance.placeholder }}\"\r\n          matInput\r\n        />\r\n        <span\r\n          class=\"mat-error\"\r\n          *ngIf=\"\r\n            !form.get(widgetInstance.key)?.valid &&\r\n            form.get(widgetInstance.key)?.touched\r\n          \"\r\n        >\r\n          {{ widgetInstance.errorMessage }}\r\n        </span>\r\n        <span matPrefix>\r\n          {{ widgetInstance.prefix }}\r\n        </span>\r\n        <span matSuffix>\r\n          {{ widgetInstance.suffix }}\r\n        </span>\r\n        <mat-icon *ngIf=\"widgetInstance.icon\" matSuffix>\r\n          {{ widgetInstance.icon }}\r\n        </mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD_NUMBER\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h4>{{ widgetInstance.label }}</h4>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input textField\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <input\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [value]=\"widgetInstance.value\"\r\n          type=\"number\"\r\n          placeholder=\"{{ widgetInstance.placeholder }}\"\r\n          min=\"10\"\r\n          matInput\r\n        />\r\n        <span\r\n          class=\"mat-error\"\r\n          *ngIf=\"\r\n            !form.get(widgetInstance.key)?.valid &&\r\n            form.get(widgetInstance.key)?.touched\r\n          \"\r\n        >\r\n          {{ widgetInstance.errorMessage }}\r\n        </span>\r\n        <span matPrefix>\r\n          {{ widgetInstance.prefix }}\r\n        </span>\r\n        <span matSuffix>\r\n          {{ widgetInstance.suffix }}\r\n        </span>\r\n        <mat-icon *ngIf=\"widgetInstance.icon\" matSuffix>\r\n          {{ widgetInstance.icon }}\r\n        </mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD_CHIPS\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h4>{{ widgetInstance.label }}</h4>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-chip-list #chipList aria-label=\"{{ widgetInstance.label }}\">\r\n          <mat-chip\r\n            *ngFor=\"let value of widgetInstance.valueList\"\r\n            (removed)=\"remove(value)\"\r\n          >\r\n            {{ value.label }}\r\n            <button matChipRemove>\r\n              <mat-icon>cancel</mat-icon>\r\n            </button>\r\n          </mat-chip>\r\n          <input\r\n            placeholder=\"{{ widgetInstance.placeholder }}\"\r\n            [matChipInputFor]=\"chipList\"\r\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n            [matChipInputAddOnBlur]=\"addOnBlur\"\r\n            (matChipInputTokenEnd)=\"add($event)\"\r\n          />\r\n          <span\r\n            class=\"mat-error\"\r\n            *ngIf=\"\r\n              !form.get(widgetInstance.key)?.valid &&\r\n              form.get(widgetInstance.key)?.touched\r\n            \"\r\n          >\r\n            {{ widgetInstance.errorMessage }}\r\n          </span>\r\n        </mat-chip-list>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_BOX\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h4>{{ widgetInstance.label }}</h4>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <textarea\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [type]=\"'string'\"\r\n          [value]=\"widgetInstance.value\"\r\n          placeholder=\"{{ widgetInstance.value }}\"\r\n          matInput\r\n        ></textarea>\r\n        <span\r\n          class=\"mat-error\"\r\n          *ngIf=\"\r\n            !form.get(widgetInstance.key)?.valid &&\r\n            form.get(widgetInstance.key)?.touched\r\n          \"\r\n        >\r\n          {{ widgetInstance.errorMessage }}\r\n        </span>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.CHECK_BOX\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h4>{{ widgetInstance.label }}</h4>\r\n      </div>\r\n      <div\r\n        class=\"input checkbox\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <section class=\"checkbox-section\" [ngClass]=\"getDirection()\">\r\n          <mat-checkbox\r\n            *ngFor=\"let checkbox of widgetInstance.valueList\"\r\n            class=\"selecatbleObject\"\r\n            formControlName=\"{{ widgetInstance.key }}\"\r\n          >\r\n            {{ checkbox.label }}\r\n          </mat-checkbox>\r\n        </section>\r\n        <span\r\n          class=\"mat-error\"\r\n          *ngIf=\"\r\n            !form.get(widgetInstance.key)?.valid &&\r\n            form.get(widgetInstance.key)?.touched\r\n          \"\r\n        >\r\n          {{ widgetInstance.errorMessage }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.RADIO_BUTTON\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h4>{{ widgetInstance.label }}</h4>\r\n      </div>\r\n      <mat-radio-group\r\n        class=\"input radio-section\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        aria-label=\"{{ widgetInstance.label }}\"\r\n        appearance=\"outline\"\r\n        formControlName=\"{{ widgetInstance.key }}\"\r\n      >\r\n        <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <div [ngClass]=\"getDirection()\">\r\n          <mat-radio-button\r\n            class=\"selecatbleObject\"\r\n            *ngFor=\"let radio of widgetInstance.valueList\"\r\n            value=\"{{ radio.value }}\"\r\n            [ngClass]=\"getDirection()\"\r\n          >\r\n            {{ radio.label }}\r\n          </mat-radio-button>\r\n        </div>\r\n      </mat-radio-group>\r\n      <span\r\n        class=\"mat-error\"\r\n        *ngIf=\"\r\n          !form.get(widgetInstance.key)?.valid &&\r\n          form.get(widgetInstance.key)?.touched\r\n        \"\r\n      >\r\n        {{ widgetInstance.errorMessage }}\r\n      </span>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.DATE_PICKER\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h4>{{ widgetInstance.label }}</h4>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n        <mat-datepicker #picker></mat-datepicker>\r\n        <input\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [value]=\"widgetInstance.value\"\r\n          placeholder=\"{{ widgetInstance.value }}\"\r\n          matInput\r\n          [matDatepicker]=\"picker\"\r\n        />\r\n        <span\r\n          class=\"mat-error\"\r\n          *ngIf=\"\r\n            !form.get(widgetInstance.key)?.valid &&\r\n            form.get(widgetInstance.key)?.touched\r\n          \"\r\n        >\r\n          {{ widgetInstance.errorMessage }}\r\n        </span>\r\n        <mat-hint>MM/DD/YYYY</mat-hint>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.SELECT\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h4>{{ widgetInstance.label }}</h4>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-select [formControlName]=\"widgetInstance.key\">\r\n          <mat-option\r\n            *ngFor=\"let option of widgetInstance.valueList\"\r\n            [value]=\"option.key\"\r\n            >{{ option.value }}</mat-option\r\n          >\r\n        </mat-select>\r\n        <span\r\n          class=\"mat-error\"\r\n          *ngIf=\"\r\n            !form.get(widgetInstance.key)?.valid &&\r\n            form.get(widgetInstance.key)?.touched\r\n          \"\r\n        >\r\n          {{ widgetInstance.errorMessage }}\r\n        </span>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.SELECT_MULTIPLE\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h4>{{ widgetInstance.label }}</h4>\r\n      </div>\r\n      <div\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-select [formControlName]=\"widgetInstance.key\" multiple>\r\n          <mat-option\r\n            *ngFor=\"let option of widgetInstance.valueList\"\r\n            [value]=\"option.key\"\r\n            >{{ option.value }}</mat-option\r\n          >\r\n        </mat-select>\r\n        <span\r\n          class=\"mat-error\"\r\n          *ngIf=\"\r\n            !form.get(widgetInstance.key)?.valid &&\r\n            form.get(widgetInstance.key)?.touched\r\n          \"\r\n        >\r\n          {{ widgetInstance.errorMessage }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      *ngSwitchCase=\"smartFormWidgetType.LABEL\"\r\n      class=\"label\"\r\n      [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n    >\r\n      <div class=\"label-title\">\r\n        <h4>\r\n          {{ widgetInstance.label }}\r\n        </h4>\r\n        <p>{{ widgetInstance.widgetDescription }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { SmartFormService } from \"./services/smartform.service\";\r\nimport { SmartForm, SmartFormWidgetDirection } from \"./smartform.model\";\r\n\r\n@Component({\r\n    selector: \"smartform\",\r\n    templateUrl: \"./smartform.component.html\",\r\n    styleUrls: [\"./smartform.component.css\"],\r\n    providers: [SmartFormService],\r\n})\r\nexport class SmartformComponent implements OnInit {\r\n    @Input() smartForm!: SmartForm;\r\n\r\n    form!: FormGroup;\r\n\r\n    direction = SmartFormWidgetDirection;\r\n\r\n    constructor(private service: SmartFormService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.form = this.service.toFormGroup(this.smartForm);\r\n    }\r\n\r\n    getForm(): FormGroup {\r\n        return this.form;\r\n    }\r\n\r\n    submitForm(): SmartForm {\r\n        if (this.form.status === \"VALID\") {\r\n            return this.service.toSmartForm(this.form, this.smartForm);\r\n        } else {\r\n            throw new Error(`The form status is ${this.form.status}.`);\r\n        }\r\n    }\r\n}\r\n","<form [formGroup]=\"form\" class=\"flex form\">\r\n    <h2>\r\n        {{ smartForm.name }}\r\n    </h2>\r\n    <div [ngClass]=\"smartForm.direction === direction.ROW ? 'row' : 'col'\">\r\n        <smartformwidget\r\n            *ngFor=\"let widget of smartForm.widgets\"\r\n            [widgetInstance]=\"widget\"\r\n            [form]=\"form\"\r\n            class=\"grid-item\"\r\n        ></smartformwidget>\r\n    </div>\r\n</form>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { SmartFileUploaderI18n } from './smartfileuploader.model';\r\n\r\n@Component({\r\n\tselector: 'smartfileuploader',\r\n\ttemplateUrl: './smartfileuploader.component.html',\r\n\tstyleUrls: ['./smartfileuploader.component.css']\r\n})\r\nexport class SmartfileuploaderComponent implements OnInit {\r\n\tfiles: any[] = [];\r\n\t@Input() uploadCallback!: (files: any[]) => void;\r\n\t@Input() fileFormats: string[] = [];\r\n\t@Input() i18n!: SmartFileUploaderI18n;\r\n\r\n\tconstructor() {\r\n\t\tthis.i18n = {\r\n\t\t\taddFile: 'dokumentum hozzáadása',\r\n\t\t\tbrowseOrDrag: 'tallózás vagy behúzás',\r\n\t\t\tmaxSize: 'max. 25 MB',\r\n\t\t\tformats: 'PDF, docx, xls formátum'\r\n\t\t};\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tconsole.log(this.fileFormats);\r\n\t}\r\n\r\n\tgetFile(event: any): void {\r\n\t\tif (event.target.files && event.target.files.length) {\r\n\t\t\tthis.files = [...this.files, ...event.target.files];\r\n\t\t}\r\n\t}\r\n\r\n\tremove(index: number): void {\r\n\t\tthis.files.splice(index, 1);\r\n\t}\r\n\r\n\tuploadFile(): void {\r\n\t\tthis.uploadCallback(this.files);\r\n\t}\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"fileContainer\">\r\n        <div class=\"fileInnerContainer\">\r\n            <input\r\n                id=\"addFile\"\r\n                placeholder=\"fileInput\"\r\n                type=\"file\"\r\n                (change)=\"getFile($event)\"\r\n                class=\"file\"\r\n                accept=\"{{ fileFormats.join(', ') }}\"\r\n                multiple\r\n            />\r\n            <div class=\"fileUploadContentContainer\">\r\n                <mat-label class=\"addFileButton\">\r\n                    <mat-icon color=\"primary\" class=\"addCircle\">add_circle</mat-icon>\r\n                </mat-label>\r\n                <mat-label class=\"label primary\"> {{ i18n.addFile }} </mat-label>\r\n                <mat-label class=\"label secondary\"> {{ i18n.browseOrDrag }} </mat-label>\r\n                <mat-label class=\"subLabel primary\"> {{ i18n.maxSize }} </mat-label>\r\n                <mat-label class=\"subLabel primary\"> {{ i18n.formats }} </mat-label>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"files.length\" class=\"uploadedFilesContainer\">\r\n        <div *ngFor=\"let file of files; let i = index\" class=\"uploadedFile\">\r\n            <mat-label class=\"fileNameLabel\"> {{ file.name }} </mat-label>\r\n            <button mat-icon-button (click)=\"remove(i)\">\r\n                <mat-icon>close</mat-icon>\r\n            </button>\r\n        </div>\r\n        <button class=\"uploadButton\" mat-raised-button color=\"primary\" (click)=\"uploadFile()\">\r\n            Feltöltés\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from \"@angular/core\";\r\nimport { SmartformComponent } from \"./smartform.component\";\r\nimport { MatChipsModule } from \"@angular/material/chips\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\r\nimport { MatNativeDateModule } from \"@angular/material/core\";\r\nimport { MatRadioModule } from \"@angular/material/radio\";\r\n\r\nimport { SmartformwidgetComponent } from \"./widgets/smartformwidget/smartformwidget.component\";\r\nimport { SmartfileuploaderComponent } from \"./smartfileuploader/smartfileuploader.component\";\r\nimport { MatCommonModule } from \"@angular/material/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { SmartFormService } from \"./services/smartform.service\";\r\n\r\n@NgModule({\r\n    declarations: [SmartformComponent, SmartformwidgetComponent, SmartfileuploaderComponent],\r\n    imports: [\r\n        BrowserModule,\r\n        MatCommonModule,\r\n        MatChipsModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatFormFieldModule,\r\n        MatCheckboxModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatDatepickerModule,\r\n        MatNativeDateModule,\r\n        MatRadioModule,\r\n    ],\r\n    exports: [SmartformComponent, SmartformwidgetComponent, SmartfileuploaderComponent],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n    providers: [SmartFormService],\r\n})\r\nexport class SmartformModule {}\r\n","/*\r\n * Public API Surface of smartform\r\n */\r\n\r\nexport * from \"./lib/smartform.component\";\r\nexport * from \"./lib/widgets/smartformwidget/smartformwidget.component\";\r\nexport * from \"./lib/smartfileuploader/smartfileuploader.component\";\r\nexport * from \"./lib/smartfileuploader/smartfileuploader.model\";\r\nexport * from \"./lib/smartform.module\";\r\nexport * from \"./lib/smartform.model\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.SmartFormService","i2.SmartformwidgetComponent","i3","i4","i1","i2"],"mappings":"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"}