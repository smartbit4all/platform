import { COMMA, ENTER } from "@angular/cdk/keycodes";
import { Component, Input, ViewEncapsulation } from "@angular/core";
import { SmartFormWidgetDirection, SmartFormWidgetType, } from "../../smartform.model";
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/form-field";
import * as i2 from "@angular/material/icon";
import * as i3 from "@angular/material/chips";
import * as i4 from "@angular/material/checkbox";
import * as i5 from "@angular/material/radio";
import * as i6 from "@angular/material/datepicker";
import * as i7 from "@angular/material/select";
import * as i8 from "@angular/material/core";
import * as i9 from "@angular/forms";
import * as i10 from "@angular/common";
import * as i11 from "@angular/material/input";
export class SmartformwidgetComponent {
    constructor() {
        this.smartFormWidgetType = SmartFormWidgetType;
        this.addOnBlur = true;
        this.separatorKeysCodes = [ENTER, COMMA];
    }
    add(event) {
        const value = (event.value || "").trim();
        if (value) {
            if ((this.widgetInstance.maxValues &&
                this.widgetInstance.valueList.length < this.widgetInstance.maxValues) ||
                !this.widgetInstance.maxValues) {
                this.widgetInstance.valueList.push({
                    key: value,
                    label: value,
                    type: SmartFormWidgetType.ITEM,
                    value: value,
                    callback: this.widgetInstance.callback,
                });
            }
        }
        // Clear the input value
        event.chipInput.clear();
    }
    remove(value) {
        const index = this.widgetInstance.valueList.indexOf(value);
        if (index >= 0) {
            this.widgetInstance.valueList.splice(index, 1);
        }
    }
    getDirection() {
        if (this.widgetInstance.direction === undefined) {
            return "";
        }
        else if (this.widgetInstance.direction === SmartFormWidgetDirection.COL) {
            return "direction-col";
        }
        else {
            return "direction-row";
        }
    }
}
SmartformwidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartformwidgetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SmartformwidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: SmartformwidgetComponent, selector: "smartformwidget", inputs: { form: "form", widgetInstance: "widgetInstance" }, ngImport: i0, template: "<div class=\"container\" [formGroup]=\"form\">\r\n  <div [ngSwitch]=\"widgetInstance.type\" class=\"container\">\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input textField\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <input\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [type]=\"'string'\"\r\n          [value]=\"widgetInstance.value\"\r\n          placeholder=\"{{ widgetInstance.placeholder }}\"\r\n          matInput\r\n        />\r\n        <mat-icon *ngIf=\"widgetInstance.icon\" matSuffix>\r\n          {{ widgetInstance.icon }}\r\n        </mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD_CHIPS\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-chip-list #chipList aria-label=\"{{ widgetInstance.label }}\">\r\n          <mat-chip\r\n            *ngFor=\"let value of widgetInstance.valueList\"\r\n            (removed)=\"remove(value)\"\r\n          >\r\n            {{ value.label }}\r\n            <button matChipRemove>\r\n              <mat-icon>cancel</mat-icon>\r\n            </button>\r\n          </mat-chip>\r\n          <input\r\n            placeholder=\"{{ widgetInstance.placeholder }}\"\r\n            [matChipInputFor]=\"chipList\"\r\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n            [matChipInputAddOnBlur]=\"addOnBlur\"\r\n            (matChipInputTokenEnd)=\"add($event)\"\r\n          />\r\n        </mat-chip-list>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_BOX\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <textarea\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [type]=\"'string'\"\r\n          [value]=\"widgetInstance.value\"\r\n          placeholder=\"{{ widgetInstance.value }}\"\r\n          matInput\r\n        ></textarea>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.CHECK_BOX\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <div\r\n        class=\"input checkbox\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <section class=\"checkbox-section\" [ngClass]=\"getDirection()\">\r\n          <mat-checkbox\r\n            *ngFor=\"let checkbox of widgetInstance.valueList\"\r\n            class=\"selecatbleObject\"\r\n            formControlName=\"{{ widgetInstance.key }}\"\r\n          >\r\n            {{ checkbox.label }}\r\n          </mat-checkbox>\r\n        </section>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.RADIO_BUTTON\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-radio-group\r\n        class=\"input radio-section\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        aria-label=\"{{ widgetInstance.label }}\"\r\n        appearance=\"outline\"\r\n        formControlName=\"{{ widgetInstance.key }}\"\r\n      >\r\n        <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <div [ngClass]=\"getDirection()\">\r\n          <mat-radio-button\r\n            class=\"selecatbleObject\"\r\n            *ngFor=\"let radio of widgetInstance.valueList\"\r\n            value=\"{{ radio.value }}\"\r\n            [ngClass]=\"getDirection()\"\r\n          >\r\n            {{ radio.label }}\r\n          </mat-radio-button>\r\n        </div>\r\n      </mat-radio-group>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.DATE_PICKER\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n        <mat-datepicker #picker></mat-datepicker>\r\n        <input\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [value]=\"widgetInstance.value\"\r\n          placeholder=\"{{ widgetInstance.value }}\"\r\n          matInput\r\n          [matDatepicker]=\"picker\"\r\n        />\r\n        <mat-hint>MM/DD/YYYY</mat-hint>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.SELECT\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-select [formControlName]=\"widgetInstance.key\">\r\n          <mat-option\r\n            *ngFor=\"let option of widgetInstance.valueList\"\r\n            [value]=\"option.key\"\r\n            >{{ option.value }}</mat-option\r\n          >\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.SELECT_MULTIPLE\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <div\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-select [formControlName]=\"widgetInstance.key\" multiple>\r\n          <mat-option\r\n            *ngFor=\"let option of widgetInstance.valueList\"\r\n            [value]=\"option.key\"\r\n            >{{ option.value }}</mat-option\r\n          >\r\n        </mat-select>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".checkbox-section,.radio-section{display:flex;flex-direction:column}.input{width:100%}.direction-col{display:flex;flex-direction:column}.direction-row{display:flex;flex-direction:row}.selecatbleObject{margin:.5em}.radioLabel{color:var(--primary-color);text-align:left!important}.container{height:100%}.input{height:100%;display:flex;flex-direction:column}.checkbox{flex-direction:column-reverse}.mat-form-field-wrapper{padding-bottom:0!important}.input .mat-standard-chip.mat-chip-with-trailing-icon{padding-right:12px}\n"], components: [{ type: i1.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i3.MatChipList, selector: "mat-chip-list", inputs: ["errorStateMatcher", "multiple", "compareWith", "value", "required", "placeholder", "disabled", "aria-orientation", "selectable", "tabIndex"], outputs: ["change", "valueChange"], exportAs: ["matChipList"] }, { type: i4.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "aria-describedby", "id", "required", "labelPosition", "name", "value", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i5.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i6.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["for", "tabIndex", "aria-label", "disabled", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { type: i6.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { type: i7.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i8.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i9.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i9.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i10.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i1.MatLabel, selector: "mat-label" }, { type: i11.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i9.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.MatSuffix, selector: "[matSuffix]" }, { type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["color", "disableRipple", "tabIndex", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"], exportAs: ["matChip"] }, { type: i3.MatChipRemove, selector: "[matChipRemove]" }, { type: i3.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputFor", "matChipInputAddOnBlur", "matChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i6.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { type: i1.MatHint, selector: "mat-hint", inputs: ["align", "id"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartformwidgetComponent, decorators: [{
            type: Component,
            args: [{ selector: "smartformwidget", encapsulation: ViewEncapsulation.None, template: "<div class=\"container\" [formGroup]=\"form\">\r\n  <div [ngSwitch]=\"widgetInstance.type\" class=\"container\">\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input textField\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <input\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [type]=\"'string'\"\r\n          [value]=\"widgetInstance.value\"\r\n          placeholder=\"{{ widgetInstance.placeholder }}\"\r\n          matInput\r\n        />\r\n        <mat-icon *ngIf=\"widgetInstance.icon\" matSuffix>\r\n          {{ widgetInstance.icon }}\r\n        </mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD_CHIPS\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-chip-list #chipList aria-label=\"{{ widgetInstance.label }}\">\r\n          <mat-chip\r\n            *ngFor=\"let value of widgetInstance.valueList\"\r\n            (removed)=\"remove(value)\"\r\n          >\r\n            {{ value.label }}\r\n            <button matChipRemove>\r\n              <mat-icon>cancel</mat-icon>\r\n            </button>\r\n          </mat-chip>\r\n          <input\r\n            placeholder=\"{{ widgetInstance.placeholder }}\"\r\n            [matChipInputFor]=\"chipList\"\r\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n            [matChipInputAddOnBlur]=\"addOnBlur\"\r\n            (matChipInputTokenEnd)=\"add($event)\"\r\n          />\r\n        </mat-chip-list>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.TEXT_BOX\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <textarea\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [type]=\"'string'\"\r\n          [value]=\"widgetInstance.value\"\r\n          placeholder=\"{{ widgetInstance.value }}\"\r\n          matInput\r\n        ></textarea>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.CHECK_BOX\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <div\r\n        class=\"input checkbox\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <section class=\"checkbox-section\" [ngClass]=\"getDirection()\">\r\n          <mat-checkbox\r\n            *ngFor=\"let checkbox of widgetInstance.valueList\"\r\n            class=\"selecatbleObject\"\r\n            formControlName=\"{{ widgetInstance.key }}\"\r\n          >\r\n            {{ checkbox.label }}\r\n          </mat-checkbox>\r\n        </section>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.RADIO_BUTTON\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-radio-group\r\n        class=\"input radio-section\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        aria-label=\"{{ widgetInstance.label }}\"\r\n        appearance=\"outline\"\r\n        formControlName=\"{{ widgetInstance.key }}\"\r\n      >\r\n        <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <div [ngClass]=\"getDirection()\">\r\n          <mat-radio-button\r\n            class=\"selecatbleObject\"\r\n            *ngFor=\"let radio of widgetInstance.valueList\"\r\n            value=\"{{ radio.value }}\"\r\n            [ngClass]=\"getDirection()\"\r\n          >\r\n            {{ radio.label }}\r\n          </mat-radio-button>\r\n        </div>\r\n      </mat-radio-group>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.DATE_PICKER\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n        <mat-datepicker #picker></mat-datepicker>\r\n        <input\r\n          [formControlName]=\"widgetInstance.key\"\r\n          [id]=\"widgetInstance.key\"\r\n          [value]=\"widgetInstance.value\"\r\n          placeholder=\"{{ widgetInstance.value }}\"\r\n          matInput\r\n          [matDatepicker]=\"picker\"\r\n        />\r\n        <mat-hint>MM/DD/YYYY</mat-hint>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.SELECT\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <mat-form-field\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-select [formControlName]=\"widgetInstance.key\">\r\n          <mat-option\r\n            *ngFor=\"let option of widgetInstance.valueList\"\r\n            [value]=\"option.key\"\r\n            >{{ option.value }}</mat-option\r\n          >\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"smartFormWidgetType.SELECT_MULTIPLE\">\r\n      <div *ngIf=\"widgetInstance.showLabel\">\r\n        <h2>{{ widgetInstance.label }}</h2>\r\n      </div>\r\n      <div\r\n        class=\"input\"\r\n        [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\r\n        appearance=\"outline\"\r\n      >\r\n        <mat-label *ngIf=\"!widgetInstance.showLabel\">\r\n          {{ widgetInstance.label }}\r\n        </mat-label>\r\n        <mat-select [formControlName]=\"widgetInstance.key\" multiple>\r\n          <mat-option\r\n            *ngFor=\"let option of widgetInstance.valueList\"\r\n            [value]=\"option.key\"\r\n            >{{ option.value }}</mat-option\r\n          >\r\n        </mat-select>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".checkbox-section,.radio-section{display:flex;flex-direction:column}.input{width:100%}.direction-col{display:flex;flex-direction:column}.direction-row{display:flex;flex-direction:row}.selecatbleObject{margin:.5em}.radioLabel{color:var(--primary-color);text-align:left!important}.container{height:100%}.input{height:100%;display:flex;flex-direction:column}.checkbox{flex-direction:column-reverse}.mat-form-field-wrapper{padding-bottom:0!important}.input .mat-standard-chip.mat-chip-with-trailing-icon{padding-right:12px}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { form: [{
                type: Input
            }], widgetInstance: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,