import { COMMA, ENTER } from "@angular/cdk/keycodes";
import { Component, Input, ViewEncapsulation } from "@angular/core";
import { SmartFormWidgetDirection, SmartFormWidgetType, } from "../../smartform.model";
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/form-field";
import * as i2 from "@angular/material/icon";
import * as i3 from "@angular/material/chips";
import * as i4 from "@angular/material/checkbox";
import * as i5 from "@angular/material/radio";
import * as i6 from "@angular/material/datepicker";
import * as i7 from "@angular/material/select";
import * as i8 from "@angular/material/core";
import * as i9 from "@angular/forms";
import * as i10 from "@angular/common";
import * as i11 from "@angular/material/input";
export class SmartformwidgetComponent {
    constructor() {
        this.smartFormWidgetType = SmartFormWidgetType;
        this.addOnBlur = true;
        this.separatorKeysCodes = [ENTER, COMMA];
    }
    add(event) {
        const value = (event.value || "").trim();
        if (value) {
            if ((this.widgetInstance.maxValues &&
                this.widgetInstance.valueList.length < this.widgetInstance.maxValues) ||
                !this.widgetInstance.maxValues) {
                this.widgetInstance.valueList.push({
                    key: value,
                    label: value,
                    type: SmartFormWidgetType.ITEM,
                    value: value,
                    callback: this.widgetInstance.callback,
                });
            }
        }
        // Clear the input value
        event.chipInput.clear();
    }
    remove(value) {
        const index = this.widgetInstance.valueList.indexOf(value);
        if (index >= 0) {
            this.widgetInstance.valueList.splice(index, 1);
        }
    }
    getDirection() {
        if (this.widgetInstance.direction === undefined) {
            return "";
        }
        else if (this.widgetInstance.direction === SmartFormWidgetDirection.COL) {
            return "direction-col";
        }
        else {
            return "direction-row";
        }
    }
}
SmartformwidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartformwidgetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SmartformwidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: SmartformwidgetComponent, selector: "smartformwidget", inputs: { form: "form", widgetInstance: "widgetInstance" }, ngImport: i0, template: "<div class=\"container\" [formGroup]=\"form\">\n    <div [ngSwitch]=\"widgetInstance.type\" class=\"container\">\n        <div *ngSwitchCase=\"smartFormWidgetType.CONTAINER\" [ngClass]=\"getDirection()\">\n            <smartformwidget\n                *ngFor=\"let widget of widgetInstance.valueList\"\n                [form]=\"form\"\n                [widgetInstance]=\"widget\"\n            ></smartformwidget>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input textField\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <input\n                    [formControlName]=\"widgetInstance.key\"\n                    [id]=\"widgetInstance.key\"\n                    [type]=\"'string'\"\n                    [value]=\"widgetInstance.value\"\n                    placeholder=\"{{ widgetInstance.placeholder }}\"\n                    matInput\n                />\n                <mat-icon *ngIf=\"widgetInstance.icon\" matSuffix>\n                    {{ widgetInstance.icon }}\n                </mat-icon>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD_CHIPS\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-chip-list #chipList aria-label=\"{{ widgetInstance.label }}\">\n                    <mat-chip\n                        *ngFor=\"let value of widgetInstance.valueList\"\n                        (removed)=\"remove(value)\"\n                    >\n                        {{ value.label }}\n                        <button matChipRemove>\n                            <mat-icon>cancel</mat-icon>\n                        </button>\n                    </mat-chip>\n                    <input\n                        placeholder=\"{{ widgetInstance.placeholder }}\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                        [matChipInputAddOnBlur]=\"addOnBlur\"\n                        (matChipInputTokenEnd)=\"add($event)\"\n                    />\n                </mat-chip-list>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.TEXT_BOX\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <textarea\n                    [formControlName]=\"widgetInstance.key\"\n                    [id]=\"widgetInstance.key\"\n                    [type]=\"'string'\"\n                    [value]=\"widgetInstance.value\"\n                    placeholder=\"{{ widgetInstance.value }}\"\n                    matInput\n                ></textarea>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.CHECK_BOX\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <div\n                class=\"input checkbox\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <section class=\"checkbox-section\" [ngClass]=\"getDirection()\">\n                    <mat-checkbox\n                        *ngFor=\"let checkbox of widgetInstance.valueList\"\n                        class=\"selecatbleObject\"\n                        formControlName=\"{{ widgetInstance.key }}\"\n                    >\n                        {{ checkbox.label }}\n                    </mat-checkbox>\n                </section>\n            </div>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.RADIO_BUTTON\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-radio-group\n                class=\"input radio-section\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                aria-label=\"{{ widgetInstance.label }}\"\n                appearance=\"outline\"\n                formControlName=\"{{ widgetInstance.key }}\"\n            >\n                <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <div [ngClass]=\"getDirection()\">\n                    <mat-radio-button\n                        class=\"selecatbleObject\"\n                        *ngFor=\"let radio of widgetInstance.valueList\"\n                        value=\"{{ radio.value }}\"\n                        [ngClass]=\"getDirection()\"\n                    >\n                        {{ radio.label }}\n                    </mat-radio-button>\n                </div>\n            </mat-radio-group>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.DATE_PICKER\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                <mat-datepicker #picker></mat-datepicker>\n                <input\n                    [formControlName]=\"widgetInstance.key\"\n                    [id]=\"widgetInstance.key\"\n                    [value]=\"widgetInstance.value\"\n                    placeholder=\"{{ widgetInstance.value }}\"\n                    matInput\n                    [matDatepicker]=\"picker\"\n                />\n                <mat-hint>MM/DD/YYYY</mat-hint>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.SELECT\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-select [formControlName]=\"widgetInstance.key\">\n                    <mat-option\n                        *ngFor=\"let option of widgetInstance.valueList\"\n                        [value]=\"option.key\"\n                        >{{ option.value }}</mat-option\n                    >\n                </mat-select>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.SELECT_MULTIPLE\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <div\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-select [formControlName]=\"widgetInstance.key\" multiple>\n                    <mat-option\n                        *ngFor=\"let option of widgetInstance.valueList\"\n                        [value]=\"option.key\"\n                        >{{ option.value }}</mat-option\n                    >\n                </mat-select>\n            </div>\n        </div>\n    </div>\n</div>\n", styles: [".checkbox-section,.radio-section{display:flex;flex-direction:column}.input{width:100%}.direction-col{display:flex;flex-direction:column}.direction-row{display:flex;flex-direction:row}.selecatbleObject{margin:.5em}.radioLabel{color:var(--primary-color);text-align:left!important}.container{height:100%}.input{height:100%;display:flex;flex-direction:column}.checkbox{flex-direction:column}.mat-form-field-wrapper{padding-bottom:0!important}.input .mat-standard-chip.mat-chip-with-trailing-icon{padding-right:12px}\n"], components: [{ type: SmartformwidgetComponent, selector: "smartformwidget", inputs: ["form", "widgetInstance"] }, { type: i1.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i3.MatChipList, selector: "mat-chip-list", inputs: ["errorStateMatcher", "multiple", "compareWith", "value", "required", "placeholder", "disabled", "aria-orientation", "selectable", "tabIndex"], outputs: ["change", "valueChange"], exportAs: ["matChipList"] }, { type: i4.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "aria-describedby", "id", "required", "labelPosition", "name", "value", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i5.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }, { type: i6.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["for", "tabIndex", "aria-label", "disabled", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { type: i6.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { type: i7.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i8.MatOption, selector: "mat-option", exportAs: ["matOption"] }], directives: [{ type: i9.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i9.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i10.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i1.MatLabel, selector: "mat-label" }, { type: i11.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i9.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.MatSuffix, selector: "[matSuffix]" }, { type: i3.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["color", "disableRipple", "tabIndex", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"], exportAs: ["matChip"] }, { type: i3.MatChipRemove, selector: "[matChipRemove]" }, { type: i3.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputFor", "matChipInputAddOnBlur", "matChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { type: i5.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { type: i6.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { type: i1.MatHint, selector: "mat-hint", inputs: ["align", "id"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartformwidgetComponent, decorators: [{
            type: Component,
            args: [{ selector: "smartformwidget", encapsulation: ViewEncapsulation.None, template: "<div class=\"container\" [formGroup]=\"form\">\n    <div [ngSwitch]=\"widgetInstance.type\" class=\"container\">\n        <div *ngSwitchCase=\"smartFormWidgetType.CONTAINER\" [ngClass]=\"getDirection()\">\n            <smartformwidget\n                *ngFor=\"let widget of widgetInstance.valueList\"\n                [form]=\"form\"\n                [widgetInstance]=\"widget\"\n            ></smartformwidget>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input textField\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <input\n                    [formControlName]=\"widgetInstance.key\"\n                    [id]=\"widgetInstance.key\"\n                    [type]=\"'string'\"\n                    [value]=\"widgetInstance.value\"\n                    placeholder=\"{{ widgetInstance.placeholder }}\"\n                    matInput\n                />\n                <mat-icon *ngIf=\"widgetInstance.icon\" matSuffix>\n                    {{ widgetInstance.icon }}\n                </mat-icon>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD_CHIPS\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-chip-list #chipList aria-label=\"{{ widgetInstance.label }}\">\n                    <mat-chip\n                        *ngFor=\"let value of widgetInstance.valueList\"\n                        (removed)=\"remove(value)\"\n                    >\n                        {{ value.label }}\n                        <button matChipRemove>\n                            <mat-icon>cancel</mat-icon>\n                        </button>\n                    </mat-chip>\n                    <input\n                        placeholder=\"{{ widgetInstance.placeholder }}\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                        [matChipInputAddOnBlur]=\"addOnBlur\"\n                        (matChipInputTokenEnd)=\"add($event)\"\n                    />\n                </mat-chip-list>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.TEXT_BOX\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <textarea\n                    [formControlName]=\"widgetInstance.key\"\n                    [id]=\"widgetInstance.key\"\n                    [type]=\"'string'\"\n                    [value]=\"widgetInstance.value\"\n                    placeholder=\"{{ widgetInstance.value }}\"\n                    matInput\n                ></textarea>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.CHECK_BOX\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <div\n                class=\"input checkbox\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <section class=\"checkbox-section\" [ngClass]=\"getDirection()\">\n                    <mat-checkbox\n                        *ngFor=\"let checkbox of widgetInstance.valueList\"\n                        class=\"selecatbleObject\"\n                        formControlName=\"{{ widgetInstance.key }}\"\n                    >\n                        {{ checkbox.label }}\n                    </mat-checkbox>\n                </section>\n            </div>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.RADIO_BUTTON\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-radio-group\n                class=\"input radio-section\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                aria-label=\"{{ widgetInstance.label }}\"\n                appearance=\"outline\"\n                formControlName=\"{{ widgetInstance.key }}\"\n            >\n                <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <div [ngClass]=\"getDirection()\">\n                    <mat-radio-button\n                        class=\"selecatbleObject\"\n                        *ngFor=\"let radio of widgetInstance.valueList\"\n                        value=\"{{ radio.value }}\"\n                        [ngClass]=\"getDirection()\"\n                    >\n                        {{ radio.label }}\n                    </mat-radio-button>\n                </div>\n            </mat-radio-group>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.DATE_PICKER\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                <mat-datepicker #picker></mat-datepicker>\n                <input\n                    [formControlName]=\"widgetInstance.key\"\n                    [id]=\"widgetInstance.key\"\n                    [value]=\"widgetInstance.value\"\n                    placeholder=\"{{ widgetInstance.value }}\"\n                    matInput\n                    [matDatepicker]=\"picker\"\n                />\n                <mat-hint>MM/DD/YYYY</mat-hint>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.SELECT\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-select [formControlName]=\"widgetInstance.key\">\n                    <mat-option\n                        *ngFor=\"let option of widgetInstance.valueList\"\n                        [value]=\"option.key\"\n                        >{{ option.value }}</mat-option\n                    >\n                </mat-select>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.SELECT_MULTIPLE\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <div\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-select [formControlName]=\"widgetInstance.key\" multiple>\n                    <mat-option\n                        *ngFor=\"let option of widgetInstance.valueList\"\n                        [value]=\"option.key\"\n                        >{{ option.value }}</mat-option\n                    >\n                </mat-select>\n            </div>\n        </div>\n    </div>\n</div>\n", styles: [".checkbox-section,.radio-section{display:flex;flex-direction:column}.input{width:100%}.direction-col{display:flex;flex-direction:column}.direction-row{display:flex;flex-direction:row}.selecatbleObject{margin:.5em}.radioLabel{color:var(--primary-color);text-align:left!important}.container{height:100%}.input{height:100%;display:flex;flex-direction:column}.checkbox{flex-direction:column}.mat-form-field-wrapper{padding-bottom:0!important}.input .mat-standard-chip.mat-chip-with-trailing-icon{padding-right:12px}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { form: [{
                type: Input
            }], widgetInstance: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,