{"version":3,"file":"smartbit4all-form.mjs","sources":["../../../projects/smartform/src/lib/smartform.model.ts","../../../projects/smartform/src/lib/services/smartform.service.ts","../../../projects/smartform/src/lib/widgets/smartformwidget/smartformwidget.component.ts","../../../projects/smartform/src/lib/widgets/smartformwidget/smartformwidget.component.html","../../../projects/smartform/src/lib/smartform.component.ts","../../../projects/smartform/src/lib/smartform.component.html","../../../projects/smartform/src/lib/smartfileuploader/smartfileuploader.component.ts","../../../projects/smartform/src/lib/smartfileuploader/smartfileuploader.component.html","../../../projects/smartform/src/lib/smartform.module.ts","../../../projects/smartform/src/public-api.ts","../../../projects/smartform/src/smartbit4all-form.ts"],"sourcesContent":["/**\n * This enum containes the available types of the form widgets.\n *\n * @author Roland Fényes\n */\nexport enum SmartFormWidgetType {\n    TEXT_FIELD,\n    TEXT_FIELD_CHIPS,\n    TEXT_BOX,\n    SELECT,\n    SELECT_MULTIPLE,\n    CHECK_BOX,\n    CHECK_BOX_TABLE,\n    RADIO_BUTTON,\n    DATE_PICKER,\n    FILE_UPLOAD,\n    ITEM,\n    CONTAINER,\n}\n\nexport enum SmartFormWidgetDirection {\n    COL,\n    ROW,\n}\n\nexport enum SmartFormWidgetWidth {\n    SMALL = 150,\n    MEDIUM = 250,\n    LARGE = 350,\n    EXTRA_LARGE = 450,\n}\n\n/**\n * This interface describes a widget in a form.\n *\n * @param key Must be unique\n * @param label The label of the widget\n * @param value Default value\n * @param type The type of the form widget\n * @param callback Action callback\n * @param valueList Use this if you want to define selectable values\n * @param isRequired\n * @param icon Please use Angular Material icons\n *\n * @author Roland Fényes\n */\nexport interface SmartFormWidget<T> {\n    key: string;\n    label: string;\n    showLabel?: boolean;\n    value: T;\n    type: SmartFormWidgetType;\n    callback?: (args: any[]) => any;\n    placeholder?: string;\n    minValues?: number;\n    maxValues?: number;\n    direction?: SmartFormWidgetDirection;\n    valueList?: SmartFormWidget<T>[];\n    isRequired?: boolean;\n    icon?: string;\n    minWidth?: SmartFormWidgetWidth;\n    isDisabled?: boolean;\n}\n\n/**\n * Dynamic forms can be easily defined with this interface.\n *\n * @param name The name of the form\n * @param widgets The widgets presented in the form\n *\n * @author Roland Fényes\n */\nexport interface SmartForm {\n    name: string;\n    direction: SmartFormWidgetDirection;\n    widgets: SmartFormWidget<any>[];\n}\n","import { Injectable } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { SmartForm, SmartFormWidget, SmartFormWidgetType } from \"../smartform.model\";\n\n@Injectable()\nexport class SmartFormService {\n    group: any = {};\n\n    toFormGroup(smartForm: SmartForm): FormGroup {\n        this.createFormControls(smartForm.widgets);\n\n        return new FormGroup(this.group);\n    }\n\n    createFormControls(widgets: SmartFormWidget<any>[]) {\n        widgets.forEach((widget) => {\n            let formControl = new FormControl(\n                widget.value || \"\",\n                widget.isRequired ? Validators.required : undefined\n            );\n\n            if (widget.isDisabled) {\n                formControl.disable();\n            }\n\n            this.group[widget.key] = formControl;\n            if (widget.type === SmartFormWidgetType.CONTAINER && widget.valueList?.length) {\n                this.createFormControls(widget.valueList);\n            }\n        });\n    }\n}\n","import { COMMA, ENTER } from \"@angular/cdk/keycodes\";\nimport { Component, Input, ViewEncapsulation } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { MatChipInputEvent } from \"@angular/material/chips\";\nimport {\n    SmartFormWidget,\n    SmartFormWidgetDirection,\n    SmartFormWidgetType,\n} from \"../../smartform.model\";\n\n@Component({\n    selector: \"smartformwidget\",\n    templateUrl: \"./smartformwidget.component.html\",\n    styleUrls: [\"./smartformwidget.component.css\"],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class SmartformwidgetComponent {\n    @Input() form!: FormGroup;\n    @Input() widgetInstance!: SmartFormWidget<any>;\n\n    smartFormWidgetType = SmartFormWidgetType;\n\n    constructor() {}\n\n    addOnBlur = true;\n    readonly separatorKeysCodes = [ENTER, COMMA] as const;\n\n    add(event: MatChipInputEvent): void {\n        const value = (event.value || \"\").trim();\n\n        if (value) {\n            if (\n                (this.widgetInstance.maxValues &&\n                    this.widgetInstance.valueList!.length < this.widgetInstance.maxValues) ||\n                !this.widgetInstance.maxValues\n            ) {\n                this.widgetInstance.valueList!.push({\n                    key: value,\n                    label: value,\n                    type: SmartFormWidgetType.ITEM,\n                    value: value,\n                    callback: this.widgetInstance.callback,\n                });\n            }\n        }\n\n        // Clear the input value\n        event.chipInput!.clear();\n    }\n\n    remove(value: SmartFormWidget<any>): void {\n        const index = this.widgetInstance.valueList!.indexOf(value);\n\n        if (index >= 0) {\n            this.widgetInstance.valueList!.splice(index, 1);\n        }\n    }\n\n    getDirection(): string {\n        if (this.widgetInstance.direction === undefined) {\n            return \"\";\n        } else if (this.widgetInstance.direction === SmartFormWidgetDirection.COL) {\n            return \"direction-col\";\n        } else {\n            return \"direction-row\";\n        }\n    }\n}\n","<div class=\"container\" [formGroup]=\"form\">\n    <div [ngSwitch]=\"widgetInstance.type\" class=\"container\">\n        <div *ngSwitchCase=\"smartFormWidgetType.CONTAINER\" [ngClass]=\"getDirection()\">\n            <smartformwidget\n                *ngFor=\"let widget of widgetInstance.valueList\"\n                [form]=\"form\"\n                [widgetInstance]=\"widget\"\n            ></smartformwidget>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input textField\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <input\n                    [formControlName]=\"widgetInstance.key\"\n                    [id]=\"widgetInstance.key\"\n                    [type]=\"'string'\"\n                    [value]=\"widgetInstance.value\"\n                    placeholder=\"{{ widgetInstance.placeholder }}\"\n                    matInput\n                />\n                <mat-icon *ngIf=\"widgetInstance.icon\" matSuffix>\n                    {{ widgetInstance.icon }}\n                </mat-icon>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.TEXT_FIELD_CHIPS\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-chip-list #chipList aria-label=\"{{ widgetInstance.label }}\">\n                    <mat-chip\n                        *ngFor=\"let value of widgetInstance.valueList\"\n                        (removed)=\"remove(value)\"\n                    >\n                        {{ value.label }}\n                        <button matChipRemove>\n                            <mat-icon>cancel</mat-icon>\n                        </button>\n                    </mat-chip>\n                    <input\n                        placeholder=\"{{ widgetInstance.placeholder }}\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                        [matChipInputAddOnBlur]=\"addOnBlur\"\n                        (matChipInputTokenEnd)=\"add($event)\"\n                    />\n                </mat-chip-list>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.TEXT_BOX\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <textarea\n                    [formControlName]=\"widgetInstance.key\"\n                    [id]=\"widgetInstance.key\"\n                    [type]=\"'string'\"\n                    [value]=\"widgetInstance.value\"\n                    placeholder=\"{{ widgetInstance.value }}\"\n                    matInput\n                ></textarea>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.CHECK_BOX\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <div\n                class=\"input checkbox\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <section class=\"checkbox-section\" [ngClass]=\"getDirection()\">\n                    <mat-checkbox\n                        *ngFor=\"let checkbox of widgetInstance.valueList\"\n                        class=\"selecatbleObject\"\n                        formControlName=\"{{ widgetInstance.key }}\"\n                    >\n                        {{ checkbox.label }}\n                    </mat-checkbox>\n                </section>\n            </div>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.RADIO_BUTTON\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-radio-group\n                class=\"input radio-section\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                aria-label=\"{{ widgetInstance.label }}\"\n                appearance=\"outline\"\n                formControlName=\"{{ widgetInstance.key }}\"\n            >\n                <mat-label class=\"radioLabel\" *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <div [ngClass]=\"getDirection()\">\n                    <mat-radio-button\n                        class=\"selecatbleObject\"\n                        *ngFor=\"let radio of widgetInstance.valueList\"\n                        value=\"{{ radio.value }}\"\n                        [ngClass]=\"getDirection()\"\n                    >\n                        {{ radio.label }}\n                    </mat-radio-button>\n                </div>\n            </mat-radio-group>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.DATE_PICKER\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                <mat-datepicker #picker></mat-datepicker>\n                <input\n                    [formControlName]=\"widgetInstance.key\"\n                    [id]=\"widgetInstance.key\"\n                    [value]=\"widgetInstance.value\"\n                    placeholder=\"{{ widgetInstance.value }}\"\n                    matInput\n                    [matDatepicker]=\"picker\"\n                />\n                <mat-hint>MM/DD/YYYY</mat-hint>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.SELECT\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <mat-form-field\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-select [formControlName]=\"widgetInstance.key\">\n                    <mat-option\n                        *ngFor=\"let option of widgetInstance.valueList\"\n                        [value]=\"option.key\"\n                        >{{ option.value }}</mat-option\n                    >\n                </mat-select>\n            </mat-form-field>\n        </div>\n\n        <div *ngSwitchCase=\"smartFormWidgetType.SELECT_MULTIPLE\">\n            <div *ngIf=\"widgetInstance.showLabel\">\n                <h2>{{ widgetInstance.label }}</h2>\n            </div>\n            <div\n                class=\"input\"\n                [ngStyle]=\"{ width: widgetInstance.minWidth + 'px' }\"\n                appearance=\"outline\"\n            >\n                <mat-label *ngIf=\"!widgetInstance.showLabel\">\n                    {{ widgetInstance.label }}\n                </mat-label>\n                <mat-select [formControlName]=\"widgetInstance.key\" multiple>\n                    <mat-option\n                        *ngFor=\"let option of widgetInstance.valueList\"\n                        [value]=\"option.key\"\n                        >{{ option.value }}</mat-option\n                    >\n                </mat-select>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { SmartFormService } from './services/smartform.service';\nimport { SmartForm, SmartFormWidgetDirection } from './smartform.model';\n\n@Component({\n\tselector: 'smartform',\n\ttemplateUrl: './smartform.component.html',\n\tstyleUrls: ['./smartform.component.css'],\n\tproviders: [SmartFormService]\n})\nexport class SmartformComponent implements OnInit {\n\t@Input() smartForm!: SmartForm;\n\tform!: FormGroup;\n\n\tdirection = SmartFormWidgetDirection;\n\n\tconstructor(private service: SmartFormService) {}\n\n\tngOnInit(): void {\n\t\tthis.form = this.service.toFormGroup(this.smartForm);\n\t}\n\n\tgetForm(): FormGroup {\n\t\treturn this.form;\n\t}\n}\n","<form [formGroup]=\"form\" class=\"flex form\">\n    <h2>\n        {{ smartForm.name }}\n    </h2>\n    <div [ngClass]=\"smartForm.direction === direction.ROW ? 'row' : 'col'\">\n        <smartformwidget\n            *ngFor=\"let widget of smartForm.widgets\"\n            [widgetInstance]=\"widget\"\n            [form]=\"form\"\n            class=\"grid-item\"\n        ></smartformwidget>\n    </div>\n</form>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { SmartFileUploaderI18n } from './smartfileuploader.model';\n\n@Component({\n\tselector: 'smartfileuploader',\n\ttemplateUrl: './smartfileuploader.component.html',\n\tstyleUrls: ['./smartfileuploader.component.css']\n})\nexport class SmartfileuploaderComponent implements OnInit {\n\tfiles: any[] = [];\n\t@Input() uploadCallback!: (files: any[]) => void;\n\t@Input() fileFormats: string[] = [];\n\t@Input() i18n!: SmartFileUploaderI18n;\n\n\tconstructor() {\n\t\tthis.i18n = {\n\t\t\taddFile: 'dokumentum hozzáadása',\n\t\t\tbrowseOrDrag: 'tallózás vagy behúzás',\n\t\t\tmaxSize: 'max. 25 MB',\n\t\t\tformats: 'PDF, docx, xls formátum'\n\t\t};\n\t}\n\n\tngOnInit(): void {\n\t\tconsole.log(this.fileFormats);\n\t}\n\n\tgetFile(event: any): void {\n\t\tif (event.target.files && event.target.files.length) {\n\t\t\tthis.files = [...this.files, ...event.target.files];\n\t\t}\n\t}\n\n\tremove(index: number): void {\n\t\tthis.files.splice(index, 1);\n\t}\n\n\tuploadFile(): void {\n\t\tthis.uploadCallback(this.files);\n\t}\n}\n","<div class=\"container\">\n    <div class=\"fileContainer\">\n        <div class=\"fileInnerContainer\">\n            <input\n                id=\"addFile\"\n                placeholder=\"fileInput\"\n                type=\"file\"\n                (change)=\"getFile($event)\"\n                class=\"file\"\n                accept=\"{{ fileFormats.join(', ') }}\"\n                multiple\n            />\n            <div class=\"fileUploadContentContainer\">\n                <mat-label class=\"addFileButton\">\n                    <mat-icon color=\"primary\" class=\"addCircle\">add_circle</mat-icon>\n                </mat-label>\n                <mat-label class=\"label primary\"> {{ i18n.addFile }} </mat-label>\n                <mat-label class=\"label secondary\"> {{ i18n.browseOrDrag }} </mat-label>\n                <mat-label class=\"subLabel primary\"> {{ i18n.maxSize }} </mat-label>\n                <mat-label class=\"subLabel primary\"> {{ i18n.formats }} </mat-label>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"files.length\" class=\"uploadedFilesContainer\">\n        <div *ngFor=\"let file of files; let i = index\" class=\"uploadedFile\">\n            <mat-label class=\"fileNameLabel\"> {{ file.name }} </mat-label>\n            <button mat-icon-button (click)=\"remove(i)\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </div>\n        <button class=\"uploadButton\" mat-raised-button color=\"primary\" (click)=\"uploadFile()\">\n            Feltöltés\n        </button>\n    </div>\n</div>\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from \"@angular/core\";\nimport { SmartformComponent } from \"./smartform.component\";\nimport { MatChipsModule } from \"@angular/material/chips\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatNativeDateModule } from \"@angular/material/core\";\nimport { MatRadioModule } from \"@angular/material/radio\";\n\nimport { SmartformwidgetComponent } from \"./widgets/smartformwidget/smartformwidget.component\";\nimport { SmartfileuploaderComponent } from \"./smartfileuploader/smartfileuploader.component\";\nimport { MatCommonModule } from \"@angular/material/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { SmartFormService } from \"./services/smartform.service\";\n\n@NgModule({\n    declarations: [SmartformComponent, SmartformwidgetComponent, SmartfileuploaderComponent],\n    imports: [\n        BrowserModule,\n        MatCommonModule,\n        MatChipsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatSelectModule,\n        MatButtonModule,\n        MatInputModule,\n        MatIconModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatRadioModule,\n    ],\n    exports: [SmartformComponent, SmartformwidgetComponent, SmartfileuploaderComponent],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\n    providers: [SmartFormService],\n})\nexport class SmartformModule {}\n","/*\n * Public API Surface of smartform\n */\n\nexport * from \"./lib/smartform.component\";\nexport * from \"./lib/widgets/smartformwidget/smartformwidget.component\";\nexport * from \"./lib/smartfileuploader/smartfileuploader.component\";\nexport * from \"./lib/smartfileuploader/smartfileuploader.model\";\nexport * from \"./lib/smartform.module\";\nexport * from \"./lib/smartform.model\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.SmartFormService","i2.SmartformwidgetComponent","i3","i4","i1","i2"],"mappings":"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"}