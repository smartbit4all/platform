import { Component, Input } from "@angular/core";
import { ToolbarButtonStyle, ToolbarDirection } from "./smart-toolbar.model";
import * as i0 from "@angular/core";
import * as i1 from "./smart-toolbar.service";
import * as i2 from "@angular/material/button";
import * as i3 from "@angular/material/icon";
import * as i4 from "@angular/common";
export class SmartToolbarComponent {
    constructor(service) {
        this.service = service;
        this.toolbarDirection = ToolbarDirection;
        this.ToolbarButtonStyle = ToolbarButtonStyle;
    }
    ngOnInit() { }
    executeCommand(button) {
        this.service.executeCommand(button);
    }
}
SmartToolbarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartToolbarComponent, deps: [{ token: i1.SmartToolbarService }], target: i0.ɵɵFactoryTarget.Component });
SmartToolbarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: SmartToolbarComponent, selector: "smart-toolbar", inputs: { toolbar: "toolbar" }, ngImport: i0, template: "<div\n  class=\"button-container\"\n  [ngClass]=\"toolbar.direction === toolbarDirection.ROW ? 'row' : 'col'\"\n>\n  <div *ngFor=\"let button of toolbar.buttons\">\n    <button\n      *ngIf=\"button.btnStyle === ToolbarButtonStyle.MAT_RAISED_BUTTON\"\n      mat-raised-button\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n    <button\n      *ngIf=\"button.btnStyle === ToolbarButtonStyle.MAT_BUTTON\"\n      mat-button\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n  </div>\n</div>\n", styles: [".button-container{background-color:transparent}.col{display:flex;flex-direction:column;padding:1em}.row{display:flex;flex-wrap:row;padding:1em}.button-container button{margin:1em}\n"], components: [{ type: i2.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i3.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: "smart-toolbar", template: "<div\n  class=\"button-container\"\n  [ngClass]=\"toolbar.direction === toolbarDirection.ROW ? 'row' : 'col'\"\n>\n  <div *ngFor=\"let button of toolbar.buttons\">\n    <button\n      *ngIf=\"button.btnStyle === ToolbarButtonStyle.MAT_RAISED_BUTTON\"\n      mat-raised-button\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n    <button\n      *ngIf=\"button.btnStyle === ToolbarButtonStyle.MAT_BUTTON\"\n      mat-button\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n  </div>\n</div>\n", styles: [".button-container{background-color:transparent}.col{display:flex;flex-direction:column;padding:1em}.row{display:flex;flex-wrap:row;padding:1em}.button-container button{margin:1em}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.SmartToolbarService }]; }, propDecorators: { toolbar: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnQtdG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zbWFydC10b29sYmFyL3NyYy9saWIvc21hcnQtdG9vbGJhci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zbWFydC10b29sYmFyL3NyYy9saWIvc21hcnQtdG9vbGJhci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULEtBQUssRUFFUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQW9DLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztBQVEvRyxNQUFNLE9BQU8scUJBQXFCO0lBSzlCLFlBQW9CLE9BQTRCO1FBQTVCLFlBQU8sR0FBUCxPQUFPLENBQXFCO1FBSGhELHFCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBQ3BDLHVCQUFrQixHQUFHLGtCQUFrQixDQUFDO0lBRVksQ0FBQztJQUVyRCxRQUFRLEtBQVcsQ0FBQztJQUVwQixjQUFjLENBQUMsTUFBMEI7UUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7a0hBWFEscUJBQXFCO3NHQUFyQixxQkFBcUIscUZDYmxDLDZvQkFxQkE7MkZEUmEscUJBQXFCO2tCQUxqQyxTQUFTOytCQUNJLGVBQWU7MEdBS2hCLE9BQU87c0JBQWYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBJbnB1dCxcclxuICAgIE9uSW5pdFxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFNtYXJ0VG9vbGJhciwgU21hcnRUb29sYmFyQnV0dG9uLCBUb29sYmFyQnV0dG9uU3R5bGUsIFRvb2xiYXJEaXJlY3Rpb24gfSBmcm9tIFwiLi9zbWFydC10b29sYmFyLm1vZGVsXCI7XHJcbmltcG9ydCB7IFNtYXJ0VG9vbGJhclNlcnZpY2UgfSBmcm9tIFwiLi9zbWFydC10b29sYmFyLnNlcnZpY2VcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwic21hcnQtdG9vbGJhclwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9zbWFydC10b29sYmFyLmNvbXBvbmVudC5odG1sXCIsXHJcbiAgICBzdHlsZVVybHM6IFtcIi4vc21hcnQtdG9vbGJhci5jb21wb25lbnQuY3NzXCJdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU21hcnRUb29sYmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBJbnB1dCgpIHRvb2xiYXIhOiBTbWFydFRvb2xiYXI7XHJcbiAgICB0b29sYmFyRGlyZWN0aW9uID0gVG9vbGJhckRpcmVjdGlvbjtcclxuICAgIFRvb2xiYXJCdXR0b25TdHlsZSA9IFRvb2xiYXJCdXR0b25TdHlsZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlcnZpY2U6IFNtYXJ0VG9vbGJhclNlcnZpY2UpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQgeyB9XHJcblxyXG4gICAgZXhlY3V0ZUNvbW1hbmQoYnV0dG9uOiBTbWFydFRvb2xiYXJCdXR0b24pIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2UuZXhlY3V0ZUNvbW1hbmQoYnV0dG9uKTtcclxuICAgIH1cclxufVxyXG4iLCI8ZGl2XG4gIGNsYXNzPVwiYnV0dG9uLWNvbnRhaW5lclwiXG4gIFtuZ0NsYXNzXT1cInRvb2xiYXIuZGlyZWN0aW9uID09PSB0b29sYmFyRGlyZWN0aW9uLlJPVyA/ICdyb3cnIDogJ2NvbCdcIlxuPlxuICA8ZGl2ICpuZ0Zvcj1cImxldCBidXR0b24gb2YgdG9vbGJhci5idXR0b25zXCI+XG4gICAgPGJ1dHRvblxuICAgICAgKm5nSWY9XCJidXR0b24uYnRuU3R5bGUgPT09IFRvb2xiYXJCdXR0b25TdHlsZS5NQVRfUkFJU0VEX0JVVFRPTlwiXG4gICAgICBtYXQtcmFpc2VkLWJ1dHRvblxuICAgICAgKGNsaWNrKT1cImV4ZWN1dGVDb21tYW5kKGJ1dHRvbilcIlxuICAgID5cbiAgICAgIHt7IGJ1dHRvbi5sYWJlbCB9fSA8bWF0LWljb24+e3sgYnV0dG9uLmljb24gfX08L21hdC1pY29uPlxuICAgIDwvYnV0dG9uPlxuICAgIDxidXR0b25cbiAgICAgICpuZ0lmPVwiYnV0dG9uLmJ0blN0eWxlID09PSBUb29sYmFyQnV0dG9uU3R5bGUuTUFUX0JVVFRPTlwiXG4gICAgICBtYXQtYnV0dG9uXG4gICAgICAoY2xpY2spPVwiZXhlY3V0ZUNvbW1hbmQoYnV0dG9uKVwiXG4gICAgPlxuICAgICAge3sgYnV0dG9uLmxhYmVsIH19IDxtYXQtaWNvbj57eyBidXR0b24uaWNvbiB9fTwvbWF0LWljb24+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXX0=