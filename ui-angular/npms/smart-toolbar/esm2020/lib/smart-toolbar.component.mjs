import { Component, Input } from "@angular/core";
import { ToolbarButtonStyle, ToolbarDirection } from "./smart-toolbar.model";
import * as i0 from "@angular/core";
import * as i1 from "./smart-toolbar.service";
import * as i2 from "@angular/material/button";
import * as i3 from "@angular/material/icon";
import * as i4 from "@angular/common";
export class SmartToolbarComponent {
    constructor(service) {
        this.service = service;
        this.toolbarDirection = ToolbarDirection;
        this.ToolbarButtonStyle = ToolbarButtonStyle;
    }
    ngOnInit() { }
    executeCommand(button) {
        this.service.executeCommand(button);
    }
}
SmartToolbarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartToolbarComponent, deps: [{ token: i1.SmartToolbarService }], target: i0.ɵɵFactoryTarget.Component });
SmartToolbarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: SmartToolbarComponent, selector: "smart-toolbar", inputs: { toolbar: "toolbar" }, ngImport: i0, template: "<div\n  class=\"button-container\"\n  [ngClass]=\"toolbar.direction === toolbarDirection.ROW ? 'row' : 'col'\"\n>\n  <div *ngFor=\"let button of toolbar.buttons\">\n    <!-- MAT RAISED BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_RAISED_BUTTON\"\n      mat-raised-button\n      [ngClass]=\"{ 'btn-round': button.rounded }\"\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n    <!-- MAT BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_BUTTON\"\n      mat-button\n      [ngClass]=\"{ 'btn-round': button.rounded }\"\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT STROKED BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_STROKED_BUTTON\"\n      mat-stroked-button\n      [ngClass]=\"{ 'btn-round': button.rounded }\"\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT FLAT BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_FLAT_BUTTON\"\n      mat-flat-button\n      [ngClass]=\"{ 'btn-round': button.rounded }\"\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT ICON BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_ICON_BUTTON\"\n      mat-icon-button\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT FAB -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_FAB\"\n      mat-fab\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT MINI FAB -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_MINI_FAB\"\n      mat-mini-fab\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n  </div>\n</div>\n", styles: [".button-container{background-color:transparent}.col{display:flex;flex-direction:column;padding:1em}.row{display:flex;flex-wrap:row;padding:1em}.button-container button{margin:1em}.btn-round{border-radius:25px}\n"], components: [{ type: i2.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i3.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SmartToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: "smart-toolbar", template: "<div\n  class=\"button-container\"\n  [ngClass]=\"toolbar.direction === toolbarDirection.ROW ? 'row' : 'col'\"\n>\n  <div *ngFor=\"let button of toolbar.buttons\">\n    <!-- MAT RAISED BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_RAISED_BUTTON\"\n      mat-raised-button\n      [ngClass]=\"{ 'btn-round': button.rounded }\"\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n    <!-- MAT BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_BUTTON\"\n      mat-button\n      [ngClass]=\"{ 'btn-round': button.rounded }\"\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT STROKED BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_STROKED_BUTTON\"\n      mat-stroked-button\n      [ngClass]=\"{ 'btn-round': button.rounded }\"\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT FLAT BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_FLAT_BUTTON\"\n      mat-flat-button\n      [ngClass]=\"{ 'btn-round': button.rounded }\"\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      {{ button.label }} <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT ICON BUTTON -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_ICON_BUTTON\"\n      mat-icon-button\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT FAB -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_FAB\"\n      mat-fab\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n\n    <!-- MAT MINI FAB -->\n    <button\n      *ngIf=\"button.style === ToolbarButtonStyle.MAT_MINI_FAB\"\n      mat-mini-fab\n      color=\"{{ button.color }}\"\n      [disabled]=\"button.disabled\"\n      (click)=\"executeCommand(button)\"\n    >\n      <mat-icon>{{ button.icon }}</mat-icon>\n    </button>\n  </div>\n</div>\n", styles: [".button-container{background-color:transparent}.col{display:flex;flex-direction:column;padding:1em}.row{display:flex;flex-wrap:row;padding:1em}.button-container button{margin:1em}.btn-round{border-radius:25px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.SmartToolbarService }]; }, propDecorators: { toolbar: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnQtdG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zbWFydC10b29sYmFyL3NyYy9saWIvc21hcnQtdG9vbGJhci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zbWFydC10b29sYmFyL3NyYy9saWIvc21hcnQtdG9vbGJhci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULEtBQUssRUFFUixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQW9DLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztBQVEvRyxNQUFNLE9BQU8scUJBQXFCO0lBSzlCLFlBQW9CLE9BQTRCO1FBQTVCLFlBQU8sR0FBUCxPQUFPLENBQXFCO1FBSGhELHFCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBQ3BDLHVCQUFrQixHQUFHLGtCQUFrQixDQUFDO0lBRVksQ0FBQztJQUVyRCxRQUFRLEtBQVcsQ0FBQztJQUVwQixjQUFjLENBQUMsTUFBMEI7UUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7a0hBWFEscUJBQXFCO3NHQUFyQixxQkFBcUIscUZDYmxDLDJuRkFzRkE7MkZEekVhLHFCQUFxQjtrQkFMakMsU0FBUzsrQkFDSSxlQUFlOzBHQUtoQixPQUFPO3NCQUFmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBJbnB1dCxcbiAgICBPbkluaXRcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFNtYXJ0VG9vbGJhciwgU21hcnRUb29sYmFyQnV0dG9uLCBUb29sYmFyQnV0dG9uU3R5bGUsIFRvb2xiYXJEaXJlY3Rpb24gfSBmcm9tIFwiLi9zbWFydC10b29sYmFyLm1vZGVsXCI7XG5pbXBvcnQgeyBTbWFydFRvb2xiYXJTZXJ2aWNlIH0gZnJvbSBcIi4vc21hcnQtdG9vbGJhci5zZXJ2aWNlXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcInNtYXJ0LXRvb2xiYXJcIixcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3NtYXJ0LXRvb2xiYXIuY29tcG9uZW50Lmh0bWxcIixcbiAgICBzdHlsZVVybHM6IFtcIi4vc21hcnQtdG9vbGJhci5jb21wb25lbnQuY3NzXCJdLFxufSlcbmV4cG9ydCBjbGFzcyBTbWFydFRvb2xiYXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpIHRvb2xiYXIhOiBTbWFydFRvb2xiYXI7XG4gICAgdG9vbGJhckRpcmVjdGlvbiA9IFRvb2xiYXJEaXJlY3Rpb247XG4gICAgVG9vbGJhckJ1dHRvblN0eWxlID0gVG9vbGJhckJ1dHRvblN0eWxlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBTbWFydFRvb2xiYXJTZXJ2aWNlKSB7IH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQgeyB9XG5cbiAgICBleGVjdXRlQ29tbWFuZChidXR0b246IFNtYXJ0VG9vbGJhckJ1dHRvbikge1xuICAgICAgICB0aGlzLnNlcnZpY2UuZXhlY3V0ZUNvbW1hbmQoYnV0dG9uKTtcbiAgICB9XG59XG4iLCI8ZGl2XG4gIGNsYXNzPVwiYnV0dG9uLWNvbnRhaW5lclwiXG4gIFtuZ0NsYXNzXT1cInRvb2xiYXIuZGlyZWN0aW9uID09PSB0b29sYmFyRGlyZWN0aW9uLlJPVyA/ICdyb3cnIDogJ2NvbCdcIlxuPlxuICA8ZGl2ICpuZ0Zvcj1cImxldCBidXR0b24gb2YgdG9vbGJhci5idXR0b25zXCI+XG4gICAgPCEtLSBNQVQgUkFJU0VEIEJVVFRPTiAtLT5cbiAgICA8YnV0dG9uXG4gICAgICAqbmdJZj1cImJ1dHRvbi5zdHlsZSA9PT0gVG9vbGJhckJ1dHRvblN0eWxlLk1BVF9SQUlTRURfQlVUVE9OXCJcbiAgICAgIG1hdC1yYWlzZWQtYnV0dG9uXG4gICAgICBbbmdDbGFzc109XCJ7ICdidG4tcm91bmQnOiBidXR0b24ucm91bmRlZCB9XCJcbiAgICAgIGNvbG9yPVwie3sgYnV0dG9uLmNvbG9yIH19XCJcbiAgICAgIFtkaXNhYmxlZF09XCJidXR0b24uZGlzYWJsZWRcIlxuICAgICAgKGNsaWNrKT1cImV4ZWN1dGVDb21tYW5kKGJ1dHRvbilcIlxuICAgID5cbiAgICAgIHt7IGJ1dHRvbi5sYWJlbCB9fSA8bWF0LWljb24+e3sgYnV0dG9uLmljb24gfX08L21hdC1pY29uPlxuICAgIDwvYnV0dG9uPlxuICAgIDwhLS0gTUFUIEJVVFRPTiAtLT5cbiAgICA8YnV0dG9uXG4gICAgICAqbmdJZj1cImJ1dHRvbi5zdHlsZSA9PT0gVG9vbGJhckJ1dHRvblN0eWxlLk1BVF9CVVRUT05cIlxuICAgICAgbWF0LWJ1dHRvblxuICAgICAgW25nQ2xhc3NdPVwieyAnYnRuLXJvdW5kJzogYnV0dG9uLnJvdW5kZWQgfVwiXG4gICAgICBjb2xvcj1cInt7IGJ1dHRvbi5jb2xvciB9fVwiXG4gICAgICBbZGlzYWJsZWRdPVwiYnV0dG9uLmRpc2FibGVkXCJcbiAgICAgIChjbGljayk9XCJleGVjdXRlQ29tbWFuZChidXR0b24pXCJcbiAgICA+XG4gICAgICB7eyBidXR0b24ubGFiZWwgfX0gPG1hdC1pY29uPnt7IGJ1dHRvbi5pY29uIH19PC9tYXQtaWNvbj5cbiAgICA8L2J1dHRvbj5cblxuICAgIDwhLS0gTUFUIFNUUk9LRUQgQlVUVE9OIC0tPlxuICAgIDxidXR0b25cbiAgICAgICpuZ0lmPVwiYnV0dG9uLnN0eWxlID09PSBUb29sYmFyQnV0dG9uU3R5bGUuTUFUX1NUUk9LRURfQlVUVE9OXCJcbiAgICAgIG1hdC1zdHJva2VkLWJ1dHRvblxuICAgICAgW25nQ2xhc3NdPVwieyAnYnRuLXJvdW5kJzogYnV0dG9uLnJvdW5kZWQgfVwiXG4gICAgICBjb2xvcj1cInt7IGJ1dHRvbi5jb2xvciB9fVwiXG4gICAgICBbZGlzYWJsZWRdPVwiYnV0dG9uLmRpc2FibGVkXCJcbiAgICAgIChjbGljayk9XCJleGVjdXRlQ29tbWFuZChidXR0b24pXCJcbiAgICA+XG4gICAgICB7eyBidXR0b24ubGFiZWwgfX0gPG1hdC1pY29uPnt7IGJ1dHRvbi5pY29uIH19PC9tYXQtaWNvbj5cbiAgICA8L2J1dHRvbj5cblxuICAgIDwhLS0gTUFUIEZMQVQgQlVUVE9OIC0tPlxuICAgIDxidXR0b25cbiAgICAgICpuZ0lmPVwiYnV0dG9uLnN0eWxlID09PSBUb29sYmFyQnV0dG9uU3R5bGUuTUFUX0ZMQVRfQlVUVE9OXCJcbiAgICAgIG1hdC1mbGF0LWJ1dHRvblxuICAgICAgW25nQ2xhc3NdPVwieyAnYnRuLXJvdW5kJzogYnV0dG9uLnJvdW5kZWQgfVwiXG4gICAgICBjb2xvcj1cInt7IGJ1dHRvbi5jb2xvciB9fVwiXG4gICAgICBbZGlzYWJsZWRdPVwiYnV0dG9uLmRpc2FibGVkXCJcbiAgICAgIChjbGljayk9XCJleGVjdXRlQ29tbWFuZChidXR0b24pXCJcbiAgICA+XG4gICAgICB7eyBidXR0b24ubGFiZWwgfX0gPG1hdC1pY29uPnt7IGJ1dHRvbi5pY29uIH19PC9tYXQtaWNvbj5cbiAgICA8L2J1dHRvbj5cblxuICAgIDwhLS0gTUFUIElDT04gQlVUVE9OIC0tPlxuICAgIDxidXR0b25cbiAgICAgICpuZ0lmPVwiYnV0dG9uLnN0eWxlID09PSBUb29sYmFyQnV0dG9uU3R5bGUuTUFUX0lDT05fQlVUVE9OXCJcbiAgICAgIG1hdC1pY29uLWJ1dHRvblxuICAgICAgY29sb3I9XCJ7eyBidXR0b24uY29sb3IgfX1cIlxuICAgICAgW2Rpc2FibGVkXT1cImJ1dHRvbi5kaXNhYmxlZFwiXG4gICAgICAoY2xpY2spPVwiZXhlY3V0ZUNvbW1hbmQoYnV0dG9uKVwiXG4gICAgPlxuICAgICAgPG1hdC1pY29uPnt7IGJ1dHRvbi5pY29uIH19PC9tYXQtaWNvbj5cbiAgICA8L2J1dHRvbj5cblxuICAgIDwhLS0gTUFUIEZBQiAtLT5cbiAgICA8YnV0dG9uXG4gICAgICAqbmdJZj1cImJ1dHRvbi5zdHlsZSA9PT0gVG9vbGJhckJ1dHRvblN0eWxlLk1BVF9GQUJcIlxuICAgICAgbWF0LWZhYlxuICAgICAgY29sb3I9XCJ7eyBidXR0b24uY29sb3IgfX1cIlxuICAgICAgW2Rpc2FibGVkXT1cImJ1dHRvbi5kaXNhYmxlZFwiXG4gICAgICAoY2xpY2spPVwiZXhlY3V0ZUNvbW1hbmQoYnV0dG9uKVwiXG4gICAgPlxuICAgICAgPG1hdC1pY29uPnt7IGJ1dHRvbi5pY29uIH19PC9tYXQtaWNvbj5cbiAgICA8L2J1dHRvbj5cblxuICAgIDwhLS0gTUFUIE1JTkkgRkFCIC0tPlxuICAgIDxidXR0b25cbiAgICAgICpuZ0lmPVwiYnV0dG9uLnN0eWxlID09PSBUb29sYmFyQnV0dG9uU3R5bGUuTUFUX01JTklfRkFCXCJcbiAgICAgIG1hdC1taW5pLWZhYlxuICAgICAgY29sb3I9XCJ7eyBidXR0b24uY29sb3IgfX1cIlxuICAgICAgW2Rpc2FibGVkXT1cImJ1dHRvbi5kaXNhYmxlZFwiXG4gICAgICAoY2xpY2spPVwiZXhlY3V0ZUNvbW1hbmQoYnV0dG9uKVwiXG4gICAgPlxuICAgICAgPG1hdC1pY29uPnt7IGJ1dHRvbi5pY29uIH19PC9tYXQtaWNvbj5cbiAgICA8L2J1dHRvbj5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==