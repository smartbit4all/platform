{"version":3,"file":"smartbit4all-component-factory-service.mjs","sources":["../../../projects/component-factory-service/src/lib/component-factory-service.service.ts","../../../projects/component-factory-service/src/lib/component-factory-service.module.ts","../../../projects/component-factory-service/src/projects.ts","../../../projects/component-factory-service/src/smartbit4all-component-factory-service.ts"],"sourcesContent":["import { ComponentFactory, ComponentFactoryResolver, ComponentRef, Injectable, ViewContainerRef } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentFactoryService {\n\n  factory?: ComponentFactory<any>;\n\n  constructor(private resolver: ComponentFactoryResolver) { }\n\n  createComponent(vcRef: ViewContainerRef, componentType: any, inputs?: Map<string, any>): ComponentRef<any> {\n    this.setComponentFactory(componentType);\n    const componentRef = vcRef.createComponent(this.factory!);\n    if (inputs) this.setComponentInputParameters(componentRef, inputs);\n    componentRef.changeDetectorRef.detectChanges();\n    return componentRef;\n  }\n\n  destroyComponent(componentRef: ComponentRef<any>) {\n    componentRef.destroy();\n  }\n\n  private setComponentFactory(componentType: any) {\n    this.factory = this.resolver.resolveComponentFactory(componentType);\n  }\n\n  private setComponentInputParameters(ref: ComponentRef<any>, inputs: Map<string, any>) {\n    for (let [key, value] of inputs)\n      if (value) ref.instance[key] = value\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ComponentFactoryService } from './component-factory-service.service';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [ComponentFactoryService]\n})\nexport class ComponentFactoryServiceModule { }\n","/*\n * Public API Surface of component-factory-service\n */\n\nexport * from './lib/component-factory-service.service';\nexport * from './lib/component-factory-service.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './projects';\n"],"names":[],"mappings":";;;MAKa,uBAAuB,CAAA;AAIlC,IAAA,WAAA,CAAoB,QAAkC,EAAA;AAAlC,QAAA,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAA0B;KAAK;AAE3D,IAAA,eAAe,CAAC,KAAuB,EAAE,aAAkB,EAAE,MAAyB,EAAA;AACpF,QAAA,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,OAAQ,CAAC,CAAC;AAC1D,QAAA,IAAI,MAAM;AAAE,YAAA,IAAI,CAAC,2BAA2B,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;AACnE,QAAA,YAAY,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;AAC/C,QAAA,OAAO,YAAY,CAAC;KACrB;AAED,IAAA,gBAAgB,CAAC,YAA+B,EAAA;QAC9C,YAAY,CAAC,OAAO,EAAE,CAAC;KACxB;AAEO,IAAA,mBAAmB,CAAC,aAAkB,EAAA;QAC5C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;KACrE;IAEO,2BAA2B,CAAC,GAAsB,EAAE,MAAwB,EAAA;AAClF,QAAA,KAAK,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM;AAC7B,YAAA,IAAI,KAAK;AAAE,gBAAA,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAA;KACvC;;oHAzBU,uBAAuB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,wBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAvB,uBAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,uBAAuB,cAFtB,MAAM,EAAA,CAAA,CAAA;2FAEP,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBAHnC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;iBACnB,CAAA;;;MCIY,6BAA6B,CAAA;;0HAA7B,6BAA6B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;2HAA7B,6BAA6B,EAAA,CAAA,CAAA;AAA7B,6BAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,6BAA6B,EAF7B,SAAA,EAAA,CAAC,uBAAuB,CAAC,YAD3B,EAAE,CAAA,EAAA,CAAA,CAAA;2FAGA,6BAA6B,EAAA,UAAA,EAAA,CAAA;kBALzC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,YAAY,EAAE,EAAE;AAChB,oBAAA,OAAO,EAAE,EAAE;oBACX,SAAS,EAAE,CAAC,uBAAuB,CAAC;iBACrC,CAAA;;;ACPD;;AAEG;;ACFH;;AAEG;;;;"}