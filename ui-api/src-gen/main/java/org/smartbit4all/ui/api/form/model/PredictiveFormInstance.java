/*
 * Form API
 * API for the predictive filling of forms, where a tree structure contains which pieces of data follow other pieces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.ui.api.form.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.ui.api.form.model.PredictiveInputGraphDescriptor;
import org.smartbit4all.ui.api.form.model.PredictiveInputGraphNode;
import org.smartbit4all.ui.api.form.model.WidgetDescriptor;
import org.smartbit4all.ui.api.form.model.WidgetInstance;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * An instantiated layout of an EntityFormDescription that uses a predictive data graph as a layout definition. This instance is the current state of the layouting.
 */
@ApiModel(description = "An instantiated layout of an EntityFormDescription that uses a predictive data graph as a layout definition. This instance is the current state of the layouting.")
@JsonPropertyOrder({
  PredictiveFormInstance.URI,
  PredictiveFormInstance.AVAILABLE_WIDGETS,
  PredictiveFormInstance.VISIBLE_WIDGETS,
  PredictiveFormInstance.GRAPH,
  PredictiveFormInstance.ACTIVE_NODE
})
@JsonTypeName("PredictiveFormInstance")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PredictiveFormInstance {
  public static final String URI = "uri";
  private URI uri;

  public static final String AVAILABLE_WIDGETS = "availableWidgets";
  private List<WidgetDescriptor> availableWidgets = null;

  public static final String VISIBLE_WIDGETS = "visibleWidgets";
  private List<WidgetInstance> visibleWidgets = new ArrayList<>();

  public static final String GRAPH = "graph";
  private PredictiveInputGraphDescriptor graph;

  public static final String ACTIVE_NODE = "activeNode";
  private PredictiveInputGraphNode activeNode;


  public PredictiveFormInstance uri(URI uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * The URI of this exact instance.
   * @return uri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The URI of this exact instance.")
  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUri(URI uri) {
    this.uri = uri;
  }


  public PredictiveFormInstance availableWidgets(List<WidgetDescriptor> availableWidgets) {
    
    this.availableWidgets = availableWidgets;
    return this;
  }

  public PredictiveFormInstance addAvailableWidgetsItem(WidgetDescriptor availableWidgetsItem) {
    if (this.availableWidgets == null) {
      this.availableWidgets = new ArrayList<>();
    }
    this.availableWidgets.add(availableWidgetsItem);
    return this;
  }

   /**
   * The array that contains the widgets that are currently available for selection.
   * @return availableWidgets
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The array that contains the widgets that are currently available for selection.")
  @JsonProperty(AVAILABLE_WIDGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<WidgetDescriptor> getAvailableWidgets() {
    return availableWidgets;
  }


  @JsonProperty(AVAILABLE_WIDGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableWidgets(List<WidgetDescriptor> availableWidgets) {
    this.availableWidgets = availableWidgets;
  }


  public PredictiveFormInstance visibleWidgets(List<WidgetInstance> visibleWidgets) {
    
    this.visibleWidgets = visibleWidgets;
    return this;
  }

  public PredictiveFormInstance addVisibleWidgetsItem(WidgetInstance visibleWidgetsItem) {
    this.visibleWidgets.add(visibleWidgetsItem);
    return this;
  }

   /**
   * The array that contains the widgets that are currently visible, as already filled data.
   * @return visibleWidgets
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The array that contains the widgets that are currently visible, as already filled data.")
  @JsonProperty(VISIBLE_WIDGETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<WidgetInstance> getVisibleWidgets() {
    return visibleWidgets;
  }


  @JsonProperty(VISIBLE_WIDGETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVisibleWidgets(List<WidgetInstance> visibleWidgets) {
    this.visibleWidgets = visibleWidgets;
  }


  public PredictiveFormInstance graph(PredictiveInputGraphDescriptor graph) {
    
    this.graph = graph;
    return this;
  }

   /**
   * Get graph
   * @return graph
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(GRAPH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PredictiveInputGraphDescriptor getGraph() {
    return graph;
  }


  @JsonProperty(GRAPH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraph(PredictiveInputGraphDescriptor graph) {
    this.graph = graph;
  }


  public PredictiveFormInstance activeNode(PredictiveInputGraphNode activeNode) {
    
    this.activeNode = activeNode;
    return this;
  }

   /**
   * Get activeNode
   * @return activeNode
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(ACTIVE_NODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PredictiveInputGraphNode getActiveNode() {
    return activeNode;
  }


  @JsonProperty(ACTIVE_NODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActiveNode(PredictiveInputGraphNode activeNode) {
    this.activeNode = activeNode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictiveFormInstance predictiveFormInstance = (PredictiveFormInstance) o;
    return Objects.equals(this.uri, predictiveFormInstance.uri) &&
        Objects.equals(this.availableWidgets, predictiveFormInstance.availableWidgets) &&
        Objects.equals(this.visibleWidgets, predictiveFormInstance.visibleWidgets) &&
        Objects.equals(this.graph, predictiveFormInstance.graph) &&
        Objects.equals(this.activeNode, predictiveFormInstance.activeNode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, availableWidgets, visibleWidgets, graph, activeNode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictiveFormInstance {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    availableWidgets: ").append(toIndentedString(availableWidgets)).append("\n");
    sb.append("    visibleWidgets: ").append(toIndentedString(visibleWidgets)).append("\n");
    sb.append("    graph: ").append(toIndentedString(graph)).append("\n");
    sb.append("    activeNode: ").append(toIndentedString(activeNode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

