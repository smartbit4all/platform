/*
 * Filter API
 * Filter API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.ui.api.filter.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.ui.api.filter.model.FilterGroupModel;
import org.smartbit4all.ui.api.filter.model.FilterGroupSelectorModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * DynamicFilterModel
 */
@JsonPropertyOrder({
  DynamicFilterModel.FILTER_CONFIG_MODE,
  DynamicFilterModel.SELECTORS,
  DynamicFilterModel.ROOT
})
@JsonTypeName("DynamicFilterModel")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DynamicFilterModel {
  public static final String FILTER_CONFIG_MODE = "filterConfigMode";
  private org.smartbit4all.api.filter.bean.FilterConfigMode filterConfigMode = null;

  public static final String SELECTORS = "selectors";
  private List<FilterGroupSelectorModel> selectors = new ArrayList<>();

  public static final String ROOT = "root";
  private FilterGroupModel root;


  public DynamicFilterModel filterConfigMode(org.smartbit4all.api.filter.bean.FilterConfigMode filterConfigMode) {
    
    this.filterConfigMode = filterConfigMode;
    return this;
  }

   /**
   * Get filterConfigMode
   * @return filterConfigMode
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(FILTER_CONFIG_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public org.smartbit4all.api.filter.bean.FilterConfigMode getFilterConfigMode() {
    return filterConfigMode;
  }


  @JsonProperty(FILTER_CONFIG_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterConfigMode(org.smartbit4all.api.filter.bean.FilterConfigMode filterConfigMode) {
    this.filterConfigMode = filterConfigMode;
  }


  public DynamicFilterModel selectors(List<FilterGroupSelectorModel> selectors) {
    
    this.selectors = selectors;
    return this;
  }

  public DynamicFilterModel addSelectorsItem(FilterGroupSelectorModel selectorsItem) {
    this.selectors.add(selectorsItem);
    return this;
  }

   /**
   * Get selectors
   * @return selectors
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(SELECTORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<FilterGroupSelectorModel> getSelectors() {
    return selectors;
  }


  @JsonProperty(SELECTORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSelectors(List<FilterGroupSelectorModel> selectors) {
    this.selectors = selectors;
  }


  public DynamicFilterModel root(FilterGroupModel root) {
    
    this.root = root;
    return this;
  }

   /**
   * Get root
   * @return root
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(ROOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilterGroupModel getRoot() {
    return root;
  }


  @JsonProperty(ROOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoot(FilterGroupModel root) {
    this.root = root;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicFilterModel dynamicFilterModel = (DynamicFilterModel) o;
    return Objects.equals(this.filterConfigMode, dynamicFilterModel.filterConfigMode) &&
        Objects.equals(this.selectors, dynamicFilterModel.selectors) &&
        Objects.equals(this.root, dynamicFilterModel.root);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterConfigMode, selectors, root);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicFilterModel {\n");
    sb.append("    filterConfigMode: ").append(toIndentedString(filterConfigMode)).append("\n");
    sb.append("    selectors: ").append(toIndentedString(selectors)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

