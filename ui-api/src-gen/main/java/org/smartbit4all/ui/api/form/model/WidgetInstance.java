/*
 * Form API
 * API for the predictive filling of forms, where a tree structure contains which pieces of data follow other pieces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.ui.api.form.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * An instantiated widget on a form refering its descriptor and containing the widget instance data.
 */
@ApiModel(description = "An instantiated widget on a form refering its descriptor and containing the widget instance data.")
@JsonPropertyOrder({
  WidgetInstance.DESCRIPTOR_URI,
  WidgetInstance.STRING_VALUES,
  WidgetInstance.INT_VALUES,
  WidgetInstance.DOUBLE_VALUES,
  WidgetInstance.DATE_VALUES,
  WidgetInstance.BINARY_DATA_VALUES,
  WidgetInstance.WIDGETS
})
@JsonTypeName("WidgetInstance")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WidgetInstance {
  public static final String DESCRIPTOR_URI = "descriptorUri";
  private URI descriptorUri;

  public static final String STRING_VALUES = "stringValues";
  private List<String> stringValues = new ArrayList<>();

  public static final String INT_VALUES = "intValues";
  private List<Integer> intValues = new ArrayList<>();

  public static final String DOUBLE_VALUES = "doubleValues";
  private List<java.lang.Double> doubleValues = new ArrayList<>();

  public static final String DATE_VALUES = "dateValues";
  private List<java.time.LocalDateTime> dateValues = new ArrayList<>();

  public static final String BINARY_DATA_VALUES = "binaryDataValues";
  private List<org.smartbit4all.types.binarydata.BinaryData> binaryDataValues = new ArrayList<>();

  public static final String WIDGETS = "widgets";
  private List<WidgetInstance> widgets = null;


  public WidgetInstance descriptorUri(URI descriptorUri) {
    
    this.descriptorUri = descriptorUri;
    return this;
  }

   /**
   * The reference to the widget descriptor.
   * @return descriptorUri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The reference to the widget descriptor.")
  @JsonProperty(DESCRIPTOR_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getDescriptorUri() {
    return descriptorUri;
  }


  @JsonProperty(DESCRIPTOR_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescriptorUri(URI descriptorUri) {
    this.descriptorUri = descriptorUri;
  }


  public WidgetInstance stringValues(List<String> stringValues) {
    
    this.stringValues = stringValues;
    return this;
  }

  public WidgetInstance addStringValuesItem(String stringValuesItem) {
    this.stringValues.add(stringValuesItem);
    return this;
  }

   /**
   * Array of the string values that the widget contains.
   * @return stringValues
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "Array of the string values that the widget contains.")
  @JsonProperty(STRING_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getStringValues() {
    return stringValues;
  }


  @JsonProperty(STRING_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStringValues(List<String> stringValues) {
    this.stringValues = stringValues;
  }


  public WidgetInstance intValues(List<Integer> intValues) {
    
    this.intValues = intValues;
    return this;
  }

  public WidgetInstance addIntValuesItem(Integer intValuesItem) {
    this.intValues.add(intValuesItem);
    return this;
  }

   /**
   * Array of the integer values that the widget contains.
   * @return intValues
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "Array of the integer values that the widget contains.")
  @JsonProperty(INT_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Integer> getIntValues() {
    return intValues;
  }


  @JsonProperty(INT_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIntValues(List<Integer> intValues) {
    this.intValues = intValues;
  }


  public WidgetInstance doubleValues(List<java.lang.Double> doubleValues) {
    
    this.doubleValues = doubleValues;
    return this;
  }

  public WidgetInstance addDoubleValuesItem(java.lang.Double doubleValuesItem) {
    this.doubleValues.add(doubleValuesItem);
    return this;
  }

   /**
   * Array of the double values that the widget contains.
   * @return doubleValues
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Array of the double values that the widget contains.")
  @JsonProperty(DOUBLE_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<java.lang.Double> getDoubleValues() {
    return doubleValues;
  }


  @JsonProperty(DOUBLE_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDoubleValues(List<java.lang.Double> doubleValues) {
    this.doubleValues = doubleValues;
  }


  public WidgetInstance dateValues(List<java.time.LocalDateTime> dateValues) {
    
    this.dateValues = dateValues;
    return this;
  }

  public WidgetInstance addDateValuesItem(java.time.LocalDateTime dateValuesItem) {
    this.dateValues.add(dateValuesItem);
    return this;
  }

   /**
   * Array of the date values that the widget contains.
   * @return dateValues
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Array of the date values that the widget contains.")
  @JsonProperty(DATE_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<java.time.LocalDateTime> getDateValues() {
    return dateValues;
  }


  @JsonProperty(DATE_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDateValues(List<java.time.LocalDateTime> dateValues) {
    this.dateValues = dateValues;
  }


  public WidgetInstance binaryDataValues(List<org.smartbit4all.types.binarydata.BinaryData> binaryDataValues) {
    
    this.binaryDataValues = binaryDataValues;
    return this;
  }

  public WidgetInstance addBinaryDataValuesItem(org.smartbit4all.types.binarydata.BinaryData binaryDataValuesItem) {
    this.binaryDataValues.add(binaryDataValuesItem);
    return this;
  }

   /**
   * Array of the binary data values that the widget contains.
   * @return binaryDataValues
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Array of the binary data values that the widget contains.")
  @JsonProperty(BINARY_DATA_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<org.smartbit4all.types.binarydata.BinaryData> getBinaryDataValues() {
    return binaryDataValues;
  }


  @JsonProperty(BINARY_DATA_VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBinaryDataValues(List<org.smartbit4all.types.binarydata.BinaryData> binaryDataValues) {
    this.binaryDataValues = binaryDataValues;
  }


  public WidgetInstance widgets(List<WidgetInstance> widgets) {
    
    this.widgets = widgets;
    return this;
  }

  public WidgetInstance addWidgetsItem(WidgetInstance widgetsItem) {
    if (this.widgets == null) {
      this.widgets = new ArrayList<>();
    }
    this.widgets.add(widgetsItem);
    return this;
  }

   /**
   * Array of the contained widget instances.
   * @return widgets
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Array of the contained widget instances.")
  @JsonProperty(WIDGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<WidgetInstance> getWidgets() {
    return widgets;
  }


  @JsonProperty(WIDGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidgets(List<WidgetInstance> widgets) {
    this.widgets = widgets;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WidgetInstance widgetInstance = (WidgetInstance) o;
    return Objects.equals(this.descriptorUri, widgetInstance.descriptorUri) &&
        Objects.equals(this.stringValues, widgetInstance.stringValues) &&
        Objects.equals(this.intValues, widgetInstance.intValues) &&
        Objects.equals(this.doubleValues, widgetInstance.doubleValues) &&
        Objects.equals(this.dateValues, widgetInstance.dateValues) &&
        Objects.equals(this.binaryDataValues, widgetInstance.binaryDataValues) &&
        Objects.equals(this.widgets, widgetInstance.widgets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(descriptorUri, stringValues, intValues, doubleValues, dateValues, binaryDataValues, widgets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WidgetInstance {\n");
    sb.append("    descriptorUri: ").append(toIndentedString(descriptorUri)).append("\n");
    sb.append("    stringValues: ").append(toIndentedString(stringValues)).append("\n");
    sb.append("    intValues: ").append(toIndentedString(intValues)).append("\n");
    sb.append("    doubleValues: ").append(toIndentedString(doubleValues)).append("\n");
    sb.append("    dateValues: ").append(toIndentedString(dateValues)).append("\n");
    sb.append("    binaryDataValues: ").append(toIndentedString(binaryDataValues)).append("\n");
    sb.append("    widgets: ").append(toIndentedString(widgets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

