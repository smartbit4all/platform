/*
 * Navigation API
 * Navigation API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.ui.api.navigation.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.smartbit4all.ui.api.navigation.model.NavigationTargetState;
import org.smartbit4all.ui.api.navigation.model.NavigationTargetType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * NavigationTarget
 */
@JsonPropertyOrder({
  NavigationTarget.URI,
  NavigationTarget.VIEW_NAME,
  NavigationTarget.PARAMETERS,
  NavigationTarget.STATE,
  NavigationTarget.TYPE,
  NavigationTarget.CLOSE_AFTER_NAVIGATION
})
@JsonTypeName("NavigationTarget")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NavigationTarget {
  public static final String URI = "uri";
  private URI uri;

  public static final String VIEW_NAME = "viewName";
  private String viewName;

  public static final String PARAMETERS = "parameters";
  private Map<String, Object> parameters = new HashMap<>();

  public static final String STATE = "state";
  private NavigationTargetState state = NavigationTargetState.TO_OPEN;

  public static final String TYPE = "type";
  private NavigationTargetType type = NavigationTargetType.NORMAL;

  public static final String CLOSE_AFTER_NAVIGATION = "closeAfterNavigation";
  private Boolean closeAfterNavigation;


  public NavigationTarget uri(URI uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(URI uri) {
    this.uri = uri;
  }


  public NavigationTarget viewName(String viewName) {
    
    this.viewName = viewName;
    return this;
  }

   /**
   * Get viewName
   * @return viewName
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(VIEW_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getViewName() {
    return viewName;
  }


  @JsonProperty(VIEW_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setViewName(String viewName) {
    this.viewName = viewName;
  }


  public NavigationTarget parameters(Map<String, Object> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public NavigationTarget putParametersItem(String key, Object parametersItem) {
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(PARAMETERS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getParameters() {
    return parameters;
  }


  @JsonProperty(PARAMETERS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public void setParameters(Map<String, Object> parameters) {
    this.parameters = parameters;
  }


  public NavigationTarget state(NavigationTargetState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NavigationTargetState getState() {
    return state;
  }


  @JsonProperty(STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(NavigationTargetState state) {
    this.state = state;
  }


  public NavigationTarget type(NavigationTargetType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NavigationTargetType getType() {
    return type;
  }


  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(NavigationTargetType type) {
    this.type = type;
  }


  public NavigationTarget closeAfterNavigation(Boolean closeAfterNavigation) {
    
    this.closeAfterNavigation = closeAfterNavigation;
    return this;
  }

   /**
   * Get closeAfterNavigation
   * @return closeAfterNavigation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(CLOSE_AFTER_NAVIGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCloseAfterNavigation() {
    return closeAfterNavigation;
  }


  @JsonProperty(CLOSE_AFTER_NAVIGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCloseAfterNavigation(Boolean closeAfterNavigation) {
    this.closeAfterNavigation = closeAfterNavigation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NavigationTarget navigationTarget = (NavigationTarget) o;
    return Objects.equals(this.uri, navigationTarget.uri) &&
        Objects.equals(this.viewName, navigationTarget.viewName) &&
        Objects.equals(this.parameters, navigationTarget.parameters) &&
        Objects.equals(this.state, navigationTarget.state) &&
        Objects.equals(this.type, navigationTarget.type) &&
        Objects.equals(this.closeAfterNavigation, navigationTarget.closeAfterNavigation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, viewName, parameters, state, type, closeAfterNavigation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NavigationTarget {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    viewName: ").append(toIndentedString(viewName)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    closeAfterNavigation: ").append(toIndentedString(closeAfterNavigation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

