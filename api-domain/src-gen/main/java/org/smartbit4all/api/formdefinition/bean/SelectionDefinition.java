/*
 * Form layout definition
 * Contains form layout definition objects.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.formdefinition.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.formdefinition.bean.PropertyMapping;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The definition of an arbitrary selection.
 */
@ApiModel(description = "The definition of an arbitrary selection.")
@JsonPropertyOrder({
  SelectionDefinition.VALUE_SET_NAME,
  SelectionDefinition.TYPE,
  SelectionDefinition.DISPLAY_PROPERTY,
  SelectionDefinition.MAPPING
})
@JsonTypeName("SelectionDefinition")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SelectionDefinition {
  public static final String VALUE_SET_NAME = "valueSetName";
  private String valueSetName;

  /**
   * Defines how the selection should work: for properties or the whole selected Object. 
   */
  public enum TypeEnum {
    PROPERTY("PROPERTY"),
    
    OBJECT("OBJECT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String TYPE = "type";
  private TypeEnum type = TypeEnum.PROPERTY;

  public static final String DISPLAY_PROPERTY = "displayProperty";
  private String displayProperty;

  public static final String MAPPING = "mapping";
  private List<PropertyMapping> mapping = new ArrayList<>();

  public SelectionDefinition() { 
  }

  public SelectionDefinition valueSetName(String valueSetName) {
    
    this.valueSetName = valueSetName;
    return this;
  }

   /**
   * Name of the ValueSet used for this selection.
   * @return valueSetName
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Name of the ValueSet used for this selection.")
  @JsonProperty(VALUE_SET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValueSetName() {
    return valueSetName;
  }


  @JsonProperty(VALUE_SET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValueSetName(String valueSetName) {
    this.valueSetName = valueSetName;
  }


  public SelectionDefinition type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Defines how the selection should work: for properties or the whole selected Object. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Defines how the selection should work: for properties or the whole selected Object. ")
  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public SelectionDefinition displayProperty(String displayProperty) {
    
    this.displayProperty = displayProperty;
    return this;
  }

   /**
   * Specifies which property from ValueSetData.values as Object should be used in  selection widget. 
   * @return displayProperty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies which property from ValueSetData.values as Object should be used in  selection widget. ")
  @JsonProperty(DISPLAY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayProperty() {
    return displayProperty;
  }


  @JsonProperty(DISPLAY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayProperty(String displayProperty) {
    this.displayProperty = displayProperty;
  }


  public SelectionDefinition mapping(List<PropertyMapping> mapping) {
    
    this.mapping = mapping;
    return this;
  }

  public SelectionDefinition addMappingItem(PropertyMapping mappingItem) {
    this.mapping.add(mappingItem);
    return this;
  }

   /**
   * Mapping between data and selection model. It may be possible to omit mapping, in this case the default mapping is: data &#x3D; widget.key, selection &#x3D; valueSetData.keyProperty 
   * @return mapping
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Mapping between data and selection model. It may be possible to omit mapping, in this case the default mapping is: data = widget.key, selection = valueSetData.keyProperty ")
  @JsonProperty(MAPPING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PropertyMapping> getMapping() {
    return mapping;
  }


  @JsonProperty(MAPPING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMapping(List<PropertyMapping> mapping) {
    this.mapping = mapping;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelectionDefinition selectionDefinition = (SelectionDefinition) o;
    return Objects.equals(this.valueSetName, selectionDefinition.valueSetName) &&
        Objects.equals(this.type, selectionDefinition.type) &&
        Objects.equals(this.displayProperty, selectionDefinition.displayProperty) &&
        Objects.equals(this.mapping, selectionDefinition.mapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(valueSetName, type, displayProperty, mapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelectionDefinition {\n");
    sb.append("    valueSetName: ").append(toIndentedString(valueSetName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    displayProperty: ").append(toIndentedString(displayProperty)).append("\n");
    sb.append("    mapping: ").append(toIndentedString(mapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

