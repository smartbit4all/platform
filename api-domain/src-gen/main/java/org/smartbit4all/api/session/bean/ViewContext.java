/*
 * Session api
 * Session api...
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.session.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.smartbit4all.api.session.bean.MessageData;
import org.smartbit4all.api.session.bean.ViewData;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The same session can be valid / used in multiple UIs, this object represents a UI.
 */
@ApiModel(description = "The same session can be valid / used in multiple UIs, this object represents a UI.")
@JsonPropertyOrder({
  ViewContext.UUID,
  ViewContext.VIEWS,
  ViewContext.MESSAGES
})
@JsonTypeName("ViewContext")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ViewContext {
  public static final String UUID = "uuid";
  private UUID uuid;

  public static final String VIEWS = "views";
  private List<ViewData> views = new ArrayList<>();

  public static final String MESSAGES = "messages";
  private List<MessageData> messages = new ArrayList<>();


  public ViewContext uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getUuid() {
    return uuid;
  }


  @JsonProperty(UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public ViewContext views(List<ViewData> views) {
    
    this.views = views;
    return this;
  }

  public ViewContext addViewsItem(ViewData viewsItem) {
    this.views.add(viewsItem);
    return this;
  }

   /**
   * Get views
   * @return views
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(VIEWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ViewData> getViews() {
    return views;
  }


  @JsonProperty(VIEWS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setViews(List<ViewData> views) {
    this.views = views;
  }


  public ViewContext messages(List<MessageData> messages) {
    
    this.messages = messages;
    return this;
  }

  public ViewContext addMessagesItem(MessageData messagesItem) {
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Get messages
   * @return messages
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<MessageData> getMessages() {
    return messages;
  }


  @JsonProperty(MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessages(List<MessageData> messages) {
    this.messages = messages;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewContext viewContext = (ViewContext) o;
    return Objects.equals(this.uuid, viewContext.uuid) &&
        Objects.equals(this.views, viewContext.views) &&
        Objects.equals(this.messages, viewContext.messages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, views, messages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewContext {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

