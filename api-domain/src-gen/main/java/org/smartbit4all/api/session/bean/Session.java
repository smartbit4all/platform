/*
 * Session api
 * Session api...
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.session.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.smartbit4all.api.session.bean.AccountInfo;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Session
 */
@JsonPropertyOrder({
  Session.URI,
  Session.EXPIRATION,
  Session.LOCALE,
  Session.AUTHENTICATIONS,
  Session.USER,
  Session.PARAMETERS,
  Session.VIEW_CONTEXTS
})
@JsonTypeName("Session")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Session {
  public static final String URI = "uri";
  private URI uri;

  public static final String EXPIRATION = "expiration";
  private OffsetDateTime expiration;

  public static final String LOCALE = "locale";
  private String locale;

  public static final String AUTHENTICATIONS = "authentications";
  private List<AccountInfo> authentications = new ArrayList<>();

  public static final String USER = "user";
  private URI user;

  public static final String PARAMETERS = "parameters";
  private Map<String, String> parameters = null;

  public static final String VIEW_CONTEXTS = "viewContexts";
  private Map<String, URI> viewContexts = new HashMap<>();


  public Session uri(URI uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUri(URI uri) {
    this.uri = uri;
  }


  public Session expiration(OffsetDateTime expiration) {
    
    this.expiration = expiration;
    return this;
  }

   /**
   * Get expiration
   * @return expiration
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(EXPIRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpiration() {
    return expiration;
  }


  @JsonProperty(EXPIRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }


  public Session locale(String locale) {
    
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(LOCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocale() {
    return locale;
  }


  @JsonProperty(LOCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocale(String locale) {
    this.locale = locale;
  }


  public Session authentications(List<AccountInfo> authentications) {
    
    this.authentications = authentications;
    return this;
  }

  public Session addAuthenticationsItem(AccountInfo authenticationsItem) {
    this.authentications.add(authenticationsItem);
    return this;
  }

   /**
   * Get authentications
   * @return authentications
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(AUTHENTICATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AccountInfo> getAuthentications() {
    return authentications;
  }


  @JsonProperty(AUTHENTICATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthentications(List<AccountInfo> authentications) {
    this.authentications = authentications;
  }


  public Session user(URI user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getUser() {
    return user;
  }


  @JsonProperty(USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(URI user) {
    this.user = user;
  }


  public Session parameters(Map<String, String> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public Session putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getParameters() {
    return parameters;
  }


  @JsonProperty(PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public Session viewContexts(Map<String, URI> viewContexts) {
    
    this.viewContexts = viewContexts;
    return this;
  }

  public Session putViewContextsItem(String key, URI viewContextsItem) {
    this.viewContexts.put(key, viewContextsItem);
    return this;
  }

   /**
   * ViewContexts in this session, URIs by UUID.
   * @return viewContexts
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "ViewContexts in this session, URIs by UUID.")
  @JsonProperty(VIEW_CONTEXTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, URI> getViewContexts() {
    return viewContexts;
  }


  @JsonProperty(VIEW_CONTEXTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setViewContexts(Map<String, URI> viewContexts) {
    this.viewContexts = viewContexts;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.uri, session.uri) &&
        Objects.equals(this.expiration, session.expiration) &&
        Objects.equals(this.locale, session.locale) &&
        Objects.equals(this.authentications, session.authentications) &&
        Objects.equals(this.user, session.user) &&
        Objects.equals(this.parameters, session.parameters) &&
        Objects.equals(this.viewContexts, session.viewContexts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, expiration, locale, authentications, user, parameters, viewContexts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    authentications: ").append(toIndentedString(authentications)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    viewContexts: ").append(toIndentedString(viewContexts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

