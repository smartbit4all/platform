/*
 * apiregister api
 * The apiregister api is a generic possibility to register remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.apiregister.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * ApiInfo
 */
@JsonPropertyOrder({
  ApiInfo.INTERFACE_QUALIFIED_NAME,
  ApiInfo.API_IDENTIFIER,
  ApiInfo.PROTOCOL,
  ApiInfo.PARAMETERS
})
@JsonTypeName("ApiInfo")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApiInfo {
  public static final String INTERFACE_QUALIFIED_NAME = "interfaceQualifiedName";
  private String interfaceQualifiedName;

  public static final String API_IDENTIFIER = "apiIdentifier";
  private String apiIdentifier;

  public static final String PROTOCOL = "protocol";
  private String protocol;

  public static final String PARAMETERS = "parameters";
  private Map<String, String> parameters = null;


  public ApiInfo interfaceQualifiedName(String interfaceQualifiedName) {
    
    this.interfaceQualifiedName = interfaceQualifiedName;
    return this;
  }

   /**
   * The fully qualified name of the interface.
   * @return interfaceQualifiedName
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The fully qualified name of the interface.")
  @JsonProperty(INTERFACE_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInterfaceQualifiedName() {
    return interfaceQualifiedName;
  }


  @JsonProperty(INTERFACE_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterfaceQualifiedName(String interfaceQualifiedName) {
    this.interfaceQualifiedName = interfaceQualifiedName;
  }


  public ApiInfo apiIdentifier(String apiIdentifier) {
    
    this.apiIdentifier = apiIdentifier;
    return this;
  }

   /**
   * The unique name of the api to be registered.
   * @return apiIdentifier
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The unique name of the api to be registered.")
  @JsonProperty(API_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getApiIdentifier() {
    return apiIdentifier;
  }


  @JsonProperty(API_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApiIdentifier(String apiIdentifier) {
    this.apiIdentifier = apiIdentifier;
  }


  public ApiInfo protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * The protocol which can be used to reach the registered api.
   * @return protocol
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The protocol which can be used to reach the registered api.")
  @JsonProperty(PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProtocol() {
    return protocol;
  }


  @JsonProperty(PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public ApiInfo parameters(Map<String, String> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public ApiInfo putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getParameters() {
    return parameters;
  }


  @JsonProperty(PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiInfo apiInfo = (ApiInfo) o;
    return Objects.equals(this.interfaceQualifiedName, apiInfo.interfaceQualifiedName) &&
        Objects.equals(this.apiIdentifier, apiInfo.apiIdentifier) &&
        Objects.equals(this.protocol, apiInfo.protocol) &&
        Objects.equals(this.parameters, apiInfo.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interfaceQualifiedName, apiIdentifier, protocol, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiInfo {\n");
    sb.append("    interfaceQualifiedName: ").append(toIndentedString(interfaceQualifiedName)).append("\n");
    sb.append("    apiIdentifier: ").append(toIndentedString(apiIdentifier)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

