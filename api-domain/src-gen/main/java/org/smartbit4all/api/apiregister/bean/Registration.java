/*
 * apiregister api
 * The apiregister api is a generic possibility to register remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.apiregister.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Registration
 */
@JsonPropertyOrder({
  Registration.ID,
  Registration.SOURCE_APPLICATION,
  Registration.SOURCE_APP_ID,
  Registration.TARGET_APPLICATION,
  Registration.TARGET_APP_ID
})
@JsonTypeName("Registration")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Registration {
  public static final String ID = "id";
  private URI id;

  public static final String SOURCE_APPLICATION = "sourceApplication";
  private String sourceApplication;

  public static final String SOURCE_APP_ID = "sourceAppId";
  private URI sourceAppId;

  public static final String TARGET_APPLICATION = "targetApplication";
  private String targetApplication;

  public static final String TARGET_APP_ID = "targetAppId";
  private URI targetAppId;


  public Registration id(URI id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getId() {
    return id;
  }


  @JsonProperty(ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(URI id) {
    this.id = id;
  }


  public Registration sourceApplication(String sourceApplication) {
    
    this.sourceApplication = sourceApplication;
    return this;
  }

   /**
   * Get sourceApplication
   * @return sourceApplication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(SOURCE_APPLICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceApplication() {
    return sourceApplication;
  }


  @JsonProperty(SOURCE_APPLICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceApplication(String sourceApplication) {
    this.sourceApplication = sourceApplication;
  }


  public Registration sourceAppId(URI sourceAppId) {
    
    this.sourceAppId = sourceAppId;
    return this;
  }

   /**
   * Get sourceAppId
   * @return sourceAppId
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(SOURCE_APP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getSourceAppId() {
    return sourceAppId;
  }


  @JsonProperty(SOURCE_APP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSourceAppId(URI sourceAppId) {
    this.sourceAppId = sourceAppId;
  }


  public Registration targetApplication(String targetApplication) {
    
    this.targetApplication = targetApplication;
    return this;
  }

   /**
   * Get targetApplication
   * @return targetApplication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(TARGET_APPLICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTargetApplication() {
    return targetApplication;
  }


  @JsonProperty(TARGET_APPLICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetApplication(String targetApplication) {
    this.targetApplication = targetApplication;
  }


  public Registration targetAppId(URI targetAppId) {
    
    this.targetAppId = targetAppId;
    return this;
  }

   /**
   * Get targetAppId
   * @return targetAppId
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(TARGET_APP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getTargetAppId() {
    return targetAppId;
  }


  @JsonProperty(TARGET_APP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTargetAppId(URI targetAppId) {
    this.targetAppId = targetAppId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Registration registration = (Registration) o;
    return Objects.equals(this.id, registration.id) &&
        Objects.equals(this.sourceApplication, registration.sourceApplication) &&
        Objects.equals(this.sourceAppId, registration.sourceAppId) &&
        Objects.equals(this.targetApplication, registration.targetApplication) &&
        Objects.equals(this.targetAppId, registration.targetAppId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, sourceApplication, sourceAppId, targetApplication, targetAppId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Registration {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sourceApplication: ").append(toIndentedString(sourceApplication)).append("\n");
    sb.append("    sourceAppId: ").append(toIndentedString(sourceAppId)).append("\n");
    sb.append("    targetApplication: ").append(toIndentedString(targetApplication)).append("\n");
    sb.append("    targetAppId: ").append(toIndentedString(targetAppId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

