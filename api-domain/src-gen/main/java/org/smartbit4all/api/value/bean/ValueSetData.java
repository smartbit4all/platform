/*
 * value api
 * value api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.value.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.filterexpression.bean.FilterExpressionBuilderModel;
import org.smartbit4all.api.object.bean.PropertyDefinitionData;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The instance of the ValueSetDefintion that conatins every information inline. 
 */
@ApiModel(description = "The instance of the ValueSetDefintion that conatins every information inline. ")
@JsonPropertyOrder({
  ValueSetData.QUALIFIED_NAME,
  ValueSetData.KEY_PROPERTY,
  ValueSetData.PROPERTIES,
  ValueSetData.ICON_CODE,
  ValueSetData.UNDEFINED,
  ValueSetData.LAZY,
  ValueSetData.VALUES,
  ValueSetData.FILTER_MODEL
})
@JsonTypeName("ValueSetData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ValueSetData {
  public static final String QUALIFIED_NAME = "qualifiedName";
  private String qualifiedName;

  public static final String KEY_PROPERTY = "keyProperty";
  private String keyProperty;

  public static final String PROPERTIES = "properties";
  private List<PropertyDefinitionData> properties = new ArrayList<>();

  public static final String ICON_CODE = "iconCode";
  private String iconCode;

  public static final String UNDEFINED = "undefined";
  private Boolean undefined = true;

  public static final String LAZY = "lazy";
  private Boolean lazy = false;

  public static final String VALUES = "values";
  private List<Object> values = new ArrayList<>();

  public static final String FILTER_MODEL = "filterModel";
  private FilterExpressionBuilderModel filterModel = null;

  public ValueSetData() { 
  }

  public ValueSetData qualifiedName(String qualifiedName) {
    
    this.qualifiedName = qualifiedName;
    return this;
  }

   /**
   * Get qualifiedName
   * @return qualifiedName
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getQualifiedName() {
    return qualifiedName;
  }


  @JsonProperty(QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQualifiedName(String qualifiedName) {
    this.qualifiedName = qualifiedName;
  }


  public ValueSetData keyProperty(String keyProperty) {
    
    this.keyProperty = keyProperty;
    return this;
  }

   /**
   * The name of the key property in the value. It will be the value that copied into the reference when a given item is selected from the value set. 
   * @return keyProperty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the key property in the value. It will be the value that copied into the reference when a given item is selected from the value set. ")
  @JsonProperty(KEY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKeyProperty() {
    return keyProperty;
  }


  @JsonProperty(KEY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeyProperty(String keyProperty) {
    this.keyProperty = keyProperty;
  }


  public ValueSetData properties(List<PropertyDefinitionData> properties) {
    
    this.properties = properties;
    return this;
  }

  public ValueSetData addPropertiesItem(PropertyDefinitionData propertiesItem) {
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PropertyDefinitionData> getProperties() {
    return properties;
  }


  @JsonProperty(PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProperties(List<PropertyDefinitionData> properties) {
    this.properties = properties;
  }


  public ValueSetData iconCode(String iconCode) {
    
    this.iconCode = iconCode;
    return this;
  }

   /**
   * Optional icon code for the given value set.
   * @return iconCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional icon code for the given value set.")
  @JsonProperty(ICON_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIconCode() {
    return iconCode;
  }


  @JsonProperty(ICON_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIconCode(String iconCode) {
    this.iconCode = iconCode;
  }


  public ValueSetData undefined(Boolean undefined) {
    
    this.undefined = undefined;
    return this;
  }

   /**
   * If true then the value set is not defined and not accessible. 
   * @return undefined
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true then the value set is not defined and not accessible. ")
  @JsonProperty(UNDEFINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUndefined() {
    return undefined;
  }


  @JsonProperty(UNDEFINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUndefined(Boolean undefined) {
    this.undefined = undefined;
  }


  public ValueSetData lazy(Boolean lazy) {
    
    this.lazy = lazy;
    return this;
  }

   /**
   * If true then the values doesn&#39;t contains the the whole values set or it migth be empty and we have to ask for filtered set of values using the filter fields available. 
   * @return lazy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true then the values doesn't contains the the whole values set or it migth be empty and we have to ask for filtered set of values using the filter fields available. ")
  @JsonProperty(LAZY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLazy() {
    return lazy;
  }


  @JsonProperty(LAZY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLazy(Boolean lazy) {
    this.lazy = lazy;
  }


  public ValueSetData values(List<Object> values) {
    
    this.values = values;
    return this;
  }

  public ValueSetData addValuesItem(Object valuesItem) {
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Object> getValues() {
    return values;
  }


  @JsonProperty(VALUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValues(List<Object> values) {
    this.values = values;
  }


  public ValueSetData filterModel(FilterExpressionBuilderModel filterModel) {
    
    this.filterModel = filterModel;
    return this;
  }

   /**
   * The filter expression model for the search from values.
   * @return filterModel
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The filter expression model for the search from values.")
  @JsonProperty(FILTER_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilterExpressionBuilderModel getFilterModel() {
    return filterModel;
  }


  @JsonProperty(FILTER_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterModel(FilterExpressionBuilderModel filterModel) {
    this.filterModel = filterModel;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValueSetData valueSetData = (ValueSetData) o;
    return Objects.equals(this.qualifiedName, valueSetData.qualifiedName) &&
        Objects.equals(this.keyProperty, valueSetData.keyProperty) &&
        Objects.equals(this.properties, valueSetData.properties) &&
        Objects.equals(this.iconCode, valueSetData.iconCode) &&
        Objects.equals(this.undefined, valueSetData.undefined) &&
        Objects.equals(this.lazy, valueSetData.lazy) &&
        Objects.equals(this.values, valueSetData.values) &&
        Objects.equals(this.filterModel, valueSetData.filterModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(qualifiedName, keyProperty, properties, iconCode, undefined, lazy, values, filterModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValueSetData {\n");
    sb.append("    qualifiedName: ").append(toIndentedString(qualifiedName)).append("\n");
    sb.append("    keyProperty: ").append(toIndentedString(keyProperty)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    iconCode: ").append(toIndentedString(iconCode)).append("\n");
    sb.append("    undefined: ").append(toIndentedString(undefined)).append("\n");
    sb.append("    lazy: ").append(toIndentedString(lazy)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    filterModel: ").append(toIndentedString(filterModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

