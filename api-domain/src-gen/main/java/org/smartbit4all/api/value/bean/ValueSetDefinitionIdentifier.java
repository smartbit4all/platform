/*
 * value api
 * value api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.value.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * ValueSetDefinitionIdentifier
 */
@JsonPropertyOrder({
  ValueSetDefinitionIdentifier.NAMESPACE,
  ValueSetDefinitionIdentifier.QUALIFIED_NAME
})
@JsonTypeName("ValueSetDefinitionIdentifier")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ValueSetDefinitionIdentifier {
  public static final String NAMESPACE = "namespace";
  private String namespace;

  public static final String QUALIFIED_NAME = "qualifiedName";
  private String qualifiedName;

  public ValueSetDefinitionIdentifier() { 
  }

  public ValueSetDefinitionIdentifier namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * The namespace containing an arbitrary number of value sets. If it&#39;s null, the identifier refers to the global namespace. 
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The namespace containing an arbitrary number of value sets. If it's null, the identifier refers to the global namespace. ")
  @JsonProperty(NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public ValueSetDefinitionIdentifier qualifiedName(String qualifiedName) {
    
    this.qualifiedName = qualifiedName;
    return this;
  }

   /**
   * The unique name of the value set within its namespace. 
   * @return qualifiedName
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The unique name of the value set within its namespace. ")
  @JsonProperty(QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getQualifiedName() {
    return qualifiedName;
  }


  @JsonProperty(QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQualifiedName(String qualifiedName) {
    this.qualifiedName = qualifiedName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValueSetDefinitionIdentifier valueSetDefinitionIdentifier = (ValueSetDefinitionIdentifier) o;
    return Objects.equals(this.namespace, valueSetDefinitionIdentifier.namespace) &&
        Objects.equals(this.qualifiedName, valueSetDefinitionIdentifier.qualifiedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespace, qualifiedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValueSetDefinitionIdentifier {\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    qualifiedName: ").append(toIndentedString(qualifiedName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

