/*
 * value api
 * value api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.value.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.value.bean.ValueSetOperand;
import org.smartbit4all.api.value.bean.ValueSetOperation;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * ValueSetExpression
 */
@JsonPropertyOrder({
  ValueSetExpression.OPERATION,
  ValueSetExpression.IGNORE_VERSION,
  ValueSetExpression.OPERANDS
})
@JsonTypeName("ValueSetExpression")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ValueSetExpression {
  public static final String OPERATION = "operation";
  private ValueSetOperation operation;

  public static final String IGNORE_VERSION = "ignoreVersion";
  private Boolean ignoreVersion = false;

  public static final String OPERANDS = "operands";
  private List<ValueSetOperand> operands = new ArrayList<>();

  public ValueSetExpression() { 
  }

  public ValueSetExpression operation(ValueSetOperation operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(OPERATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ValueSetOperation getOperation() {
    return operation;
  }


  @JsonProperty(OPERATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperation(ValueSetOperation operation) {
    this.operation = operation;
  }


  public ValueSetExpression ignoreVersion(Boolean ignoreVersion) {
    
    this.ignoreVersion = ignoreVersion;
    return this;
  }

   /**
   * Get ignoreVersion
   * @return ignoreVersion
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(IGNORE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIgnoreVersion() {
    return ignoreVersion;
  }


  @JsonProperty(IGNORE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIgnoreVersion(Boolean ignoreVersion) {
    this.ignoreVersion = ignoreVersion;
  }


  public ValueSetExpression operands(List<ValueSetOperand> operands) {
    
    this.operands = operands;
    return this;
  }

  public ValueSetExpression addOperandsItem(ValueSetOperand operandsItem) {
    this.operands.add(operandsItem);
    return this;
  }

   /**
   * Get operands
   * @return operands
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(OPERANDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ValueSetOperand> getOperands() {
    return operands;
  }


  @JsonProperty(OPERANDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperands(List<ValueSetOperand> operands) {
    this.operands = operands;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValueSetExpression valueSetExpression = (ValueSetExpression) o;
    return Objects.equals(this.operation, valueSetExpression.operation) &&
        Objects.equals(this.ignoreVersion, valueSetExpression.ignoreVersion) &&
        Objects.equals(this.operands, valueSetExpression.operands);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, ignoreVersion, operands);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValueSetExpression {\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    ignoreVersion: ").append(toIndentedString(ignoreVersion)).append("\n");
    sb.append("    operands: ").append(toIndentedString(operands)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

