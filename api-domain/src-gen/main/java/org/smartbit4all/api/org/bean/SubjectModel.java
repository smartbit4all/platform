/*
 * org api
 * org api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.org.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.smartbit4all.api.org.bean.SubjectTypeDescriptor;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The subject model consists of SubjectDescriptors that defines the available subject types. We can select from the available subjects to compile a Subject instance object that defines a set of user at the end. 
 */
@ApiModel(description = "The subject model consists of SubjectDescriptors that defines the available subject types. We can select from the available subjects to compile a Subject instance object that defines a set of user at the end. ")
@JsonPropertyOrder({
  SubjectModel.URI,
  SubjectModel.NAME,
  SubjectModel.DESCRIPTORS
})
@JsonTypeName("SubjectModel")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubjectModel {
  public static final String URI = "uri";
  private URI uri;

  public static final String NAME = "name";
  private String name;

  public static final String DESCRIPTORS = "descriptors";
  private Map<String, SubjectTypeDescriptor> descriptors = new HashMap<>();

  public SubjectModel() { 
  }

  public SubjectModel uri(URI uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(URI uri) {
    this.uri = uri;
  }


  public SubjectModel name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the subject model that identifies it as a global identifier in an application tenant.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the subject model that identifies it as a global identifier in an application tenant.")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public SubjectModel descriptors(Map<String, SubjectTypeDescriptor> descriptors) {
    
    this.descriptors = descriptors;
    return this;
  }

  public SubjectModel putDescriptorsItem(String key, SubjectTypeDescriptor descriptorsItem) {
    this.descriptors.put(key, descriptorsItem);
    return this;
  }

   /**
   * The subject descriptors identified by their unique name.
   * @return descriptors
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The subject descriptors identified by their unique name.")
  @JsonProperty(DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, SubjectTypeDescriptor> getDescriptors() {
    return descriptors;
  }


  @JsonProperty(DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescriptors(Map<String, SubjectTypeDescriptor> descriptors) {
    this.descriptors = descriptors;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubjectModel subjectModel = (SubjectModel) o;
    return Objects.equals(this.uri, subjectModel.uri) &&
        Objects.equals(this.name, subjectModel.name) &&
        Objects.equals(this.descriptors, subjectModel.descriptors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, name, descriptors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubjectModel {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    descriptors: ").append(toIndentedString(descriptors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

