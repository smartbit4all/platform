/*
 * org api
 * org api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.org.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The subject is a special selector for users where we assign a subject or a filter for subjects to an object. This object is always a inline object, part of the object that describes the given situation. 
 */
@ApiModel(description = "The subject is a special selector for users where we assign a subject or a filter for subjects to an object. This object is always a inline object, part of the object that describes the given situation. ")
@JsonPropertyOrder({
  Subject.TYPE,
  Subject.REF
})
@JsonTypeName("Subject")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Subject {
  public static final String TYPE = "type";
  private String type;

  public static final String REF = "ref";
  private URI ref;

  public Subject() { 
  }

  public Subject type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The unique identifier of the type in the SubjectModel. The helps to evaluate if a given user is part of this subject. The subject model is saved here it is managed by the code that uses this Subject. Like the ACL knows that the ACLSubjectModel is used to assign the access control list for the given objects. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The unique identifier of the type in the SubjectModel. The helps to evaluate if a given user is part of this subject. The subject model is saved here it is managed by the code that uses this Subject. Like the ACL knows that the ACLSubjectModel is used to assign the access control list for the given objects. ")
  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public Subject ref(URI ref) {
    
    this.ref = ref;
    return this;
  }

   /**
   * The reference to the object referred by this subject. It can be the latest uri of a user, a group or whatever subject we have. 
   * @return ref
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The reference to the object referred by this subject. It can be the latest uri of a user, a group or whatever subject we have. ")
  @JsonProperty(REF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getRef() {
    return ref;
  }


  @JsonProperty(REF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRef(URI ref) {
    this.ref = ref;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subject subject = (Subject) o;
    return Objects.equals(this.type, subject.type) &&
        Objects.equals(this.ref, subject.ref);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, ref);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subject {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

