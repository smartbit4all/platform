/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.smartbit4all.api.invocation.bean.EventSubscriptionType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The information about an event of consumer method and the way how to invoke the given api with the event. 
 */
@ApiModel(description = "The information about an event of consumer method and the way how to invoke the given api with the event. ")
@JsonPropertyOrder({
  EventSubscriptionData.API,
  EventSubscriptionData.EVENT,
  EventSubscriptionData.SUBSCRIBED_API,
  EventSubscriptionData.SUBSCRIBED_METHOD,
  EventSubscriptionData.ASYNCHRONOUS,
  EventSubscriptionData.CHANNEL,
  EventSubscriptionData.TYPE
})
@JsonTypeName("EventSubscriptionData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventSubscriptionData {
  public static final String API = "api";
  private String api;

  public static final String EVENT = "event";
  private String event;

  public static final String SUBSCRIBED_API = "subscribedApi";
  private String subscribedApi;

  public static final String SUBSCRIBED_METHOD = "subscribedMethod";
  private String subscribedMethod;

  public static final String ASYNCHRONOUS = "asynchronous";
  private Boolean asynchronous = true;

  public static final String CHANNEL = "channel";
  private String channel;

  public static final String TYPE = "type";
  private EventSubscriptionType type;

  public EventSubscriptionData() { 
  }

  public EventSubscriptionData api(String api) {
    
    this.api = api;
    return this;
  }

   /**
   * The name of the api publishing the event.
   * @return api
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the api publishing the event.")
  @JsonProperty(API)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getApi() {
    return api;
  }


  @JsonProperty(API)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApi(String api) {
    this.api = api;
  }


  public EventSubscriptionData event(String event) {
    
    this.event = event;
    return this;
  }

   /**
   * The name of the publised event.
   * @return event
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the publised event.")
  @JsonProperty(EVENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEvent() {
    return event;
  }


  @JsonProperty(EVENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEvent(String event) {
    this.event = event;
  }


  public EventSubscriptionData subscribedApi(String subscribedApi) {
    
    this.subscribedApi = subscribedApi;
    return this;
  }

   /**
   * The api to call when the event published.
   * @return subscribedApi
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The api to call when the event published.")
  @JsonProperty(SUBSCRIBED_API)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubscribedApi() {
    return subscribedApi;
  }


  @JsonProperty(SUBSCRIBED_API)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubscribedApi(String subscribedApi) {
    this.subscribedApi = subscribedApi;
  }


  public EventSubscriptionData subscribedMethod(String subscribedMethod) {
    
    this.subscribedMethod = subscribedMethod;
    return this;
  }

   /**
   * The name of the method to call in the subscribed api.
   * @return subscribedMethod
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the method to call in the subscribed api.")
  @JsonProperty(SUBSCRIBED_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubscribedMethod() {
    return subscribedMethod;
  }


  @JsonProperty(SUBSCRIBED_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubscribedMethod(String subscribedMethod) {
    this.subscribedMethod = subscribedMethod;
  }


  public EventSubscriptionData asynchronous(Boolean asynchronous) {
    
    this.asynchronous = asynchronous;
    return this;
  }

   /**
   * True if the event is accepted in asynchronous way. This is an instruction for the publisher.
   * @return asynchronous
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the event is accepted in asynchronous way. This is an instruction for the publisher.")
  @JsonProperty(ASYNCHRONOUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAsynchronous() {
    return asynchronous;
  }


  @JsonProperty(ASYNCHRONOUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsynchronous(Boolean asynchronous) {
    this.asynchronous = asynchronous;
  }


  public EventSubscriptionData channel(String channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * Defines the asynchronous channel to use for processing the invocation.
   * @return channel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the asynchronous channel to use for processing the invocation.")
  @JsonProperty(CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChannel() {
    return channel;
  }


  @JsonProperty(CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannel(String channel) {
    this.channel = channel;
  }


  public EventSubscriptionData type(EventSubscriptionType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EventSubscriptionType getType() {
    return type;
  }


  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(EventSubscriptionType type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSubscriptionData eventSubscriptionData = (EventSubscriptionData) o;
    return Objects.equals(this.api, eventSubscriptionData.api) &&
        Objects.equals(this.event, eventSubscriptionData.event) &&
        Objects.equals(this.subscribedApi, eventSubscriptionData.subscribedApi) &&
        Objects.equals(this.subscribedMethod, eventSubscriptionData.subscribedMethod) &&
        Objects.equals(this.asynchronous, eventSubscriptionData.asynchronous) &&
        Objects.equals(this.channel, eventSubscriptionData.channel) &&
        Objects.equals(this.type, eventSubscriptionData.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(api, event, subscribedApi, subscribedMethod, asynchronous, channel, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSubscriptionData {\n");
    sb.append("    api: ").append(toIndentedString(api)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    subscribedApi: ").append(toIndentedString(subscribedApi)).append("\n");
    sb.append("    subscribedMethod: ").append(toIndentedString(subscribedMethod)).append("\n");
    sb.append("    asynchronous: ").append(toIndentedString(asynchronous)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

