/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.invocation.bean.InvocationRequest;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The descriptor for an event. It can be identified by its identifier name. The user to be notified and the  invocation request responsible for the per user notification is also defined in this object. 
 */
@ApiModel(description = "The descriptor for an event. It can be identified by its identifier name. The user to be notified and the  invocation request responsible for the per user notification is also defined in this object. ")
@JsonPropertyOrder({
  EventSubscription.NAME,
  EventSubscription.INVOCATION_REQUEST,
  EventSubscription.SUBSCRIBERS
})
@JsonTypeName("EventSubscription")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventSubscription {
  public static final String NAME = "name";
  private String name;

  public static final String INVOCATION_REQUEST = "invocationRequest";
  private InvocationRequest invocationRequest;

  public static final String SUBSCRIBERS = "subscribers";
  private List<URI> subscribers = null;

  public EventSubscription() { 
  }

  public EventSubscription name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the event.
   * @return name
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the event.")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public EventSubscription invocationRequest(InvocationRequest invocationRequest) {
    
    this.invocationRequest = invocationRequest;
    return this;
  }

   /**
   * Get invocationRequest
   * @return invocationRequest
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(INVOCATION_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InvocationRequest getInvocationRequest() {
    return invocationRequest;
  }


  @JsonProperty(INVOCATION_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvocationRequest(InvocationRequest invocationRequest) {
    this.invocationRequest = invocationRequest;
  }


  public EventSubscription subscribers(List<URI> subscribers) {
    
    this.subscribers = subscribers;
    return this;
  }

  public EventSubscription addSubscribersItem(URI subscribersItem) {
    if (this.subscribers == null) {
      this.subscribers = new ArrayList<>();
    }
    this.subscribers.add(subscribersItem);
    return this;
  }

   /**
   * The objects that interested in the given event in this moment. The object can have a profile object with the relevant subscription settings but these setting must be saved into the appropriate EventSubscription object. For example if we have a category that have subscriptions then we can save a subscribed users to the category. It can be used to display if a user is subscribed for the given category or not. But we also need to save this information into this object by adding the user to this list. 
   * @return subscribers
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The objects that interested in the given event in this moment. The object can have a profile object with the relevant subscription settings but these setting must be saved into the appropriate EventSubscription object. For example if we have a category that have subscriptions then we can save a subscribed users to the category. It can be used to display if a user is subscribed for the given category or not. But we also need to save this information into this object by adding the user to this list. ")
  @JsonProperty(SUBSCRIBERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<URI> getSubscribers() {
    return subscribers;
  }


  @JsonProperty(SUBSCRIBERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscribers(List<URI> subscribers) {
    this.subscribers = subscribers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSubscription eventSubscription = (EventSubscription) o;
    return Objects.equals(this.name, eventSubscription.name) &&
        Objects.equals(this.invocationRequest, eventSubscription.invocationRequest) &&
        Objects.equals(this.subscribers, eventSubscription.subscribers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, invocationRequest, subscribers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSubscription {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    invocationRequest: ").append(toIndentedString(invocationRequest)).append("\n");
    sb.append("    subscribers: ").append(toIndentedString(subscribers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

