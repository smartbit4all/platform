/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.invocation.bean.EventSubscriptionData;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The information about an event of the publisher. It contains the consumers also by the annotation of the provider apis. 
 */
@ApiModel(description = "The information about an event of the publisher. It contains the consumers also by the annotation of the provider apis. ")
@JsonPropertyOrder({
  PublishedEventData.API,
  PublishedEventData.EVENT,
  PublishedEventData.SUBSCRIPTIONS
})
@JsonTypeName("PublishedEventData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PublishedEventData {
  public static final String API = "api";
  private String api;

  public static final String EVENT = "event";
  private String event;

  public static final String SUBSCRIPTIONS = "subscriptions";
  private List<EventSubscriptionData> subscriptions = new ArrayList<>();

  public PublishedEventData() { 
  }

  public PublishedEventData api(String api) {
    
    this.api = api;
    return this;
  }

   /**
   * The name of the api publishing the event.
   * @return api
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the api publishing the event.")
  @JsonProperty(API)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getApi() {
    return api;
  }


  @JsonProperty(API)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApi(String api) {
    this.api = api;
  }


  public PublishedEventData event(String event) {
    
    this.event = event;
    return this;
  }

   /**
   * The name of the publised event.
   * @return event
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the publised event.")
  @JsonProperty(EVENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEvent() {
    return event;
  }


  @JsonProperty(EVENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEvent(String event) {
    this.event = event;
  }


  public PublishedEventData subscriptions(List<EventSubscriptionData> subscriptions) {
    
    this.subscriptions = subscriptions;
    return this;
  }

  public PublishedEventData addSubscriptionsItem(EventSubscriptionData subscriptionsItem) {
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

   /**
   * All the apis subscribed for the given event.
   * @return subscriptions
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "All the apis subscribed for the given event.")
  @JsonProperty(SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<EventSubscriptionData> getSubscriptions() {
    return subscriptions;
  }


  @JsonProperty(SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubscriptions(List<EventSubscriptionData> subscriptions) {
    this.subscriptions = subscriptions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishedEventData publishedEventData = (PublishedEventData) o;
    return Objects.equals(this.api, publishedEventData.api) &&
        Objects.equals(this.event, publishedEventData.event) &&
        Objects.equals(this.subscriptions, publishedEventData.subscriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(api, event, subscriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishedEventData {\n");
    sb.append("    api: ").append(toIndentedString(api)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

