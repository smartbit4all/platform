/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.invocation.bean.EventSubscription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The subscriptions are summarized in this object for every subscribed object. There can be more object from this to separate the different subscription mechanisms. It can be global or can be attached to given objects. The original events are emited by apis and consumed by the EventSubscriptionApi. 
 */
@ApiModel(description = "The subscriptions are summarized in this object for every subscribed object. There can be more object from this to separate the different subscription mechanisms. It can be global or can be attached to given objects. The original events are emited by apis and consumed by the EventSubscriptionApi. ")
@JsonPropertyOrder({
  EventPublishingConfig.URI,
  EventPublishingConfig.NAME,
  EventPublishingConfig.SUBSCRIPTIONS
})
@JsonTypeName("EventPublishingConfig")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventPublishingConfig {
  public static final String URI = "uri";
  private URI uri;

  public static final String NAME = "name";
  private String name;

  public static final String SUBSCRIPTIONS = "subscriptions";
  private List<EventSubscription> subscriptions = null;

  public EventPublishingConfig() { 
  }

  public EventPublishingConfig uri(URI uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(URI uri) {
    this.uri = uri;
  }


  public EventPublishingConfig name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the subscrition like some categories or anything else.
   * @return name
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the subscrition like some categories or anything else.")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public EventPublishingConfig subscriptions(List<EventSubscription> subscriptions) {
    
    this.subscriptions = subscriptions;
    return this;
  }

  public EventPublishingConfig addSubscriptionsItem(EventSubscription subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

   /**
   * The event codes the subscription is looking for. All these event are going to evaluated by this subsription object. 
   * @return subscriptions
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The event codes the subscription is looking for. All these event are going to evaluated by this subsription object. ")
  @JsonProperty(SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<EventSubscription> getSubscriptions() {
    return subscriptions;
  }


  @JsonProperty(SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscriptions(List<EventSubscription> subscriptions) {
    this.subscriptions = subscriptions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventPublishingConfig eventPublishingConfig = (EventPublishingConfig) o;
    return Objects.equals(this.uri, eventPublishingConfig.uri) &&
        Objects.equals(this.name, eventPublishingConfig.name) &&
        Objects.equals(this.subscriptions, eventPublishingConfig.subscriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, name, subscriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventPublishingConfig {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

