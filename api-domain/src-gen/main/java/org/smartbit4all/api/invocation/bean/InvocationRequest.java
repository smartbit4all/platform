/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.invocation.bean.InvocationParameter;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The data object of an api invocation that contains the interface class name in java style, the name of the api if it is provided in multiple instances, the name of the method to call and the parameters as object. 
 */
@ApiModel(description = "The data object of an api invocation that contains the interface class name in java style, the name of the api if it is provided in multiple instances, the name of the method to call and the parameters as object. ")
@JsonPropertyOrder({
  InvocationRequest.INTERFACE_CLASS,
  InvocationRequest.NAME,
  InvocationRequest.METHOD_NAME,
  InvocationRequest.PARAMETERS,
  InvocationRequest.SESSION_URI
})
@JsonTypeName("InvocationRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InvocationRequest {
  public static final String INTERFACE_CLASS = "interfaceClass";
  private String interfaceClass;

  public static final String NAME = "name";
  private String name;

  public static final String METHOD_NAME = "methodName";
  private String methodName;

  public static final String PARAMETERS = "parameters";
  private List<InvocationParameter> parameters = new ArrayList<>();

  public static final String SESSION_URI = "sessionUri";
  private URI sessionUri;

  public InvocationRequest() { 
  }

  public InvocationRequest interfaceClass(String interfaceClass) {
    
    this.interfaceClass = interfaceClass;
    return this;
  }

   /**
   * The fully qualified name of the interface.
   * @return interfaceClass
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The fully qualified name of the interface.")
  @JsonProperty(INTERFACE_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInterfaceClass() {
    return interfaceClass;
  }


  @JsonProperty(INTERFACE_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterfaceClass(String interfaceClass) {
    this.interfaceClass = interfaceClass;
  }


  public InvocationRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The fully qualified name of the interface.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fully qualified name of the interface.")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public InvocationRequest methodName(String methodName) {
    
    this.methodName = methodName;
    return this;
  }

   /**
   * The name of the method to call
   * @return methodName
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the method to call")
  @JsonProperty(METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMethodName() {
    return methodName;
  }


  @JsonProperty(METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public InvocationRequest parameters(List<InvocationParameter> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public InvocationRequest addParametersItem(InvocationParameter parametersItem) {
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<InvocationParameter> getParameters() {
    return parameters;
  }


  @JsonProperty(PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParameters(List<InvocationParameter> parameters) {
    this.parameters = parameters;
  }


  public InvocationRequest sessionUri(URI sessionUri) {
    
    this.sessionUri = sessionUri;
    return this;
  }

   /**
   * The URI of the session that belongs to the request. Optional and can be used to inherit session for the asynchronous call. 
   * @return sessionUri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The URI of the session that belongs to the request. Optional and can be used to inherit session for the asynchronous call. ")
  @JsonProperty(SESSION_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getSessionUri() {
    return sessionUri;
  }


  @JsonProperty(SESSION_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSessionUri(URI sessionUri) {
    this.sessionUri = sessionUri;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvocationRequest invocationRequest = (InvocationRequest) o;
    return Objects.equals(this.interfaceClass, invocationRequest.interfaceClass) &&
        Objects.equals(this.name, invocationRequest.name) &&
        Objects.equals(this.methodName, invocationRequest.methodName) &&
        Objects.equals(this.parameters, invocationRequest.parameters) &&
        Objects.equals(this.sessionUri, invocationRequest.sessionUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interfaceClass, name, methodName, parameters, sessionUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvocationRequest {\n");
    sb.append("    interfaceClass: ").append(toIndentedString(interfaceClass)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    sessionUri: ").append(toIndentedString(sessionUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

