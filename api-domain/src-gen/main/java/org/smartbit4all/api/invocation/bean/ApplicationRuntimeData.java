/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The application runtime can be saved into the storage in this object. 
 */
@ApiModel(description = "The application runtime can be saved into the storage in this object. ")
@JsonPropertyOrder({
  ApplicationRuntimeData.URI,
  ApplicationRuntimeData.UUID,
  ApplicationRuntimeData.IP_ADDRESS,
  ApplicationRuntimeData.SERVER_PORT,
  ApplicationRuntimeData.TIME_OFFSET,
  ApplicationRuntimeData.LAST_TOUCH_TIME
})
@JsonTypeName("ApplicationRuntimeData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApplicationRuntimeData {
  public static final String URI = "uri";
  private URI uri;

  public static final String UUID = "uuid";
  private UUID uuid;

  public static final String IP_ADDRESS = "ipAddress";
  private String ipAddress;

  public static final String SERVER_PORT = "serverPort";
  private Integer serverPort;

  public static final String TIME_OFFSET = "timeOffset";
  private Long timeOffset;

  public static final String LAST_TOUCH_TIME = "lastTouchTime";
  private Long lastTouchTime;


  public ApplicationRuntimeData uri(URI uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * The URI of the instance.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The URI of the instance.")
  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(URI uri) {
    this.uri = uri;
  }


  public ApplicationRuntimeData uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * The unique identifier of the runtime instance.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The unique identifier of the runtime instance.")
  @JsonProperty(UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getUuid() {
    return uuid;
  }


  @JsonProperty(UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public ApplicationRuntimeData ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * The ip address of the runtime.
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ip address of the runtime.")
  @JsonProperty(IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIpAddress() {
    return ipAddress;
  }


  @JsonProperty(IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ApplicationRuntimeData serverPort(Integer serverPort) {
    
    this.serverPort = serverPort;
    return this;
  }

   /**
   * The server port of the runtime.
   * @return serverPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The server port of the runtime.")
  @JsonProperty(SERVER_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getServerPort() {
    return serverPort;
  }


  @JsonProperty(SERVER_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServerPort(Integer serverPort) {
    this.serverPort = serverPort;
  }


  public ApplicationRuntimeData timeOffset(Long timeOffset) {
    
    this.timeOffset = timeOffset;
    return this;
  }

   /**
   * The server time offset compared to the storage time.
   * @return timeOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The server time offset compared to the storage time.")
  @JsonProperty(TIME_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTimeOffset() {
    return timeOffset;
  }


  @JsonProperty(TIME_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeOffset(Long timeOffset) {
    this.timeOffset = timeOffset;
  }


  public ApplicationRuntimeData lastTouchTime(Long lastTouchTime) {
    
    this.lastTouchTime = lastTouchTime;
    return this;
  }

   /**
   * The last time when the given runtime updated the entry in the storage.
   * @return lastTouchTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last time when the given runtime updated the entry in the storage.")
  @JsonProperty(LAST_TOUCH_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLastTouchTime() {
    return lastTouchTime;
  }


  @JsonProperty(LAST_TOUCH_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastTouchTime(Long lastTouchTime) {
    this.lastTouchTime = lastTouchTime;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationRuntimeData applicationRuntimeData = (ApplicationRuntimeData) o;
    return Objects.equals(this.uri, applicationRuntimeData.uri) &&
        Objects.equals(this.uuid, applicationRuntimeData.uuid) &&
        Objects.equals(this.ipAddress, applicationRuntimeData.ipAddress) &&
        Objects.equals(this.serverPort, applicationRuntimeData.serverPort) &&
        Objects.equals(this.timeOffset, applicationRuntimeData.timeOffset) &&
        Objects.equals(this.lastTouchTime, applicationRuntimeData.lastTouchTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, uuid, ipAddress, serverPort, timeOffset, lastTouchTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationRuntimeData {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    timeOffset: ").append(toIndentedString(timeOffset)).append("\n");
    sb.append("    lastTouchTime: ").append(toIndentedString(lastTouchTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

