/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.invocation.bean.RuntimeAsyncChannelList;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This is the central registry of every runtime that manage asynchronous invocation channels. If a new channel is managed  by a runtime then first of all it is registered into this object. The InvocationApi of the runtimes are periodically examine if the given runtimes are still alive. If not then the channels are going to be pick up by one or more servers. 
 */
@ApiModel(description = "This is the central registry of every runtime that manage asynchronous invocation channels. If a new channel is managed  by a runtime then first of all it is registered into this object. The InvocationApi of the runtimes are periodically examine if the given runtimes are still alive. If not then the channels are going to be pick up by one or more servers. ")
@JsonPropertyOrder({
  RuntimeAsyncChannelRegistry.RUNTIMES
})
@JsonTypeName("RuntimeAsyncChannelRegistry")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RuntimeAsyncChannelRegistry {
  public static final String RUNTIMES = "runtimes";
  private List<RuntimeAsyncChannelList> runtimes = null;

  public RuntimeAsyncChannelRegistry() { 
  }

  public RuntimeAsyncChannelRegistry runtimes(List<RuntimeAsyncChannelList> runtimes) {
    
    this.runtimes = runtimes;
    return this;
  }

  public RuntimeAsyncChannelRegistry addRuntimesItem(RuntimeAsyncChannelList runtimesItem) {
    if (this.runtimes == null) {
      this.runtimes = new ArrayList<>();
    }
    this.runtimes.add(runtimesItem);
    return this;
  }

   /**
   * The list of runtimes managing channels.
   * @return runtimes
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The list of runtimes managing channels.")
  @JsonProperty(RUNTIMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RuntimeAsyncChannelList> getRuntimes() {
    return runtimes;
  }


  @JsonProperty(RUNTIMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRuntimes(List<RuntimeAsyncChannelList> runtimes) {
    this.runtimes = runtimes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuntimeAsyncChannelRegistry runtimeAsyncChannelRegistry = (RuntimeAsyncChannelRegistry) o;
    return Objects.equals(this.runtimes, runtimeAsyncChannelRegistry.runtimes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runtimes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuntimeAsyncChannelRegistry {\n");
    sb.append("    runtimes: ").append(toIndentedString(runtimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

