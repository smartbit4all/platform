/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The descriptor for an event. It can be identified by its identifier name. The user to be notified and the  invocation request responsible for the per user notification is also defined in this object. 
 */
@ApiModel(description = "The descriptor for an event. It can be identified by its identifier name. The user to be notified and the  invocation request responsible for the per user notification is also defined in this object. ")
@JsonPropertyOrder({
  EventData.NAME,
  EventData.TARGET_OBJECT,
  EventData.RELATED_OBJECTS
})
@JsonTypeName("EventData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventData {
  public static final String NAME = "name";
  private String name;

  public static final String TARGET_OBJECT = "targetObject";
  private URI targetObject;

  public static final String RELATED_OBJECTS = "relatedObjects";
  private URI relatedObjects;

  public EventData() { 
  }

  public EventData name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the event.
   * @return name
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the event.")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public EventData targetObject(URI targetObject) {
    
    this.targetObject = targetObject;
    return this;
  }

   /**
   * Get targetObject
   * @return targetObject
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(TARGET_OBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getTargetObject() {
    return targetObject;
  }


  @JsonProperty(TARGET_OBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetObject(URI targetObject) {
    this.targetObject = targetObject;
  }


  public EventData relatedObjects(URI relatedObjects) {
    
    this.relatedObjects = relatedObjects;
    return this;
  }

   /**
   * All the related objects
   * @return relatedObjects
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "All the related objects")
  @JsonProperty(RELATED_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getRelatedObjects() {
    return relatedObjects;
  }


  @JsonProperty(RELATED_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelatedObjects(URI relatedObjects) {
    this.relatedObjects = relatedObjects;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventData eventData = (EventData) o;
    return Objects.equals(this.name, eventData.name) &&
        Objects.equals(this.targetObject, eventData.targetObject) &&
        Objects.equals(this.relatedObjects, eventData.relatedObjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, targetObject, relatedObjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventData {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    targetObject: ").append(toIndentedString(targetObject)).append("\n");
    sb.append("    relatedObjects: ").append(toIndentedString(relatedObjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

