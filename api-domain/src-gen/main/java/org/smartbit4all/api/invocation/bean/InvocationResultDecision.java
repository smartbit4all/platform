/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The evaluation can make a decision on the result of the invocation. Can ask reschedule, continue can finish the call. 
 */
@ApiModel(description = "The evaluation can make a decision on the result of the invocation. Can ask reschedule, continue can finish the call. ")
@JsonPropertyOrder({
  InvocationResultDecision.HANDLER,
  InvocationResultDecision.DECISION,
  InvocationResultDecision.SCHEDULED_AT
})
@JsonTypeName("InvocationResultDecision")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InvocationResultDecision {
  public static final String HANDLER = "handler";
  private String handler;

  /**
   * Gets or Sets decision
   */
  public enum DecisionEnum {
    ABORT("ABORT"),
    
    RESCHEDULE("RESCHEDULE"),
    
    CONTINUE("CONTINUE");

    private String value;

    DecisionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DecisionEnum fromValue(String value) {
      for (DecisionEnum b : DecisionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String DECISION = "decision";
  private DecisionEnum decision;

  public static final String SCHEDULED_AT = "scheduledAt";
  private OffsetDateTime scheduledAt;

  public InvocationResultDecision() { 
  }

  public InvocationResultDecision handler(String handler) {
    
    this.handler = handler;
    return this;
  }

   /**
   * The fully qualified name of the evaluator api that was the decision maker.
   * @return handler
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fully qualified name of the evaluator api that was the decision maker.")
  @JsonProperty(HANDLER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHandler() {
    return handler;
  }


  @JsonProperty(HANDLER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHandler(String handler) {
    this.handler = handler;
  }


  public InvocationResultDecision decision(DecisionEnum decision) {
    
    this.decision = decision;
    return this;
  }

   /**
   * Get decision
   * @return decision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(DECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DecisionEnum getDecision() {
    return decision;
  }


  @JsonProperty(DECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDecision(DecisionEnum decision) {
    this.decision = decision;
  }


  public InvocationResultDecision scheduledAt(OffsetDateTime scheduledAt) {
    
    this.scheduledAt = scheduledAt;
    return this;
  }

   /**
   * If the error handler decided to reschedule the given invocation or continue with the andThen calls then we can see  the next invocation time in this field. 
   * @return scheduledAt
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "If the error handler decided to reschedule the given invocation or continue with the andThen calls then we can see  the next invocation time in this field. ")
  @JsonProperty(SCHEDULED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getScheduledAt() {
    return scheduledAt;
  }


  @JsonProperty(SCHEDULED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScheduledAt(OffsetDateTime scheduledAt) {
    this.scheduledAt = scheduledAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvocationResultDecision invocationResultDecision = (InvocationResultDecision) o;
    return Objects.equals(this.handler, invocationResultDecision.handler) &&
        Objects.equals(this.decision, invocationResultDecision.decision) &&
        Objects.equals(this.scheduledAt, invocationResultDecision.scheduledAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(handler, decision, scheduledAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvocationResultDecision {\n");
    sb.append("    handler: ").append(toIndentedString(handler)).append("\n");
    sb.append("    decision: ").append(toIndentedString(decision)).append("\n");
    sb.append("    scheduledAt: ").append(toIndentedString(scheduledAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

