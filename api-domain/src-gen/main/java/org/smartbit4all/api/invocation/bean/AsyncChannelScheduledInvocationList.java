/*
 * invocation api
 * The invocation api is a generic possibility to call remote apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.invocation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.invocation.bean.ScheduledInvocationRequest;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * For every asynchronous channel it is a central registry for the invocations to execute later. These invocations are  not owned by any of the runtimes, they are awaiting for picking up for execution. An active AsynInvocationRequest reside in this resigtry or in the RuntimeAsyncChannel object of the given runtime. 
 */
@ApiModel(description = "For every asynchronous channel it is a central registry for the invocations to execute later. These invocations are  not owned by any of the runtimes, they are awaiting for picking up for execution. An active AsynInvocationRequest reside in this resigtry or in the RuntimeAsyncChannel object of the given runtime. ")
@JsonPropertyOrder({
  AsyncChannelScheduledInvocationList.INVOCATION_REQUESTS
})
@JsonTypeName("AsyncChannelScheduledInvocationList")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AsyncChannelScheduledInvocationList {
  public static final String INVOCATION_REQUESTS = "invocationRequests";
  private List<ScheduledInvocationRequest> invocationRequests = new ArrayList<>();

  public AsyncChannelScheduledInvocationList() { 
  }

  public AsyncChannelScheduledInvocationList invocationRequests(List<ScheduledInvocationRequest> invocationRequests) {
    
    this.invocationRequests = invocationRequests;
    return this;
  }

  public AsyncChannelScheduledInvocationList addInvocationRequestsItem(ScheduledInvocationRequest invocationRequestsItem) {
    this.invocationRequests.add(invocationRequestsItem);
    return this;
  }

   /**
   * The uri list of the AsyncInvocationRequests that are currently managed by the given runtime.
   * @return invocationRequests
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The uri list of the AsyncInvocationRequests that are currently managed by the given runtime.")
  @JsonProperty(INVOCATION_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ScheduledInvocationRequest> getInvocationRequests() {
    return invocationRequests;
  }


  @JsonProperty(INVOCATION_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInvocationRequests(List<ScheduledInvocationRequest> invocationRequests) {
    this.invocationRequests = invocationRequests;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncChannelScheduledInvocationList asyncChannelScheduledInvocationList = (AsyncChannelScheduledInvocationList) o;
    return Objects.equals(this.invocationRequests, asyncChannelScheduledInvocationList.invocationRequests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invocationRequests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncChannelScheduledInvocationList {\n");
    sb.append("    invocationRequests: ").append(toIndentedString(invocationRequests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

