/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.smartbit4all.api.object.bean.ObjectNodeState;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This object contains an object instance as map. It can be used to separate the references and the business data in the API implementations. The object node contains  an object returned by the RetrievalApi. It can manage the state of the object and we can use it to produce ApplyChangeRequest at the end of the modification. 
 */
@ApiModel(description = "This object contains an object instance as map. It can be used to separate the references and the business data in the API implementations. The object node contains  an object returned by the RetrievalApi. It can manage the state of the object and we can use it to produce ApplyChangeRequest at the end of the modification. ")
@JsonPropertyOrder({
  ObjectNodeData.OBJECT_URI,
  ObjectNodeData.QUALIFIED_NAME,
  ObjectNodeData.STORAGE_SCHEMA,
  ObjectNodeData.VERSION_NR,
  ObjectNodeData.STATE,
  ObjectNodeData.OBJECT_AS_MAP,
  ObjectNodeData.REFERENCES,
  ObjectNodeData.REFERENCE_LISTS,
  ObjectNodeData.REFERENCE_MAPS
})
@JsonTypeName("ObjectNodeData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectNodeData {
  public static final String OBJECT_URI = "objectUri";
  private URI objectUri;

  public static final String QUALIFIED_NAME = "qualifiedName";
  private String qualifiedName;

  public static final String STORAGE_SCHEMA = "storageSchema";
  private String storageSchema;

  public static final String VERSION_NR = "versionNr";
  private Long versionNr = 0l;

  public static final String STATE = "state";
  private ObjectNodeState state = ObjectNodeState.NOP;

  public static final String OBJECT_AS_MAP = "objectAsMap";
  private Map<String, Object> objectAsMap = new HashMap<>();

  public static final String REFERENCES = "references";
  private Map<String, ObjectNodeData> references = new HashMap<>();

  public static final String REFERENCE_LISTS = "referenceLists";
  private Map<String, List<ObjectNodeData>> referenceLists = new HashMap<>();

  public static final String REFERENCE_MAPS = "referenceMaps";
  private Map<String, Map<String, ObjectNodeData>> referenceMaps = new HashMap<>();

  public ObjectNodeData() { 
  }

  public ObjectNodeData objectUri(URI objectUri) {
    
    this.objectUri = objectUri;
    return this;
  }

   /**
   * The object URI of the given object state. It is version URI to be able to refere to the given version of the data. 
   * @return objectUri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The object URI of the given object state. It is version URI to be able to refere to the given version of the data. ")
  @JsonProperty(OBJECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getObjectUri() {
    return objectUri;
  }


  @JsonProperty(OBJECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setObjectUri(URI objectUri) {
    this.objectUri = objectUri;
  }


  public ObjectNodeData qualifiedName(String qualifiedName) {
    
    this.qualifiedName = qualifiedName;
    return this;
  }

   /**
   * The qualified globaly unique name of the object definition. In a java application it is the qualified name of the class. 
   * @return qualifiedName
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The qualified globaly unique name of the object definition. In a java application it is the qualified name of the class. ")
  @JsonProperty(QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getQualifiedName() {
    return qualifiedName;
  }


  @JsonProperty(QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQualifiedName(String qualifiedName) {
    this.qualifiedName = qualifiedName;
  }


  public ObjectNodeData storageSchema(String storageSchema) {
    
    this.storageSchema = storageSchema;
    return this;
  }

   /**
   * The logical storage scheme if it is used in the given storage implementation. 
   * @return storageSchema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The logical storage scheme if it is used in the given storage implementation. ")
  @JsonProperty(STORAGE_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStorageSchema() {
    return storageSchema;
  }


  @JsonProperty(STORAGE_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageSchema(String storageSchema) {
    this.storageSchema = storageSchema;
  }


  public ObjectNodeData versionNr(Long versionNr) {
    
    this.versionNr = versionNr;
    return this;
  }

   /**
   * The version number of the given node. It is filled by the retrieve so if we create a new node then it is 0 by default. 
   * @return versionNr
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The version number of the given node. It is filled by the retrieve so if we create a new node then it is 0 by default. ")
  @JsonProperty(VERSION_NR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getVersionNr() {
    return versionNr;
  }


  @JsonProperty(VERSION_NR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersionNr(Long versionNr) {
    this.versionNr = versionNr;
  }


  public ObjectNodeData state(ObjectNodeState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ObjectNodeState getState() {
    return state;
  }


  @JsonProperty(STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(ObjectNodeState state) {
    this.state = state;
  }


  public ObjectNodeData objectAsMap(Map<String, Object> objectAsMap) {
    
    this.objectAsMap = objectAsMap;
    return this;
  }

  public ObjectNodeData putObjectAsMapItem(String key, Object objectAsMapItem) {
    this.objectAsMap.put(key, objectAsMapItem);
    return this;
  }

   /**
   * Get objectAsMap
   * @return objectAsMap
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(OBJECT_AS_MAP)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)

  public Map<String, Object> getObjectAsMap() {
    return objectAsMap;
  }


  @JsonProperty(OBJECT_AS_MAP)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public void setObjectAsMap(Map<String, Object> objectAsMap) {
    this.objectAsMap = objectAsMap;
  }


  public ObjectNodeData references(Map<String, ObjectNodeData> references) {
    
    this.references = references;
    return this;
  }

  public ObjectNodeData putReferencesItem(String key, ObjectNodeData referencesItem) {
    this.references.put(key, referencesItem);
    return this;
  }

   /**
   * Get references
   * @return references
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(REFERENCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, ObjectNodeData> getReferences() {
    return references;
  }


  @JsonProperty(REFERENCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferences(Map<String, ObjectNodeData> references) {
    this.references = references;
  }


  public ObjectNodeData referenceLists(Map<String, List<ObjectNodeData>> referenceLists) {
    
    this.referenceLists = referenceLists;
    return this;
  }

  public ObjectNodeData putReferenceListsItem(String key, List<ObjectNodeData> referenceListsItem) {
    this.referenceLists.put(key, referenceListsItem);
    return this;
  }

   /**
   * Get referenceLists
   * @return referenceLists
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(REFERENCE_LISTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, List<ObjectNodeData>> getReferenceLists() {
    return referenceLists;
  }


  @JsonProperty(REFERENCE_LISTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferenceLists(Map<String, List<ObjectNodeData>> referenceLists) {
    this.referenceLists = referenceLists;
  }


  public ObjectNodeData referenceMaps(Map<String, Map<String, ObjectNodeData>> referenceMaps) {
    
    this.referenceMaps = referenceMaps;
    return this;
  }

  public ObjectNodeData putReferenceMapsItem(String key, Map<String, ObjectNodeData> referenceMapsItem) {
    this.referenceMaps.put(key, referenceMapsItem);
    return this;
  }

   /**
   * Get referenceMaps
   * @return referenceMaps
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(REFERENCE_MAPS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, Map<String, ObjectNodeData>> getReferenceMaps() {
    return referenceMaps;
  }


  @JsonProperty(REFERENCE_MAPS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferenceMaps(Map<String, Map<String, ObjectNodeData>> referenceMaps) {
    this.referenceMaps = referenceMaps;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectNodeData objectNodeData = (ObjectNodeData) o;
    return Objects.equals(this.objectUri, objectNodeData.objectUri) &&
        Objects.equals(this.qualifiedName, objectNodeData.qualifiedName) &&
        Objects.equals(this.storageSchema, objectNodeData.storageSchema) &&
        Objects.equals(this.versionNr, objectNodeData.versionNr) &&
        Objects.equals(this.state, objectNodeData.state) &&
        Objects.equals(this.objectAsMap, objectNodeData.objectAsMap) &&
        Objects.equals(this.references, objectNodeData.references) &&
        Objects.equals(this.referenceLists, objectNodeData.referenceLists) &&
        Objects.equals(this.referenceMaps, objectNodeData.referenceMaps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectUri, qualifiedName, storageSchema, versionNr, state, objectAsMap, references, referenceLists, referenceMaps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectNodeData {\n");
    sb.append("    objectUri: ").append(toIndentedString(objectUri)).append("\n");
    sb.append("    qualifiedName: ").append(toIndentedString(qualifiedName)).append("\n");
    sb.append("    storageSchema: ").append(toIndentedString(storageSchema)).append("\n");
    sb.append("    versionNr: ").append(toIndentedString(versionNr)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    objectAsMap: ").append(toIndentedString(objectAsMap)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    referenceLists: ").append(toIndentedString(referenceLists)).append("\n");
    sb.append("    referenceMaps: ").append(toIndentedString(referenceMaps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

