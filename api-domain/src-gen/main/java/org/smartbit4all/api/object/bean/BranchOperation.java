/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import org.smartbit4all.api.session.bean.UserActivityLog;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The data of the operation in a branch. 
 */
@ApiModel(description = "The data of the operation in a branch. ")
@JsonPropertyOrder({
  BranchOperation.SOURCE_URI,
  BranchOperation.TARGET_URI,
  BranchOperation.OPERATION_TYPE,
  BranchOperation.EXECUTED_AT,
  BranchOperation.OPERATION
})
@JsonTypeName("BranchOperation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BranchOperation {
  public static final String SOURCE_URI = "sourceUri";
  private URI sourceUri;

  public static final String TARGET_URI = "targetUri";
  private URI targetUri;

  /**
   * Gets or Sets operationType
   */
  public enum OperationTypeEnum {
    INIT("init"),
    
    REBASE("rebase"),
    
    MERGE("merge");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String OPERATION_TYPE = "operationType";
  private OperationTypeEnum operationType;

  public static final String EXECUTED_AT = "executedAt";
  private UserActivityLog executedAt = null;

  public static final String OPERATION = "operation";
  private String operation;

  public BranchOperation() { 
  }

  public BranchOperation sourceUri(URI sourceUri) {
    
    this.sourceUri = sourceUri;
    return this;
  }

   /**
   * Get sourceUri
   * @return sourceUri
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(SOURCE_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getSourceUri() {
    return sourceUri;
  }


  @JsonProperty(SOURCE_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSourceUri(URI sourceUri) {
    this.sourceUri = sourceUri;
  }


  public BranchOperation targetUri(URI targetUri) {
    
    this.targetUri = targetUri;
    return this;
  }

   /**
   * Get targetUri
   * @return targetUri
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(TARGET_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getTargetUri() {
    return targetUri;
  }


  @JsonProperty(TARGET_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTargetUri(URI targetUri) {
    this.targetUri = targetUri;
  }


  public BranchOperation operationType(OperationTypeEnum operationType) {
    
    this.operationType = operationType;
    return this;
  }

   /**
   * Get operationType
   * @return operationType
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(OPERATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OperationTypeEnum getOperationType() {
    return operationType;
  }


  @JsonProperty(OPERATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
  }


  public BranchOperation executedAt(UserActivityLog executedAt) {
    
    this.executedAt = executedAt;
    return this;
  }

   /**
   * Get executedAt
   * @return executedAt
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(EXECUTED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UserActivityLog getExecutedAt() {
    return executedAt;
  }


  @JsonProperty(EXECUTED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecutedAt(UserActivityLog executedAt) {
    this.executedAt = executedAt;
  }


  public BranchOperation operation(String operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * The Api and the operation that was created the given version of the object.
   * @return operation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Api and the operation that was created the given version of the object.")
  @JsonProperty(OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOperation() {
    return operation;
  }


  @JsonProperty(OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(String operation) {
    this.operation = operation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchOperation branchOperation = (BranchOperation) o;
    return Objects.equals(this.sourceUri, branchOperation.sourceUri) &&
        Objects.equals(this.targetUri, branchOperation.targetUri) &&
        Objects.equals(this.operationType, branchOperation.operationType) &&
        Objects.equals(this.executedAt, branchOperation.executedAt) &&
        Objects.equals(this.operation, branchOperation.operation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceUri, targetUri, operationType, executedAt, operation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchOperation {\n");
    sb.append("    sourceUri: ").append(toIndentedString(sourceUri)).append("\n");
    sb.append("    targetUri: ").append(toIndentedString(targetUri)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    executedAt: ").append(toIndentedString(executedAt)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

