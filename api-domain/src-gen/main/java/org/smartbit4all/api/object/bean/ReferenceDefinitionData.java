/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import org.smartbit4all.api.object.bean.AggregationKind;
import org.smartbit4all.api.object.bean.ReferencePropertyKind;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The reference definition is a directed navigation between objects. Its name is unique inside the source object that can have only one outgoing reference with the same name. In the target object the source object and the name is unique together but the name itself is not enough to identify an incoming reference. 
 */
@ApiModel(description = "The reference definition is a directed navigation between objects. Its name is unique inside the source object that can have only one outgoing reference with the same name. In the target object the source object and the name is unique together but the name itself is not enough to identify an incoming reference. ")
@JsonPropertyOrder({
  ReferenceDefinitionData.URI,
  ReferenceDefinitionData.BACK_REFERENCE,
  ReferenceDefinitionData.SOURCE_OBJECT_NAME,
  ReferenceDefinitionData.PROPERTY_PATH,
  ReferenceDefinitionData.TARGET_OBJECT_NAME,
  ReferenceDefinitionData.TARGET_VALUE_SET,
  ReferenceDefinitionData.AGGREGATION,
  ReferenceDefinitionData.PROPERTY_KIND
})
@JsonTypeName("ReferenceDefinitionData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReferenceDefinitionData {
  public static final String URI = "uri";
  private URI uri;

  public static final String BACK_REFERENCE = "backReference";
  private URI backReference;

  public static final String SOURCE_OBJECT_NAME = "sourceObjectName";
  private String sourceObjectName;

  public static final String PROPERTY_PATH = "propertyPath";
  private String propertyPath;

  public static final String TARGET_OBJECT_NAME = "targetObjectName";
  private String targetObjectName;

  public static final String TARGET_VALUE_SET = "targetValueSet";
  private URI targetValueSet;

  public static final String AGGREGATION = "aggregation";
  private AggregationKind aggregation = AggregationKind.NONE;

  public static final String PROPERTY_KIND = "propertyKind";
  private ReferencePropertyKind propertyKind;

  public ReferenceDefinitionData() { 
  }

  public ReferenceDefinitionData uri(URI uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * The storage identifier of the given definition. It is calculated by the qualified name of the object and the name name of the reference. For example object:/com/smartbit4all/mydomain/model/MyObject/firstReference could be a calculated URI for a given reference. By default it could be a good idea to name the reference by the name of the property that contains the reference value. 
   * @return uri
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The storage identifier of the given definition. It is calculated by the qualified name of the object and the name name of the reference. For example object:/com/smartbit4all/mydomain/model/MyObject/firstReference could be a calculated URI for a given reference. By default it could be a good idea to name the reference by the name of the property that contains the reference value. ")
  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(URI uri) {
    this.uri = uri;
  }


  public ReferenceDefinitionData backReference(URI backReference) {
    
    this.backReference = backReference;
    return this;
  }

   /**
   * If an association between two object is navigable into both direction then this uri refers to the opposite reference.
   * @return backReference
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "If an association between two object is navigable into both direction then this uri refers to the opposite reference.")
  @JsonProperty(BACK_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getBackReference() {
    return backReference;
  }


  @JsonProperty(BACK_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBackReference(URI backReference) {
    this.backReference = backReference;
  }


  public ReferenceDefinitionData sourceObjectName(String sourceObjectName) {
    
    this.sourceObjectName = sourceObjectName;
    return this;
  }

   /**
   * The name of the target object.
   * @return sourceObjectName
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the target object.")
  @JsonProperty(SOURCE_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSourceObjectName() {
    return sourceObjectName;
  }


  @JsonProperty(SOURCE_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSourceObjectName(String sourceObjectName) {
    this.sourceObjectName = sourceObjectName;
  }


  public ReferenceDefinitionData propertyPath(String propertyPath) {
    
    this.propertyPath = propertyPath;
    return this;
  }

   /**
   * The descriptor of a property in a domain object. If there is a simple property then we have only the path. The path is a navigation path to identify the property in the object or in its contained objects. The path can be \&quot;parent\&quot; if the parent property is directly a property inside the object. It can be myContained/parent if it is the propery of the myContained object. The property must be an uri or unique identifier to be able to  access the object directly by its value. If we have an array the the array path contains the path of the array property in the same way. The array must contains uri / identifier values. 
   * @return propertyPath
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The descriptor of a property in a domain object. If there is a simple property then we have only the path. The path is a navigation path to identify the property in the object or in its contained objects. The path can be \"parent\" if the parent property is directly a property inside the object. It can be myContained/parent if it is the propery of the myContained object. The property must be an uri or unique identifier to be able to  access the object directly by its value. If we have an array the the array path contains the path of the array property in the same way. The array must contains uri / identifier values. ")
  @JsonProperty(PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPropertyPath() {
    return propertyPath;
  }


  @JsonProperty(PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPropertyPath(String propertyPath) {
    this.propertyPath = propertyPath;
  }


  public ReferenceDefinitionData targetObjectName(String targetObjectName) {
    
    this.targetObjectName = targetObjectName;
    return this;
  }

   /**
   * The name of the target object.
   * @return targetObjectName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the target object.")
  @JsonProperty(TARGET_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTargetObjectName() {
    return targetObjectName;
  }


  @JsonProperty(TARGET_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetObjectName(String targetObjectName) {
    this.targetObjectName = targetObjectName;
  }


  public ReferenceDefinitionData targetValueSet(URI targetValueSet) {
    
    this.targetValueSet = targetValueSet;
    return this;
  }

   /**
   * If the given reference points to a value set then this uri contains the reference.
   * @return targetValueSet
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "If the given reference points to a value set then this uri contains the reference.")
  @JsonProperty(TARGET_VALUE_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getTargetValueSet() {
    return targetValueSet;
  }


  @JsonProperty(TARGET_VALUE_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetValueSet(URI targetValueSet) {
    this.targetValueSet = targetValueSet;
  }


  public ReferenceDefinitionData aggregation(AggregationKind aggregation) {
    
    this.aggregation = aggregation;
    return this;
  }

   /**
   * Get aggregation
   * @return aggregation
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AggregationKind getAggregation() {
    return aggregation;
  }


  @JsonProperty(AGGREGATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAggregation(AggregationKind aggregation) {
    this.aggregation = aggregation;
  }


  public ReferenceDefinitionData propertyKind(ReferencePropertyKind propertyKind) {
    
    this.propertyKind = propertyKind;
    return this;
  }

   /**
   * Get propertyKind
   * @return propertyKind
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReferencePropertyKind getPropertyKind() {
    return propertyKind;
  }


  @JsonProperty(PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropertyKind(ReferencePropertyKind propertyKind) {
    this.propertyKind = propertyKind;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceDefinitionData referenceDefinitionData = (ReferenceDefinitionData) o;
    return Objects.equals(this.uri, referenceDefinitionData.uri) &&
        Objects.equals(this.backReference, referenceDefinitionData.backReference) &&
        Objects.equals(this.sourceObjectName, referenceDefinitionData.sourceObjectName) &&
        Objects.equals(this.propertyPath, referenceDefinitionData.propertyPath) &&
        Objects.equals(this.targetObjectName, referenceDefinitionData.targetObjectName) &&
        Objects.equals(this.targetValueSet, referenceDefinitionData.targetValueSet) &&
        Objects.equals(this.aggregation, referenceDefinitionData.aggregation) &&
        Objects.equals(this.propertyKind, referenceDefinitionData.propertyKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, backReference, sourceObjectName, propertyPath, targetObjectName, targetValueSet, aggregation, propertyKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceDefinitionData {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    backReference: ").append(toIndentedString(backReference)).append("\n");
    sb.append("    sourceObjectName: ").append(toIndentedString(sourceObjectName)).append("\n");
    sb.append("    propertyPath: ").append(toIndentedString(propertyPath)).append("\n");
    sb.append("    targetObjectName: ").append(toIndentedString(targetObjectName)).append("\n");
    sb.append("    targetValueSet: ").append(toIndentedString(targetValueSet)).append("\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    propertyKind: ").append(toIndentedString(propertyKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

