/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The change of a property with the path as an identifier. The old value and the new value is also available as Object but we need to handle it as String after a serialization and deserialization. 
 */
@ApiModel(description = "The change of a property with the path as an identifier. The old value and the new value is also available as Object but we need to handle it as String after a serialization and deserialization. ")
@JsonPropertyOrder({
  PropertyChangeData.PATH,
  PropertyChangeData.OLD_VALUE,
  PropertyChangeData.NEW_VALUE
})
@JsonTypeName("PropertyChangeData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PropertyChangeData {
  public static final String PATH = "path";
  private String path;

  public static final String OLD_VALUE = "oldValue";
  private Object oldValue;

  public static final String NEW_VALUE = "newValue";
  private Object newValue;

  public PropertyChangeData() { 
  }

  public PropertyChangeData path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * The path identify the given property inside the object.
   * @return path
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The path identify the given property inside the object.")
  @JsonProperty(PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPath() {
    return path;
  }


  @JsonProperty(PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPath(String path) {
    this.path = path;
  }


  public PropertyChangeData oldValue(Object oldValue) {
    
    this.oldValue = oldValue;
    return this;
  }

   /**
   * Get oldValue
   * @return oldValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(OLD_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getOldValue() {
    return oldValue;
  }


  @JsonProperty(OLD_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOldValue(Object oldValue) {
    this.oldValue = oldValue;
  }


  public PropertyChangeData newValue(Object newValue) {
    
    this.newValue = newValue;
    return this;
  }

   /**
   * Get newValue
   * @return newValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(NEW_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getNewValue() {
    return newValue;
  }


  @JsonProperty(NEW_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNewValue(Object newValue) {
    this.newValue = newValue;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyChangeData propertyChangeData = (PropertyChangeData) o;
    return Objects.equals(this.path, propertyChangeData.path) &&
        Objects.equals(this.oldValue, propertyChangeData.oldValue) &&
        Objects.equals(this.newValue, propertyChangeData.newValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, oldValue, newValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyChangeData {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    oldValue: ").append(toIndentedString(oldValue)).append("\n");
    sb.append("    newValue: ").append(toIndentedString(newValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

