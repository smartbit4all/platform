/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.smartbit4all.api.object.bean.ObjectChangeData;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The change of a reference in and object as another object change. 
 */
@ApiModel(description = "The change of a reference in and object as another object change. ")
@JsonPropertyOrder({
  ReferenceChangeData.PATH,
  ReferenceChangeData.OBJECT_CHANGE
})
@JsonTypeName("ReferenceChangeData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReferenceChangeData {
  public static final String PATH = "path";
  private String path;

  public static final String OBJECT_CHANGE = "objectChange";
  private ObjectChangeData objectChange;

  public ReferenceChangeData() { 
  }

  public ReferenceChangeData path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * The path identify the given property inside the object.
   * @return path
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The path identify the given property inside the object.")
  @JsonProperty(PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPath() {
    return path;
  }


  @JsonProperty(PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPath(String path) {
    this.path = path;
  }


  public ReferenceChangeData objectChange(ObjectChangeData objectChange) {
    
    this.objectChange = objectChange;
    return this;
  }

   /**
   * Get objectChange
   * @return objectChange
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(OBJECT_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ObjectChangeData getObjectChange() {
    return objectChange;
  }


  @JsonProperty(OBJECT_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setObjectChange(ObjectChangeData objectChange) {
    this.objectChange = objectChange;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceChangeData referenceChangeData = (ReferenceChangeData) o;
    return Objects.equals(this.path, referenceChangeData.path) &&
        Objects.equals(this.objectChange, referenceChangeData.objectChange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, objectChange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceChangeData {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    objectChange: ").append(toIndentedString(objectChange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

