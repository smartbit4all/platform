/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.smartbit4all.api.object.bean.TableDataContentHeader;
import org.smartbit4all.api.object.bean.TableDataContentPage;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This object is a table data with column definitions as header and rows. The rows are map of objects with the property names defined in the header. 
 */
@ApiModel(description = "This object is a table data with column definitions as header and rows. The rows are map of objects with the property names defined in the header. ")
@JsonPropertyOrder({
  TableDataContent.HEADER,
  TableDataContent.PAGE
})
@JsonTypeName("TableDataContent")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TableDataContent {
  public static final String HEADER = "header";
  private TableDataContentHeader header;

  public static final String PAGE = "page";
  private TableDataContentPage page;

  public TableDataContent() { 
  }

  public TableDataContent header(TableDataContentHeader header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(HEADER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TableDataContentHeader getHeader() {
    return header;
  }


  @JsonProperty(HEADER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeader(TableDataContentHeader header) {
    this.header = header;
  }


  public TableDataContent page(TableDataContentPage page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(PAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TableDataContentPage getPage() {
    return page;
  }


  @JsonProperty(PAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPage(TableDataContentPage page) {
    this.page = page;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableDataContent tableDataContent = (TableDataContent) o;
    return Objects.equals(this.header, tableDataContent.header) &&
        Objects.equals(this.page, tableDataContent.page);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, page);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableDataContent {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

