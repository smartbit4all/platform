/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.object.bean.ObjectPropertyMapping;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This is a mapping definition that describes the mapping between two domain object. 
 */
@ApiModel(description = "This is a mapping definition that describes the mapping between two domain object. ")
@JsonPropertyOrder({
  ObjectMappingDefinition.FROM_TYPE_QUALIFIED_NAME,
  ObjectMappingDefinition.TO_TYPE_QUALIFIED_NAME,
  ObjectMappingDefinition.MAPPINGS
})
@JsonTypeName("ObjectMappingDefinition")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectMappingDefinition {
  public static final String FROM_TYPE_QUALIFIED_NAME = "fromTypeQualifiedName";
  private String fromTypeQualifiedName;

  public static final String TO_TYPE_QUALIFIED_NAME = "toTypeQualifiedName";
  private String toTypeQualifiedName;

  public static final String MAPPINGS = "mappings";
  private List<ObjectPropertyMapping> mappings = new ArrayList<>();

  public ObjectMappingDefinition() { 
  }

  public ObjectMappingDefinition fromTypeQualifiedName(String fromTypeQualifiedName) {
    
    this.fromTypeQualifiedName = fromTypeQualifiedName;
    return this;
  }

   /**
   * Get fromTypeQualifiedName
   * @return fromTypeQualifiedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(FROM_TYPE_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromTypeQualifiedName() {
    return fromTypeQualifiedName;
  }


  @JsonProperty(FROM_TYPE_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromTypeQualifiedName(String fromTypeQualifiedName) {
    this.fromTypeQualifiedName = fromTypeQualifiedName;
  }


  public ObjectMappingDefinition toTypeQualifiedName(String toTypeQualifiedName) {
    
    this.toTypeQualifiedName = toTypeQualifiedName;
    return this;
  }

   /**
   * Get toTypeQualifiedName
   * @return toTypeQualifiedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(TO_TYPE_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToTypeQualifiedName() {
    return toTypeQualifiedName;
  }


  @JsonProperty(TO_TYPE_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToTypeQualifiedName(String toTypeQualifiedName) {
    this.toTypeQualifiedName = toTypeQualifiedName;
  }


  public ObjectMappingDefinition mappings(List<ObjectPropertyMapping> mappings) {
    
    this.mappings = mappings;
    return this;
  }

  public ObjectMappingDefinition addMappingsItem(ObjectPropertyMapping mappingsItem) {
    this.mappings.add(mappingsItem);
    return this;
  }

   /**
   * Get mappings
   * @return mappings
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(MAPPINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObjectPropertyMapping> getMappings() {
    return mappings;
  }


  @JsonProperty(MAPPINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMappings(List<ObjectPropertyMapping> mappings) {
    this.mappings = mappings;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectMappingDefinition objectMappingDefinition = (ObjectMappingDefinition) o;
    return Objects.equals(this.fromTypeQualifiedName, objectMappingDefinition.fromTypeQualifiedName) &&
        Objects.equals(this.toTypeQualifiedName, objectMappingDefinition.toTypeQualifiedName) &&
        Objects.equals(this.mappings, objectMappingDefinition.mappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromTypeQualifiedName, toTypeQualifiedName, mappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectMappingDefinition {\n");
    sb.append("    fromTypeQualifiedName: ").append(toIndentedString(fromTypeQualifiedName)).append("\n");
    sb.append("    toTypeQualifiedName: ").append(toIndentedString(toTypeQualifiedName)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

