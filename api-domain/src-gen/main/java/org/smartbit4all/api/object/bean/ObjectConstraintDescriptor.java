/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.invocation.bean.InvocationRequestDefinition;
import org.smartbit4all.api.object.bean.LangString;
import org.smartbit4all.api.object.bean.ObjectPropertyResolverContext;
import org.smartbit4all.api.view.bean.ComponentConstraint;
import org.smartbit4all.api.view.bean.UiActionConstraint;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * There can be different kind of constraints and they can be bound to events / related values. The event must be managed by the page or api logic of the given object. The values can be used to identify the situation when the given constraint must be applied. 
 */
@ApiModel(description = "There can be different kind of constraints and they can be bound to events / related values. The event must be managed by the page or api logic of the given object. The values can be used to identify the situation when the given constraint must be applied. ")
@JsonPropertyOrder({
  ObjectConstraintDescriptor.NAME,
  ObjectConstraintDescriptor.WHEN,
  ObjectConstraintDescriptor.CONDITION,
  ObjectConstraintDescriptor.CONTEXTS,
  ObjectConstraintDescriptor.PREDICATES,
  ObjectConstraintDescriptor.COMPONENT_CONSTRAINTS,
  ObjectConstraintDescriptor.ACTION_CONSTRAINTS,
  ObjectConstraintDescriptor.VALIDATION_RULES,
  ObjectConstraintDescriptor.DISPLAY_NAME
})
@JsonTypeName("ObjectConstraintDescriptor")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectConstraintDescriptor {
  public static final String NAME = "name";
  private String name;

  /**
   * Gets or Sets when
   */
  public enum WhenEnum {
    EVENT("event"),
    
    CONDITION("condition");

    private String value;

    WhenEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WhenEnum fromValue(String value) {
      for (WhenEnum b : WhenEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String WHEN = "when";
  private WhenEnum when;

  public static final String CONDITION = "condition";
  private String condition;

  public static final String CONTEXTS = "contexts";
  private ObjectPropertyResolverContext contexts;

  public static final String PREDICATES = "predicates";
  private List<InvocationRequestDefinition> predicates = new ArrayList<>();

  public static final String COMPONENT_CONSTRAINTS = "componentConstraints";
  private List<ComponentConstraint> componentConstraints = new ArrayList<>();

  public static final String ACTION_CONSTRAINTS = "actionConstraints";
  private List<UiActionConstraint> actionConstraints = new ArrayList<>();

  public static final String VALIDATION_RULES = "validationRules";
  private List<String> validationRules = new ArrayList<>();

  public static final String DISPLAY_NAME = "displayName";
  private LangString displayName;

  public ObjectConstraintDescriptor() { 
  }

  public ObjectConstraintDescriptor name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ObjectConstraintDescriptor when(WhenEnum when) {
    
    this.when = when;
    return this;
  }

   /**
   * Get when
   * @return when
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(WHEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WhenEnum getWhen() {
    return when;
  }


  @JsonProperty(WHEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWhen(WhenEnum when) {
    this.when = when;
  }


  public ObjectConstraintDescriptor condition(String condition) {
    
    this.condition = condition;
    return this;
  }

   /**
   * The condition to evaluate if the given constraint has to be enforced on the object. It can be a script that can be evaluated based on the extended object. 
   * @return condition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The condition to evaluate if the given constraint has to be enforced on the object. It can be a script that can be evaluated based on the extended object. ")
  @JsonProperty(CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCondition() {
    return condition;
  }


  @JsonProperty(CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCondition(String condition) {
    this.condition = condition;
  }


  public ObjectConstraintDescriptor contexts(ObjectPropertyResolverContext contexts) {
    
    this.contexts = contexts;
    return this;
  }

   /**
   * Get contexts
   * @return contexts
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(CONTEXTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ObjectPropertyResolverContext getContexts() {
    return contexts;
  }


  @JsonProperty(CONTEXTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContexts(ObjectPropertyResolverContext contexts) {
    this.contexts = contexts;
  }


  public ObjectConstraintDescriptor predicates(List<InvocationRequestDefinition> predicates) {
    
    this.predicates = predicates;
    return this;
  }

  public ObjectConstraintDescriptor addPredicatesItem(InvocationRequestDefinition predicatesItem) {
    this.predicates.add(predicatesItem);
    return this;
  }

   /**
   * Get predicates
   * @return predicates
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(PREDICATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<InvocationRequestDefinition> getPredicates() {
    return predicates;
  }


  @JsonProperty(PREDICATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPredicates(List<InvocationRequestDefinition> predicates) {
    this.predicates = predicates;
  }


  public ObjectConstraintDescriptor componentConstraints(List<ComponentConstraint> componentConstraints) {
    
    this.componentConstraints = componentConstraints;
    return this;
  }

  public ObjectConstraintDescriptor addComponentConstraintsItem(ComponentConstraint componentConstraintsItem) {
    this.componentConstraints.add(componentConstraintsItem);
    return this;
  }

   /**
   * The component constraints in precedence order. They are evaluated in this order so a later constraint can overwrite the previous constraint.
   * @return componentConstraints
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The component constraints in precedence order. They are evaluated in this order so a later constraint can overwrite the previous constraint.")
  @JsonProperty(COMPONENT_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ComponentConstraint> getComponentConstraints() {
    return componentConstraints;
  }


  @JsonProperty(COMPONENT_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setComponentConstraints(List<ComponentConstraint> componentConstraints) {
    this.componentConstraints = componentConstraints;
  }


  public ObjectConstraintDescriptor actionConstraints(List<UiActionConstraint> actionConstraints) {
    
    this.actionConstraints = actionConstraints;
    return this;
  }

  public ObjectConstraintDescriptor addActionConstraintsItem(UiActionConstraint actionConstraintsItem) {
    this.actionConstraints.add(actionConstraintsItem);
    return this;
  }

   /**
   * The action constraints in precedence order. They are evaluated in this order so a later constraint can overwrite the previous constraint.
   * @return actionConstraints
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The action constraints in precedence order. They are evaluated in this order so a later constraint can overwrite the previous constraint.")
  @JsonProperty(ACTION_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<UiActionConstraint> getActionConstraints() {
    return actionConstraints;
  }


  @JsonProperty(ACTION_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActionConstraints(List<UiActionConstraint> actionConstraints) {
    this.actionConstraints = actionConstraints;
  }


  public ObjectConstraintDescriptor validationRules(List<String> validationRules) {
    
    this.validationRules = validationRules;
    return this;
  }

  public ObjectConstraintDescriptor addValidationRulesItem(String validationRulesItem) {
    this.validationRules.add(validationRulesItem);
    return this;
  }

   /**
   * The validation rules must be checked before an editing is finalized. The validation result is part of the view.
   * @return validationRules
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The validation rules must be checked before an editing is finalized. The validation result is part of the view.")
  @JsonProperty(VALIDATION_RULES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getValidationRules() {
    return validationRules;
  }


  @JsonProperty(VALIDATION_RULES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValidationRules(List<String> validationRules) {
    this.validationRules = validationRules;
  }


  public ObjectConstraintDescriptor displayName(LangString displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LangString getDisplayName() {
    return displayName;
  }


  @JsonProperty(DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(LangString displayName) {
    this.displayName = displayName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectConstraintDescriptor objectConstraintDescriptor = (ObjectConstraintDescriptor) o;
    return Objects.equals(this.name, objectConstraintDescriptor.name) &&
        Objects.equals(this.when, objectConstraintDescriptor.when) &&
        Objects.equals(this.condition, objectConstraintDescriptor.condition) &&
        Objects.equals(this.contexts, objectConstraintDescriptor.contexts) &&
        Objects.equals(this.predicates, objectConstraintDescriptor.predicates) &&
        Objects.equals(this.componentConstraints, objectConstraintDescriptor.componentConstraints) &&
        Objects.equals(this.actionConstraints, objectConstraintDescriptor.actionConstraints) &&
        Objects.equals(this.validationRules, objectConstraintDescriptor.validationRules) &&
        Objects.equals(this.displayName, objectConstraintDescriptor.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, when, condition, contexts, predicates, componentConstraints, actionConstraints, validationRules, displayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectConstraintDescriptor {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    when: ").append(toIndentedString(when)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    contexts: ").append(toIndentedString(contexts)).append("\n");
    sb.append("    predicates: ").append(toIndentedString(predicates)).append("\n");
    sb.append("    componentConstraints: ").append(toIndentedString(componentConstraints)).append("\n");
    sb.append("    actionConstraints: ").append(toIndentedString(actionConstraints)).append("\n");
    sb.append("    validationRules: ").append(toIndentedString(validationRules)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

