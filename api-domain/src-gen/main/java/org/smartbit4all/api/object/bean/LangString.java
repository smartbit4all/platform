/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * A localisation aware string with its localised values. 
 */
@ApiModel(description = "A localisation aware string with its localised values. ")
@JsonPropertyOrder({
  LangString.DEFAULT_VALUE,
  LangString.VALUE_BY_LOCALE
})
@JsonTypeName("LangString")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LangString {
  public static final String DEFAULT_VALUE = "defaultValue";
  private String defaultValue;

  public static final String VALUE_BY_LOCALE = "valueByLocale";
  private Map<String, String> valueByLocale = null;

  public LangString() { 
  }

  public LangString defaultValue(String defaultValue) {
    
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(DEFAULT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultValue() {
    return defaultValue;
  }


  @JsonProperty(DEFAULT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public LangString valueByLocale(Map<String, String> valueByLocale) {
    
    this.valueByLocale = valueByLocale;
    return this;
  }

  public LangString putValueByLocaleItem(String key, String valueByLocaleItem) {
    if (this.valueByLocale == null) {
      this.valueByLocale = new HashMap<>();
    }
    this.valueByLocale.put(key, valueByLocaleItem);
    return this;
  }

   /**
   * Get valueByLocale
   * @return valueByLocale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(VALUE_BY_LOCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getValueByLocale() {
    return valueByLocale;
  }


  @JsonProperty(VALUE_BY_LOCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueByLocale(Map<String, String> valueByLocale) {
    this.valueByLocale = valueByLocale;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LangString langString = (LangString) o;
    return Objects.equals(this.defaultValue, langString.defaultValue) &&
        Objects.equals(this.valueByLocale, langString.valueByLocale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultValue, valueByLocale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LangString {\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    valueByLocale: ").append(toIndentedString(valueByLocale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

