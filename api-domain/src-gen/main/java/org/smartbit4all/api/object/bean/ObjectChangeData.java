/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.object.bean.PropertyChangeData;
import org.smartbit4all.api.object.bean.ReferenceChangeData;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The changes between two object structure. The change is based on the property names and computed by the value map of the object. 
 */
@ApiModel(description = "The changes between two object structure. The change is based on the property names and computed by the value map of the object. ")
@JsonPropertyOrder({
  ObjectChangeData.TYPE_CLASS,
  ObjectChangeData.PROPERTIES,
  ObjectChangeData.REFERENCES
})
@JsonTypeName("ObjectChangeData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectChangeData {
  public static final String TYPE_CLASS = "typeClass";
  private String typeClass;

  public static final String PROPERTIES = "properties";
  private List<PropertyChangeData> properties = new ArrayList<>();

  public static final String REFERENCES = "references";
  private List<ReferenceChangeData> references = new ArrayList<>();

  public ObjectChangeData() { 
  }

  public ObjectChangeData typeClass(String typeClass) {
    
    this.typeClass = typeClass;
    return this;
  }

   /**
   * The name of the type class if exists.
   * @return typeClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the type class if exists.")
  @JsonProperty(TYPE_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeClass() {
    return typeClass;
  }


  @JsonProperty(TYPE_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeClass(String typeClass) {
    this.typeClass = typeClass;
  }


  public ObjectChangeData properties(List<PropertyChangeData> properties) {
    
    this.properties = properties;
    return this;
  }

  public ObjectChangeData addPropertiesItem(PropertyChangeData propertiesItem) {
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PropertyChangeData> getProperties() {
    return properties;
  }


  @JsonProperty(PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProperties(List<PropertyChangeData> properties) {
    this.properties = properties;
  }


  public ObjectChangeData references(List<ReferenceChangeData> references) {
    
    this.references = references;
    return this;
  }

  public ObjectChangeData addReferencesItem(ReferenceChangeData referencesItem) {
    this.references.add(referencesItem);
    return this;
  }

   /**
   * Get references
   * @return references
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(REFERENCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ReferenceChangeData> getReferences() {
    return references;
  }


  @JsonProperty(REFERENCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferences(List<ReferenceChangeData> references) {
    this.references = references;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectChangeData objectChangeData = (ObjectChangeData) o;
    return Objects.equals(this.typeClass, objectChangeData.typeClass) &&
        Objects.equals(this.properties, objectChangeData.properties) &&
        Objects.equals(this.references, objectChangeData.references);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeClass, properties, references);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectChangeData {\n");
    sb.append("    typeClass: ").append(toIndentedString(typeClass)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

