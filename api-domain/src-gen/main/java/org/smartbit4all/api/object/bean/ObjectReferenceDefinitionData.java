/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.smartbit4all.api.object.bean.PropertyKindEnum;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The object reference is one end of the reference let it be source or target. It identifies the object and the propety. This object is  contained by the ReferenceDefinitionData. 
 */
@ApiModel(description = "The object reference is one end of the reference let it be source or target. It identifies the object and the propety. This object is  contained by the ReferenceDefinitionData. ")
@JsonPropertyOrder({
  ObjectReferenceDefinitionData.OBJECT_NAME,
  ObjectReferenceDefinitionData.PROPERTY_PATH,
  ObjectReferenceDefinitionData.PROPERTY_KIND
})
@JsonTypeName("ObjectReferenceDefinitionData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectReferenceDefinitionData {
  public static final String OBJECT_NAME = "objectName";
  private String objectName;

  public static final String PROPERTY_PATH = "propertyPath";
  private String propertyPath;

  public static final String PROPERTY_KIND = "propertyKind";
  private PropertyKindEnum propertyKind;


  public ObjectReferenceDefinitionData objectName(String objectName) {
    
    this.objectName = objectName;
    return this;
  }

   /**
   * The qualified name of the object like com.smartbit4all.domain.MyObject
   * @return objectName
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The qualified name of the object like com.smartbit4all.domain.MyObject")
  @JsonProperty(OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getObjectName() {
    return objectName;
  }


  @JsonProperty(OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObjectName(String objectName) {
    this.objectName = objectName;
  }


  public ObjectReferenceDefinitionData propertyPath(String propertyPath) {
    
    this.propertyPath = propertyPath;
    return this;
  }

   /**
   * The descriptor of a property in a domain object. If there is a simple property then we have only the path. The path is a navigation path to identify the property in the object or in its contained objects. The path can be \&quot;parent\&quot; if the parent property is directly a property inside the object. It can be myContained/parent if it is the propery of the myContained object. The property must be an uri or unique identifier to be able to  access the object directly by its value. If we have an array the the array path contains the path of the array property in the same way. The array must contains uri / identifier values. 
   * @return propertyPath
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The descriptor of a property in a domain object. If there is a simple property then we have only the path. The path is a navigation path to identify the property in the object or in its contained objects. The path can be \"parent\" if the parent property is directly a property inside the object. It can be myContained/parent if it is the propery of the myContained object. The property must be an uri or unique identifier to be able to  access the object directly by its value. If we have an array the the array path contains the path of the array property in the same way. The array must contains uri / identifier values. ")
  @JsonProperty(PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPropertyPath() {
    return propertyPath;
  }


  @JsonProperty(PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPropertyPath(String propertyPath) {
    this.propertyPath = propertyPath;
  }


  public ObjectReferenceDefinitionData propertyKind(PropertyKindEnum propertyKind) {
    
    this.propertyKind = propertyKind;
    return this;
  }

   /**
   * Get propertyKind
   * @return propertyKind
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PropertyKindEnum getPropertyKind() {
    return propertyKind;
  }


  @JsonProperty(PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPropertyKind(PropertyKindEnum propertyKind) {
    this.propertyKind = propertyKind;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectReferenceDefinitionData objectReferenceDefinitionData = (ObjectReferenceDefinitionData) o;
    return Objects.equals(this.objectName, objectReferenceDefinitionData.objectName) &&
        Objects.equals(this.propertyPath, objectReferenceDefinitionData.propertyPath) &&
        Objects.equals(this.propertyKind, objectReferenceDefinitionData.propertyKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectName, propertyPath, propertyKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectReferenceDefinitionData {\n");
    sb.append("    objectName: ").append(toIndentedString(objectName)).append("\n");
    sb.append("    propertyPath: ").append(toIndentedString(propertyPath)).append("\n");
    sb.append("    propertyKind: ").append(toIndentedString(propertyKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

