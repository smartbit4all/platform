/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import org.smartbit4all.api.object.bean.ObjectHistoryIteratorData;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This object represents the rage of an object history. The history can be a huge list where the uris of the history items computed from the original object uri and the version number. It must be easy to compute the version uri because there is no single object that contains all the histories. The history range can be used to store our iteration while we are walking on the history to display or analyze it. If we create a list for iterating over the history then this object can be the model of the given page. 
 */
@ApiModel(description = "This object represents the rage of an object history. The history can be a huge list where the uris of the history items computed from the original object uri and the version number. It must be easy to compute the version uri because there is no single object that contains all the histories. The history range can be used to store our iteration while we are walking on the history to display or analyze it. If we create a list for iterating over the history then this object can be the model of the given page. ")
@JsonPropertyOrder({
  ObjectHistoryRangeData.OBJECT_URI,
  ObjectHistoryRangeData.LOWER_BOUND,
  ObjectHistoryRangeData.UPPER_BOUND
})
@JsonTypeName("ObjectHistoryRangeData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectHistoryRangeData {
  public static final String OBJECT_URI = "objectUri";
  private URI objectUri;

  public static final String LOWER_BOUND = "lowerBound";
  private ObjectHistoryIteratorData lowerBound;

  public static final String UPPER_BOUND = "upperBound";
  private ObjectHistoryIteratorData upperBound;

  public ObjectHistoryRangeData() { 
  }

  public ObjectHistoryRangeData objectUri(URI objectUri) {
    
    this.objectUri = objectUri;
    return this;
  }

   /**
   * The uri (let it be latest or version) of the object. The range refers its history.
   * @return objectUri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The uri (let it be latest or version) of the object. The range refers its history.")
  @JsonProperty(OBJECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getObjectUri() {
    return objectUri;
  }


  @JsonProperty(OBJECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setObjectUri(URI objectUri) {
    this.objectUri = objectUri;
  }


  public ObjectHistoryRangeData lowerBound(ObjectHistoryIteratorData lowerBound) {
    
    this.lowerBound = lowerBound;
    return this;
  }

   /**
   * Get lowerBound
   * @return lowerBound
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(LOWER_BOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ObjectHistoryIteratorData getLowerBound() {
    return lowerBound;
  }


  @JsonProperty(LOWER_BOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLowerBound(ObjectHistoryIteratorData lowerBound) {
    this.lowerBound = lowerBound;
  }


  public ObjectHistoryRangeData upperBound(ObjectHistoryIteratorData upperBound) {
    
    this.upperBound = upperBound;
    return this;
  }

   /**
   * Get upperBound
   * @return upperBound
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(UPPER_BOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ObjectHistoryIteratorData getUpperBound() {
    return upperBound;
  }


  @JsonProperty(UPPER_BOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpperBound(ObjectHistoryIteratorData upperBound) {
    this.upperBound = upperBound;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectHistoryRangeData objectHistoryRangeData = (ObjectHistoryRangeData) o;
    return Objects.equals(this.objectUri, objectHistoryRangeData.objectUri) &&
        Objects.equals(this.lowerBound, objectHistoryRangeData.lowerBound) &&
        Objects.equals(this.upperBound, objectHistoryRangeData.upperBound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectUri, lowerBound, upperBound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectHistoryRangeData {\n");
    sb.append("    objectUri: ").append(toIndentedString(objectUri)).append("\n");
    sb.append("    lowerBound: ").append(toIndentedString(lowerBound)).append("\n");
    sb.append("    upperBound: ").append(toIndentedString(upperBound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

