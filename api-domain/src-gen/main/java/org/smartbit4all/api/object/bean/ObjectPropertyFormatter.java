/*
 * Object api
 * The object api responsible for the domain object meta information including the object definitions and the relations among them. These objects are stored because the modules can contribute. The modules have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data. The algorithms are running on the ObjectApi cache refreshed periodically. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.object.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.object.bean.ObjectPropertyFormatterParameter;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This object define a format string and a type of formatter to use. By default the formatter is a Java MessageFormat but later on it can use different formatters if it is necessary. 
 */
@ApiModel(description = "This object define a format string and a type of formatter to use. By default the formatter is a Java MessageFormat but later on it can use different formatters if it is necessary. ")
@JsonPropertyOrder({
  ObjectPropertyFormatter.FORMAT_STRING,
  ObjectPropertyFormatter.PARAMETERS,
  ObjectPropertyFormatter.REQUIRED_PROPERTIES
})
@JsonTypeName("ObjectPropertyFormatter")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectPropertyFormatter {
  public static final String FORMAT_STRING = "formatString";
  private String formatString;

  public static final String PARAMETERS = "parameters";
  private List<ObjectPropertyFormatterParameter> parameters = new ArrayList<>();

  public static final String REQUIRED_PROPERTIES = "requiredProperties";
  private List<URI> requiredProperties = new ArrayList<>();

  public ObjectPropertyFormatter() { 
  }

  public ObjectPropertyFormatter formatString(String formatString) {
    
    this.formatString = formatString;
    return this;
  }

   /**
   * The format string by the syntactical rules of the formatter. 
   * @return formatString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The format string by the syntactical rules of the formatter. ")
  @JsonProperty(FORMAT_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFormatString() {
    return formatString;
  }


  @JsonProperty(FORMAT_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormatString(String formatString) {
    this.formatString = formatString;
  }


  public ObjectPropertyFormatter parameters(List<ObjectPropertyFormatterParameter> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public ObjectPropertyFormatter addParametersItem(ObjectPropertyFormatterParameter parametersItem) {
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * The properties in order bound to the given parameter. 
   * @return parameters
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The properties in order bound to the given parameter. ")
  @JsonProperty(PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObjectPropertyFormatterParameter> getParameters() {
    return parameters;
  }


  @JsonProperty(PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParameters(List<ObjectPropertyFormatterParameter> parameters) {
    this.parameters = parameters;
  }


  public ObjectPropertyFormatter requiredProperties(List<URI> requiredProperties) {
    
    this.requiredProperties = requiredProperties;
    return this;
  }

  public ObjectPropertyFormatter addRequiredPropertiesItem(URI requiredPropertiesItem) {
    this.requiredProperties.add(requiredPropertiesItem);
    return this;
  }

   /**
   * Properties (referenced as ObjectPropertyDescriptor) which are needed to be present to run this formatter.
   * @return requiredProperties
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Properties (referenced as ObjectPropertyDescriptor) which are needed to be present to run this formatter.")
  @JsonProperty(REQUIRED_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<URI> getRequiredProperties() {
    return requiredProperties;
  }


  @JsonProperty(REQUIRED_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequiredProperties(List<URI> requiredProperties) {
    this.requiredProperties = requiredProperties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectPropertyFormatter objectPropertyFormatter = (ObjectPropertyFormatter) o;
    return Objects.equals(this.formatString, objectPropertyFormatter.formatString) &&
        Objects.equals(this.parameters, objectPropertyFormatter.parameters) &&
        Objects.equals(this.requiredProperties, objectPropertyFormatter.requiredProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formatString, parameters, requiredProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectPropertyFormatter {\n");
    sb.append("    formatString: ").append(toIndentedString(formatString)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    requiredProperties: ").append(toIndentedString(requiredProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

