/*
 * DatabaseDefinition api
 * The relational database schema definition with tables, columns, indices, primary and foreign keys. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.databasedefinition.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.databasedefinition.bean.DatabaseKind;
import org.smartbit4all.api.databasedefinition.bean.TableDefinition;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The meta of a whole database. Contains all the tables defined in the database. If it is the result of a comparision then the alter operation codes are set. We can use this model to render DDL scripts or to commit the changes directly into the database. 
 */
@ApiModel(description = "The meta of a whole database. Contains all the tables defined in the database. If it is the result of a comparision then the alter operation codes are set. We can use this model to render DDL scripts or to commit the changes directly into the database. ")
@JsonPropertyOrder({
  DatabaseDefinition.SCHEMA,
  DatabaseDefinition.VERSION,
  DatabaseDefinition.TABLES,
  DatabaseDefinition.DATABASE_KIND
})
@JsonTypeName("DatabaseDefinition")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DatabaseDefinition {
  public static final String SCHEMA = "schema";
  private String schema;

  public static final String VERSION = "version";
  private String version;

  public static final String TABLES = "tables";
  private List<TableDefinition> tables = new ArrayList<>();

  public static final String DATABASE_KIND = "databaseKind";
  private DatabaseKind databaseKind;

  public DatabaseDefinition() { 
  }

  public DatabaseDefinition schema(String schema) {
    
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSchema() {
    return schema;
  }


  @JsonProperty(SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchema(String schema) {
    this.schema = schema;
  }


  public DatabaseDefinition version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  public DatabaseDefinition tables(List<TableDefinition> tables) {
    
    this.tables = tables;
    return this;
  }

  public DatabaseDefinition addTablesItem(TableDefinition tablesItem) {
    this.tables.add(tablesItem);
    return this;
  }

   /**
   * Get tables
   * @return tables
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(TABLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TableDefinition> getTables() {
    return tables;
  }


  @JsonProperty(TABLES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTables(List<TableDefinition> tables) {
    this.tables = tables;
  }


  public DatabaseDefinition databaseKind(DatabaseKind databaseKind) {
    
    this.databaseKind = databaseKind;
    return this;
  }

   /**
   * Get databaseKind
   * @return databaseKind
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(DATABASE_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DatabaseKind getDatabaseKind() {
    return databaseKind;
  }


  @JsonProperty(DATABASE_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatabaseKind(DatabaseKind databaseKind) {
    this.databaseKind = databaseKind;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseDefinition databaseDefinition = (DatabaseDefinition) o;
    return Objects.equals(this.schema, databaseDefinition.schema) &&
        Objects.equals(this.version, databaseDefinition.version) &&
        Objects.equals(this.tables, databaseDefinition.tables) &&
        Objects.equals(this.databaseKind, databaseDefinition.databaseKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schema, version, tables, databaseKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseDefinition {\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    tables: ").append(toIndentedString(tables)).append("\n");
    sb.append("    databaseKind: ").append(toIndentedString(databaseKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

