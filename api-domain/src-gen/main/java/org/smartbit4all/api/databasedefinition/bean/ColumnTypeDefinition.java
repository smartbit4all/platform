/*
 * DatabaseDefinition api
 * The relational database schema definition with tables, columns, indices, primary and foreign keys. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.databasedefinition.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The descriptor of a databse column type. 
 */
@ApiModel(description = "The descriptor of a databse column type. ")
@JsonPropertyOrder({
  ColumnTypeDefinition.BASE_TYPE,
  ColumnTypeDefinition.LENGTH,
  ColumnTypeDefinition.PRECISION,
  ColumnTypeDefinition.SCALE
})
@JsonTypeName("ColumnTypeDefinition")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ColumnTypeDefinition {
  /**
   * Gets or Sets baseType
   */
  public enum BaseTypeEnum {
    VARCHAR("VARCHAR"),
    
    CHAR("CHAR"),
    
    NUMBER("NUMBER"),
    
    DATE("DATE"),
    
    DATETIME("DATETIME"),
    
    TIME("TIME"),
    
    BLOB("BLOB"),
    
    CLOB("CLOB");

    private String value;

    BaseTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BaseTypeEnum fromValue(String value) {
      for (BaseTypeEnum b : BaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String BASE_TYPE = "baseType";
  private BaseTypeEnum baseType;

  public static final String LENGTH = "length";
  private Integer length;

  public static final String PRECISION = "precision";
  private Integer precision;

  public static final String SCALE = "scale";
  private Integer scale;

  public ColumnTypeDefinition() { 
  }

  public ColumnTypeDefinition baseType(BaseTypeEnum baseType) {
    
    this.baseType = baseType;
    return this;
  }

   /**
   * Get baseType
   * @return baseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(BASE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BaseTypeEnum getBaseType() {
    return baseType;
  }


  @JsonProperty(BASE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaseType(BaseTypeEnum baseType) {
    this.baseType = baseType;
  }


  public ColumnTypeDefinition length(Integer length) {
    
    this.length = length;
    return this;
  }

   /**
   * Get length
   * @return length
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLength() {
    return length;
  }


  @JsonProperty(LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLength(Integer length) {
    this.length = length;
  }


  public ColumnTypeDefinition precision(Integer precision) {
    
    this.precision = precision;
    return this;
  }

   /**
   * Get precision
   * @return precision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(PRECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPrecision() {
    return precision;
  }


  @JsonProperty(PRECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  public ColumnTypeDefinition scale(Integer scale) {
    
    this.scale = scale;
    return this;
  }

   /**
   * Get scale
   * @return scale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getScale() {
    return scale;
  }


  @JsonProperty(SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScale(Integer scale) {
    this.scale = scale;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnTypeDefinition columnTypeDefinition = (ColumnTypeDefinition) o;
    return Objects.equals(this.baseType, columnTypeDefinition.baseType) &&
        Objects.equals(this.length, columnTypeDefinition.length) &&
        Objects.equals(this.precision, columnTypeDefinition.precision) &&
        Objects.equals(this.scale, columnTypeDefinition.scale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseType, length, precision, scale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnTypeDefinition {\n");
    sb.append("    baseType: ").append(toIndentedString(baseType)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

