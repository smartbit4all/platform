/*
 * DatabaseDefinition api
 * The relational database schema definition with tables, columns, indices, primary and foreign keys. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.databasedefinition.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.databasedefinition.bean.AlterOperation;
import org.smartbit4all.api.databasedefinition.bean.ColumnDefinition;
import org.smartbit4all.api.databasedefinition.bean.ForeignKeyDefinition;
import org.smartbit4all.api.databasedefinition.bean.IndexDefinition;
import org.smartbit4all.api.databasedefinition.bean.PrimaryKeyDefinition;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The meta of a database table. As a result of the comparision it can have operationCode that defines if it is a tabel to  create, alter or delete. 
 */
@ApiModel(description = "The meta of a database table. As a result of the comparision it can have operationCode that defines if it is a tabel to  create, alter or delete. ")
@JsonPropertyOrder({
  TableDefinition.SCHEMA,
  TableDefinition.NAME,
  TableDefinition.SHORT_NAME,
  TableDefinition.COMMENT,
  TableDefinition.COLUMNS,
  TableDefinition.INDEXES,
  TableDefinition.FOREIGN_KEYS,
  TableDefinition.PRIMARY_KEY,
  TableDefinition.OPERATION
})
@JsonTypeName("TableDefinition")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TableDefinition {
  public static final String SCHEMA = "schema";
  private String schema;

  public static final String NAME = "name";
  private String name;

  public static final String SHORT_NAME = "shortName";
  private String shortName;

  public static final String COMMENT = "comment";
  private String comment;

  public static final String COLUMNS = "columns";
  private List<ColumnDefinition> columns = new ArrayList<>();

  public static final String INDEXES = "indexes";
  private List<IndexDefinition> indexes = new ArrayList<>();

  public static final String FOREIGN_KEYS = "foreignKeys";
  private List<ForeignKeyDefinition> foreignKeys = new ArrayList<>();

  public static final String PRIMARY_KEY = "primaryKey";
  private PrimaryKeyDefinition primaryKey;

  public static final String OPERATION = "operation";
  private AlterOperation operation;

  public TableDefinition() { 
  }

  public TableDefinition schema(String schema) {
    
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSchema() {
    return schema;
  }


  @JsonProperty(SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchema(String schema) {
    this.schema = schema;
  }


  public TableDefinition name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public TableDefinition shortName(String shortName) {
    
    this.shortName = shortName;
    return this;
  }

   /**
   * Get shortName
   * @return shortName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(SHORT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShortName() {
    return shortName;
  }


  @JsonProperty(SHORT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public TableDefinition comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComment() {
    return comment;
  }


  @JsonProperty(COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }


  public TableDefinition columns(List<ColumnDefinition> columns) {
    
    this.columns = columns;
    return this;
  }

  public TableDefinition addColumnsItem(ColumnDefinition columnsItem) {
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(COLUMNS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ColumnDefinition> getColumns() {
    return columns;
  }


  @JsonProperty(COLUMNS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setColumns(List<ColumnDefinition> columns) {
    this.columns = columns;
  }


  public TableDefinition indexes(List<IndexDefinition> indexes) {
    
    this.indexes = indexes;
    return this;
  }

  public TableDefinition addIndexesItem(IndexDefinition indexesItem) {
    this.indexes.add(indexesItem);
    return this;
  }

   /**
   * Get indexes
   * @return indexes
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(INDEXES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<IndexDefinition> getIndexes() {
    return indexes;
  }


  @JsonProperty(INDEXES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndexes(List<IndexDefinition> indexes) {
    this.indexes = indexes;
  }


  public TableDefinition foreignKeys(List<ForeignKeyDefinition> foreignKeys) {
    
    this.foreignKeys = foreignKeys;
    return this;
  }

  public TableDefinition addForeignKeysItem(ForeignKeyDefinition foreignKeysItem) {
    this.foreignKeys.add(foreignKeysItem);
    return this;
  }

   /**
   * Get foreignKeys
   * @return foreignKeys
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(FOREIGN_KEYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ForeignKeyDefinition> getForeignKeys() {
    return foreignKeys;
  }


  @JsonProperty(FOREIGN_KEYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setForeignKeys(List<ForeignKeyDefinition> foreignKeys) {
    this.foreignKeys = foreignKeys;
  }


  public TableDefinition primaryKey(PrimaryKeyDefinition primaryKey) {
    
    this.primaryKey = primaryKey;
    return this;
  }

   /**
   * Get primaryKey
   * @return primaryKey
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(PRIMARY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PrimaryKeyDefinition getPrimaryKey() {
    return primaryKey;
  }


  @JsonProperty(PRIMARY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPrimaryKey(PrimaryKeyDefinition primaryKey) {
    this.primaryKey = primaryKey;
  }


  public TableDefinition operation(AlterOperation operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(OPERATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AlterOperation getOperation() {
    return operation;
  }


  @JsonProperty(OPERATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperation(AlterOperation operation) {
    this.operation = operation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableDefinition tableDefinition = (TableDefinition) o;
    return Objects.equals(this.schema, tableDefinition.schema) &&
        Objects.equals(this.name, tableDefinition.name) &&
        Objects.equals(this.shortName, tableDefinition.shortName) &&
        Objects.equals(this.comment, tableDefinition.comment) &&
        Objects.equals(this.columns, tableDefinition.columns) &&
        Objects.equals(this.indexes, tableDefinition.indexes) &&
        Objects.equals(this.foreignKeys, tableDefinition.foreignKeys) &&
        Objects.equals(this.primaryKey, tableDefinition.primaryKey) &&
        Objects.equals(this.operation, tableDefinition.operation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schema, name, shortName, comment, columns, indexes, foreignKeys, primaryKey, operation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableDefinition {\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    indexes: ").append(toIndentedString(indexes)).append("\n");
    sb.append("    foreignKeys: ").append(toIndentedString(foreignKeys)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

