/*
 * DatabaseDefinition api
 * The relational database schema definition with tables, columns, indices, primary and foreign keys. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.databasedefinition.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.databasedefinition.bean.DDLStatementKind;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * A DDL statement that can be a statement on its own and a container statement also. If it is a complex stetament then it has inner statements also. In case of the database level alter script we have create tables as inner statements and in the create table we will have column definitions. 
 */
@ApiModel(description = "A DDL statement that can be a statement on its own and a container statement also. If it is a complex stetament then it has inner statements also. In case of the database level alter script we have create tables as inner statements and in the create table we will have column definitions. ")
@JsonPropertyOrder({
  DDLStatementData.PREFIX,
  DDLStatementData.SUFFIX,
  DDLStatementData.KIND,
  DDLStatementData.INNER_STATEMENTS
})
@JsonTypeName("DDLStatementData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DDLStatementData {
  public static final String PREFIX = "prefix";
  private String prefix;

  public static final String SUFFIX = "suffix";
  private String suffix;

  public static final String KIND = "kind";
  private DDLStatementKind kind;

  public static final String INNER_STATEMENTS = "innerStatements";
  private List<DDLStatementData> innerStatements = new ArrayList<>();

  public DDLStatementData() { 
  }

  public DDLStatementData prefix(String prefix) {
    
    this.prefix = prefix;
    return this;
  }

   /**
   * Get prefix
   * @return prefix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrefix() {
    return prefix;
  }


  @JsonProperty(PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public DDLStatementData suffix(String suffix) {
    
    this.suffix = suffix;
    return this;
  }

   /**
   * Get suffix
   * @return suffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSuffix() {
    return suffix;
  }


  @JsonProperty(SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }


  public DDLStatementData kind(DDLStatementKind kind) {
    
    this.kind = kind;
    return this;
  }

   /**
   * Get kind
   * @return kind
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DDLStatementKind getKind() {
    return kind;
  }


  @JsonProperty(KIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKind(DDLStatementKind kind) {
    this.kind = kind;
  }


  public DDLStatementData innerStatements(List<DDLStatementData> innerStatements) {
    
    this.innerStatements = innerStatements;
    return this;
  }

  public DDLStatementData addInnerStatementsItem(DDLStatementData innerStatementsItem) {
    this.innerStatements.add(innerStatementsItem);
    return this;
  }

   /**
   * Get innerStatements
   * @return innerStatements
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(INNER_STATEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<DDLStatementData> getInnerStatements() {
    return innerStatements;
  }


  @JsonProperty(INNER_STATEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInnerStatements(List<DDLStatementData> innerStatements) {
    this.innerStatements = innerStatements;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DDLStatementData ddLStatementData = (DDLStatementData) o;
    return Objects.equals(this.prefix, ddLStatementData.prefix) &&
        Objects.equals(this.suffix, ddLStatementData.suffix) &&
        Objects.equals(this.kind, ddLStatementData.kind) &&
        Objects.equals(this.innerStatements, ddLStatementData.innerStatements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefix, suffix, kind, innerStatements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DDLStatementData {\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    innerStatements: ").append(toIndentedString(innerStatements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

