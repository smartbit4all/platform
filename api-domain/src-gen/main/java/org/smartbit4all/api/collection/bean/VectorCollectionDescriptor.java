/*
 * collection api
 * collection api for the stored colections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.collection.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This object can be used as parameter object to name a vector collection managed by the CollectionApi. 
 */
@ApiModel(description = "This object can be used as parameter object to name a vector collection managed by the CollectionApi. ")
@JsonPropertyOrder({
  VectorCollectionDescriptor.VECTOR_COLLECTION_NAME,
  VectorCollectionDescriptor.VECTOR_D_B_CONNECTION,
  VectorCollectionDescriptor.EMBEDDING_CONNECTION
})
@JsonTypeName("VectorCollectionDescriptor")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VectorCollectionDescriptor {
  public static final String VECTOR_COLLECTION_NAME = "vectorCollectionName";
  private String vectorCollectionName;

  public static final String VECTOR_D_B_CONNECTION = "vectorDBConnection";
  private String vectorDBConnection;

  public static final String EMBEDDING_CONNECTION = "embeddingConnection";
  private String embeddingConnection;

  public VectorCollectionDescriptor() { 
  }

  public VectorCollectionDescriptor vectorCollectionName(String vectorCollectionName) {
    
    this.vectorCollectionName = vectorCollectionName;
    return this;
  }

   /**
   * The name of the Vector collection managed by the MDM Entry. It is maintained for the published version the under construction state is not working. 
   * @return vectorCollectionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the Vector collection managed by the MDM Entry. It is maintained for the published version the under construction state is not working. ")
  @JsonProperty(VECTOR_COLLECTION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVectorCollectionName() {
    return vectorCollectionName;
  }


  @JsonProperty(VECTOR_COLLECTION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVectorCollectionName(String vectorCollectionName) {
    this.vectorCollectionName = vectorCollectionName;
  }


  public VectorCollectionDescriptor vectorDBConnection(String vectorDBConnection) {
    
    this.vectorDBConnection = vectorDBConnection;
    return this;
  }

   /**
   * The name of the VectorDB connection that must match with the ServiceConnection.name property of the SystemIntegration MDMDefinition. 
   * @return vectorDBConnection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the VectorDB connection that must match with the ServiceConnection.name property of the SystemIntegration MDMDefinition. ")
  @JsonProperty(VECTOR_D_B_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVectorDBConnection() {
    return vectorDBConnection;
  }


  @JsonProperty(VECTOR_D_B_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVectorDBConnection(String vectorDBConnection) {
    this.vectorDBConnection = vectorDBConnection;
  }


  public VectorCollectionDescriptor embeddingConnection(String embeddingConnection) {
    
    this.embeddingConnection = embeddingConnection;
    return this;
  }

   /**
   * The name of the embedding connection that must match with the ServiceConnection.name property of the SystemIntegration MDMDefinition. 
   * @return embeddingConnection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the embedding connection that must match with the ServiceConnection.name property of the SystemIntegration MDMDefinition. ")
  @JsonProperty(EMBEDDING_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmbeddingConnection() {
    return embeddingConnection;
  }


  @JsonProperty(EMBEDDING_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmbeddingConnection(String embeddingConnection) {
    this.embeddingConnection = embeddingConnection;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VectorCollectionDescriptor vectorCollectionDescriptor = (VectorCollectionDescriptor) o;
    return Objects.equals(this.vectorCollectionName, vectorCollectionDescriptor.vectorCollectionName) &&
        Objects.equals(this.vectorDBConnection, vectorCollectionDescriptor.vectorDBConnection) &&
        Objects.equals(this.embeddingConnection, vectorCollectionDescriptor.embeddingConnection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vectorCollectionName, vectorDBConnection, embeddingConnection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VectorCollectionDescriptor {\n");
    sb.append("    vectorCollectionName: ").append(toIndentedString(vectorCollectionName)).append("\n");
    sb.append("    vectorDBConnection: ").append(toIndentedString(vectorDBConnection)).append("\n");
    sb.append("    embeddingConnection: ").append(toIndentedString(embeddingConnection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

