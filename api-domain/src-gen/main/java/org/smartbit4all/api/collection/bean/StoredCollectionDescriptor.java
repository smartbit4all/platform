/*
 * collection api
 * collection api for the stored colections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.collection.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This object can be used as parameter object to name a stored object managed by the CollectionApi. 
 */
@ApiModel(description = "This object can be used as parameter object to name a stored object managed by the CollectionApi. ")
@JsonPropertyOrder({
  StoredCollectionDescriptor.NAME,
  StoredCollectionDescriptor.SCHEMA,
  StoredCollectionDescriptor.SCOPE_URI,
  StoredCollectionDescriptor.COLLECTION_TYPE
})
@JsonTypeName("StoredCollectionDescriptor")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StoredCollectionDescriptor {
  public static final String NAME = "name";
  private String name;

  public static final String SCHEMA = "schema";
  private String schema;

  public static final String SCOPE_URI = "scopeUri";
  private URI scopeUri;

  /**
   * Gets or Sets collectionType
   */
  public enum CollectionTypeEnum {
    LIST("LIST"),
    
    MAP("MAP"),
    
    REFERENCE("REFERENCE");

    private String value;

    CollectionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CollectionTypeEnum fromValue(String value) {
      for (CollectionTypeEnum b : CollectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String COLLECTION_TYPE = "collectionType";
  private CollectionTypeEnum collectionType;

  public StoredCollectionDescriptor() { 
  }

  public StoredCollectionDescriptor name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public StoredCollectionDescriptor schema(String schema) {
    
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSchema() {
    return schema;
  }


  @JsonProperty(SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchema(String schema) {
    this.schema = schema;
  }


  public StoredCollectionDescriptor scopeUri(URI scopeUri) {
    
    this.scopeUri = scopeUri;
    return this;
  }

   /**
   * Get scopeUri
   * @return scopeUri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(SCOPE_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getScopeUri() {
    return scopeUri;
  }


  @JsonProperty(SCOPE_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopeUri(URI scopeUri) {
    this.scopeUri = scopeUri;
  }


  public StoredCollectionDescriptor collectionType(CollectionTypeEnum collectionType) {
    
    this.collectionType = collectionType;
    return this;
  }

   /**
   * Get collectionType
   * @return collectionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(COLLECTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CollectionTypeEnum getCollectionType() {
    return collectionType;
  }


  @JsonProperty(COLLECTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCollectionType(CollectionTypeEnum collectionType) {
    this.collectionType = collectionType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoredCollectionDescriptor storedCollectionDescriptor = (StoredCollectionDescriptor) o;
    return Objects.equals(this.name, storedCollectionDescriptor.name) &&
        Objects.equals(this.schema, storedCollectionDescriptor.schema) &&
        Objects.equals(this.scopeUri, storedCollectionDescriptor.scopeUri) &&
        Objects.equals(this.collectionType, storedCollectionDescriptor.collectionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, schema, scopeUri, collectionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoredCollectionDescriptor {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    scopeUri: ").append(toIndentedString(scopeUri)).append("\n");
    sb.append("    collectionType: ").append(toIndentedString(collectionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

