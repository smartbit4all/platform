/*
 * collection api
 * collection api for the stored colections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.collection.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.collection.bean.ObjectLookupResultItem;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The result an Object lookup. 
 */
@ApiModel(description = "The result an Object lookup. ")
@JsonPropertyOrder({
  ObjectLookupResult.NUMBER_OF_RELEVANT,
  ObjectLookupResult.ITEMS
})
@JsonTypeName("ObjectLookupResult")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectLookupResult {
  public static final String NUMBER_OF_RELEVANT = "numberOfRelevant";
  private Integer numberOfRelevant;

  public static final String ITEMS = "items";
  private List<ObjectLookupResultItem> items = new ArrayList<>();

  public ObjectLookupResult() { 
  }

  public ObjectLookupResult numberOfRelevant(Integer numberOfRelevant) {
    
    this.numberOfRelevant = numberOfRelevant;
    return this;
  }

   /**
   * The number of relevant items that are more or less on the same level of relevance. The lookup can accept a percentage  as value to calculate which items are relevant. If one item should be selected then the most relevant will be selected but it is important to know if there are any more relevant or the selected one is obviously the one we are looking for. 
   * @return numberOfRelevant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of relevant items that are more or less on the same level of relevance. The lookup can accept a percentage  as value to calculate which items are relevant. If one item should be selected then the most relevant will be selected but it is important to know if there are any more relevant or the selected one is obviously the one we are looking for. ")
  @JsonProperty(NUMBER_OF_RELEVANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberOfRelevant() {
    return numberOfRelevant;
  }


  @JsonProperty(NUMBER_OF_RELEVANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfRelevant(Integer numberOfRelevant) {
    this.numberOfRelevant = numberOfRelevant;
  }


  public ObjectLookupResult items(List<ObjectLookupResultItem> items) {
    
    this.items = items;
    return this;
  }

  public ObjectLookupResult addItemsItem(ObjectLookupResultItem itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObjectLookupResultItem> getItems() {
    return items;
  }


  @JsonProperty(ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItems(List<ObjectLookupResultItem> items) {
    this.items = items;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectLookupResult objectLookupResult = (ObjectLookupResult) o;
    return Objects.equals(this.numberOfRelevant, objectLookupResult.numberOfRelevant) &&
        Objects.equals(this.items, objectLookupResult.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfRelevant, items);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectLookupResult {\n");
    sb.append("    numberOfRelevant: ").append(toIndentedString(numberOfRelevant)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

