/*
 * smartbit4all navigation api
 * smartbit4all navigation api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.navigation.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.navigation.bean.NavigationView;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * NavigationEntry
 */
@JsonPropertyOrder({
  NavigationEntry.OBJECT_URI,
  NavigationEntry.META_URI,
  NavigationEntry.NAME,
  NavigationEntry.ICON,
  NavigationEntry.STYLES,
  NavigationEntry.VIEWS,
  NavigationEntry.ACTIONS
})
@JsonTypeName("NavigationEntry")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NavigationEntry {
  public static final String OBJECT_URI = "objectUri";
  private URI objectUri;

  public static final String META_URI = "metaUri";
  private URI metaUri;

  public static final String NAME = "name";
  private String name;

  public static final String ICON = "icon";
  private String icon;

  public static final String STYLES = "styles";
  private List<String> styles = null;

  public static final String VIEWS = "views";
  private List<NavigationView> views = null;

  public static final String ACTIONS = "actions";
  private List<URI> actions = null;


  public NavigationEntry objectUri(URI objectUri) {
    
    this.objectUri = objectUri;
    return this;
  }

   /**
   * The URI identifies the so called API object.
   * @return objectUri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The URI identifies the so called API object.")
  @JsonProperty(OBJECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getObjectUri() {
    return objectUri;
  }


  @JsonProperty(OBJECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setObjectUri(URI objectUri) {
    this.objectUri = objectUri;
  }


  public NavigationEntry metaUri(URI metaUri) {
    
    this.metaUri = metaUri;
    return this;
  }

   /**
   * The URI identifies the meta object of the entry
   * @return metaUri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The URI identifies the meta object of the entry")
  @JsonProperty(META_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getMetaUri() {
    return metaUri;
  }


  @JsonProperty(META_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetaUri(URI metaUri) {
    this.metaUri = metaUri;
  }


  public NavigationEntry name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the entry
   * @return name
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "The name of the entry")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public NavigationEntry icon(String icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * The name of the icon resource
   * @return icon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the icon resource")
  @JsonProperty(ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIcon() {
    return icon;
  }


  @JsonProperty(ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIcon(String icon) {
    this.icon = icon;
  }


  public NavigationEntry styles(List<String> styles) {
    
    this.styles = styles;
    return this;
  }

  public NavigationEntry addStylesItem(String stylesItem) {
    if (this.styles == null) {
      this.styles = new ArrayList<>();
    }
    this.styles.add(stylesItem);
    return this;
  }

   /**
   * The string list of the abstract styles that can be applied to the given entry
   * @return styles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The string list of the abstract styles that can be applied to the given entry")
  @JsonProperty(STYLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getStyles() {
    return styles;
  }


  @JsonProperty(STYLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStyles(List<String> styles) {
    this.styles = styles;
  }


  public NavigationEntry views(List<NavigationView> views) {
    
    this.views = views;
    return this;
  }

  public NavigationEntry addViewsItem(NavigationView viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

   /**
   * The string list of the abstract views that are supported by the UI that we have. This view will get the navigation entry as parameter.
   * @return views
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The string list of the abstract views that are supported by the UI that we have. This view will get the navigation entry as parameter.")
  @JsonProperty(VIEWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<NavigationView> getViews() {
    return views;
  }


  @JsonProperty(VIEWS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViews(List<NavigationView> views) {
    this.views = views;
  }


  public NavigationEntry actions(List<URI> actions) {
    
    this.actions = actions;
    return this;
  }

  public NavigationEntry addActionsItem(URI actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * The executable actions
   * @return actions
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The executable actions")
  @JsonProperty(ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<URI> getActions() {
    return actions;
  }


  @JsonProperty(ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActions(List<URI> actions) {
    this.actions = actions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NavigationEntry navigationEntry = (NavigationEntry) o;
    return Objects.equals(this.objectUri, navigationEntry.objectUri) &&
        Objects.equals(this.metaUri, navigationEntry.metaUri) &&
        Objects.equals(this.name, navigationEntry.name) &&
        Objects.equals(this.icon, navigationEntry.icon) &&
        Objects.equals(this.styles, navigationEntry.styles) &&
        Objects.equals(this.views, navigationEntry.views) &&
        Objects.equals(this.actions, navigationEntry.actions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectUri, metaUri, name, icon, styles, views, actions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NavigationEntry {\n");
    sb.append("    objectUri: ").append(toIndentedString(objectUri)).append("\n");
    sb.append("    metaUri: ").append(toIndentedString(metaUri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    styles: ").append(toIndentedString(styles)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

