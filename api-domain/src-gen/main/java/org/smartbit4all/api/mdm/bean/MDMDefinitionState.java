/*
 * MasterDataManagement api
 * null
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.mdm.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This definition object is a descriptor about the master data management in an application. Typically this is a single instance in the application but there can be more then one if we would like to manage separated set of data like in a multi tenant application. It is used as CollectionApi.reference to be able to identify by name. 
 */
@ApiModel(description = "This definition object is a descriptor about the master data management in an application. Typically this is a single instance in the application but there can be more then one if we would like to manage separated set of data like in a multi tenant application. It is used as CollectionApi.reference to be able to identify by name. ")
@JsonPropertyOrder({
  MDMDefinitionState.URI,
  MDMDefinitionState.GLOBAL_BRANCH
})
@JsonTypeName("MDMDefinitionState")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MDMDefinitionState {
  public static final String URI = "uri";
  private URI uri;

  public static final String GLOBAL_BRANCH = "globalBranch";
  private URI globalBranch;

  public MDMDefinitionState() { 
  }

  public MDMDefinitionState uri(URI uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * The uri of the object.
   * @return uri
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The uri of the object.")
  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(URI uri) {
    this.uri = uri;
  }


  public MDMDefinitionState globalBranch(URI globalBranch) {
    
    this.globalBranch = globalBranch;
    return this;
  }

   /**
   * The uri of the global branch if any.
   * @return globalBranch
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The uri of the global branch if any.")
  @JsonProperty(GLOBAL_BRANCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getGlobalBranch() {
    return globalBranch;
  }


  @JsonProperty(GLOBAL_BRANCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGlobalBranch(URI globalBranch) {
    this.globalBranch = globalBranch;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MDMDefinitionState mdMDefinitionState = (MDMDefinitionState) o;
    return Objects.equals(this.uri, mdMDefinitionState.uri) &&
        Objects.equals(this.globalBranch, mdMDefinitionState.globalBranch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, globalBranch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MDMDefinitionState {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    globalBranch: ").append(toIndentedString(globalBranch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

