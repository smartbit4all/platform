/*
 * The sample domain
 * Contains object for testing purposes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.sample.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.sample.bean.SampleLinkObject;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * A recursive category holder for other categories and different items. 
 */
@ApiModel(description = "A recursive category holder for other categories and different items. ")
@JsonPropertyOrder({
  SampleCategory.URI,
  SampleCategory.NAME,
  SampleCategory.COLOR,
  SampleCategory.COST,
  SampleCategory.CREATED_AT,
  SampleCategory.SUB_CATEGORIES,
  SampleCategory.CONTAINER_ITEMS,
  SampleCategory.LINKS
})
@JsonTypeName("SampleCategory")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SampleCategory {
  public static final String URI = "uri";
  private URI uri;

  public static final String NAME = "name";
  private String name;

  /**
   * Gets or Sets color
   */
  public enum ColorEnum {
    RED("RED"),
    
    BLACK("BLACK"),
    
    GREEN("GREEN"),
    
    WHITE("WHITE");

    private String value;

    ColorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ColorEnum fromValue(String value) {
      for (ColorEnum b : ColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String COLOR = "color";
  private ColorEnum color;

  public static final String COST = "cost";
  private Long cost;

  public static final String CREATED_AT = "createdAt";
  private OffsetDateTime createdAt;

  public static final String SUB_CATEGORIES = "subCategories";
  private List<URI> subCategories = new ArrayList<>();

  public static final String CONTAINER_ITEMS = "containerItems";
  private List<URI> containerItems = new ArrayList<>();

  public static final String LINKS = "links";
  private List<SampleLinkObject> links = null;

  public SampleCategory() { 
  }

  public SampleCategory uri(URI uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUri() {
    return uri;
  }


  @JsonProperty(URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(URI uri) {
    this.uri = uri;
  }


  public SampleCategory name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public SampleCategory color(ColorEnum color) {
    
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColorEnum getColor() {
    return color;
  }


  @JsonProperty(COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColor(ColorEnum color) {
    this.color = color;
  }


  public SampleCategory cost(Long cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCost() {
    return cost;
  }


  @JsonProperty(COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCost(Long cost) {
    this.cost = cost;
  }


  public SampleCategory createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SampleCategory subCategories(List<URI> subCategories) {
    
    this.subCategories = subCategories;
    return this;
  }

  public SampleCategory addSubCategoriesItem(URI subCategoriesItem) {
    this.subCategories.add(subCategoriesItem);
    return this;
  }

   /**
   * Get subCategories
   * @return subCategories
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(SUB_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<URI> getSubCategories() {
    return subCategories;
  }


  @JsonProperty(SUB_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubCategories(List<URI> subCategories) {
    this.subCategories = subCategories;
  }


  public SampleCategory containerItems(List<URI> containerItems) {
    
    this.containerItems = containerItems;
    return this;
  }

  public SampleCategory addContainerItemsItem(URI containerItemsItem) {
    this.containerItems.add(containerItemsItem);
    return this;
  }

   /**
   * Get containerItems
   * @return containerItems
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(CONTAINER_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<URI> getContainerItems() {
    return containerItems;
  }


  @JsonProperty(CONTAINER_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContainerItems(List<URI> containerItems) {
    this.containerItems = containerItems;
  }


  public SampleCategory links(List<SampleLinkObject> links) {
    
    this.links = links;
    return this;
  }

  public SampleCategory addLinksItem(SampleLinkObject linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SampleLinkObject> getLinks() {
    return links;
  }


  @JsonProperty(LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(List<SampleLinkObject> links) {
    this.links = links;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SampleCategory sampleCategory = (SampleCategory) o;
    return Objects.equals(this.uri, sampleCategory.uri) &&
        Objects.equals(this.name, sampleCategory.name) &&
        Objects.equals(this.color, sampleCategory.color) &&
        Objects.equals(this.cost, sampleCategory.cost) &&
        Objects.equals(this.createdAt, sampleCategory.createdAt) &&
        Objects.equals(this.subCategories, sampleCategory.subCategories) &&
        Objects.equals(this.containerItems, sampleCategory.containerItems) &&
        Objects.equals(this.links, sampleCategory.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, name, color, cost, createdAt, subCategories, containerItems, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SampleCategory {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    subCategories: ").append(toIndentedString(subCategories)).append("\n");
    sb.append("    containerItems: ").append(toIndentedString(containerItems)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

