/*
 * Grid api
 * The grid api is resposible for the grid components that shows a list of item. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.grid.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * GridColumnMeta
 */
@JsonPropertyOrder({
  GridColumnMeta.LABEL,
  GridColumnMeta.PROPERTY_NAME,
  GridColumnMeta.TYPE_CLASS,
  GridColumnMeta.ALWAYS_HIDDEN,
  GridColumnMeta.ALWAYS_SHOW
})
@JsonTypeName("GridColumnMeta")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GridColumnMeta {
  public static final String LABEL = "label";
  private String label;

  public static final String PROPERTY_NAME = "propertyName";
  private String propertyName;

  public static final String TYPE_CLASS = "typeClass";
  private String typeClass;

  public static final String ALWAYS_HIDDEN = "alwaysHidden";
  private Boolean alwaysHidden = false;

  public static final String ALWAYS_SHOW = "alwaysShow";
  private Boolean alwaysShow = false;

  public GridColumnMeta() { 
  }

  public GridColumnMeta label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabel(String label) {
    this.label = label;
  }


  public GridColumnMeta propertyName(String propertyName) {
    
    this.propertyName = propertyName;
    return this;
  }

   /**
   * Get propertyName
   * @return propertyName
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPropertyName() {
    return propertyName;
  }


  @JsonProperty(PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPropertyName(String propertyName) {
    this.propertyName = propertyName;
  }


  public GridColumnMeta typeClass(String typeClass) {
    
    this.typeClass = typeClass;
    return this;
  }

   /**
   * Get typeClass
   * @return typeClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(TYPE_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeClass() {
    return typeClass;
  }


  @JsonProperty(TYPE_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeClass(String typeClass) {
    this.typeClass = typeClass;
  }


  public GridColumnMeta alwaysHidden(Boolean alwaysHidden) {
    
    this.alwaysHidden = alwaysHidden;
    return this;
  }

   /**
   * Get alwaysHidden
   * @return alwaysHidden
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(ALWAYS_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAlwaysHidden() {
    return alwaysHidden;
  }


  @JsonProperty(ALWAYS_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlwaysHidden(Boolean alwaysHidden) {
    this.alwaysHidden = alwaysHidden;
  }


  public GridColumnMeta alwaysShow(Boolean alwaysShow) {
    
    this.alwaysShow = alwaysShow;
    return this;
  }

   /**
   * Get alwaysShow
   * @return alwaysShow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(ALWAYS_SHOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAlwaysShow() {
    return alwaysShow;
  }


  @JsonProperty(ALWAYS_SHOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlwaysShow(Boolean alwaysShow) {
    this.alwaysShow = alwaysShow;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GridColumnMeta gridColumnMeta = (GridColumnMeta) o;
    return Objects.equals(this.label, gridColumnMeta.label) &&
        Objects.equals(this.propertyName, gridColumnMeta.propertyName) &&
        Objects.equals(this.typeClass, gridColumnMeta.typeClass) &&
        Objects.equals(this.alwaysHidden, gridColumnMeta.alwaysHidden) &&
        Objects.equals(this.alwaysShow, gridColumnMeta.alwaysShow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, propertyName, typeClass, alwaysHidden, alwaysShow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GridColumnMeta {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    propertyName: ").append(toIndentedString(propertyName)).append("\n");
    sb.append("    typeClass: ").append(toIndentedString(typeClass)).append("\n");
    sb.append("    alwaysHidden: ").append(toIndentedString(alwaysHidden)).append("\n");
    sb.append("    alwaysShow: ").append(toIndentedString(alwaysShow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

