/*
 * Grid api
 * The grid api is resposible for the grid components that shows a list of item. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.grid.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.filterexpression.bean.FilterExpressionOrderBy;
import org.smartbit4all.api.grid.bean.GridViewDescriptor;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The configuration of the grid view. It can be a simple table grid but a complex card representation also. A model has one or more view option to render the content. 
 */
@ApiModel(description = "The configuration of the grid view. It can be a simple table grid but a complex card representation also. A model has one or more view option to render the content. ")
@JsonPropertyOrder({
  GridView.DESCRIPTOR,
  GridView.ORDERED_COLUMN_NAMES,
  GridView.ORDER_BY_LIST
})
@JsonTypeName("GridView")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GridView {
  public static final String DESCRIPTOR = "descriptor";
  private GridViewDescriptor descriptor;

  public static final String ORDERED_COLUMN_NAMES = "orderedColumnNames";
  private List<String> orderedColumnNames = new ArrayList<>();

  public static final String ORDER_BY_LIST = "orderByList";
  private List<FilterExpressionOrderBy> orderByList = null;

  public GridView() { 
  }

  public GridView descriptor(GridViewDescriptor descriptor) {
    
    this.descriptor = descriptor;
    return this;
  }

   /**
   * Get descriptor
   * @return descriptor
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GridViewDescriptor getDescriptor() {
    return descriptor;
  }


  @JsonProperty(DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescriptor(GridViewDescriptor descriptor) {
    this.descriptor = descriptor;
  }


  public GridView orderedColumnNames(List<String> orderedColumnNames) {
    
    this.orderedColumnNames = orderedColumnNames;
    return this;
  }

  public GridView addOrderedColumnNamesItem(String orderedColumnNamesItem) {
    this.orderedColumnNames.add(orderedColumnNamesItem);
    return this;
  }

   /**
   * Get orderedColumnNames
   * @return orderedColumnNames
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(ORDERED_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getOrderedColumnNames() {
    return orderedColumnNames;
  }


  @JsonProperty(ORDERED_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderedColumnNames(List<String> orderedColumnNames) {
    this.orderedColumnNames = orderedColumnNames;
  }


  public GridView orderByList(List<FilterExpressionOrderBy> orderByList) {
    
    this.orderByList = orderByList;
    return this;
  }

  public GridView addOrderByListItem(FilterExpressionOrderBy orderByListItem) {
    if (this.orderByList == null) {
      this.orderByList = new ArrayList<>();
    }
    this.orderByList.add(orderByListItem);
    return this;
  }

   /**
   * Get orderByList
   * @return orderByList
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(ORDER_BY_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FilterExpressionOrderBy> getOrderByList() {
    return orderByList;
  }


  @JsonProperty(ORDER_BY_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderByList(List<FilterExpressionOrderBy> orderByList) {
    this.orderByList = orderByList;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GridView gridView = (GridView) o;
    return Objects.equals(this.descriptor, gridView.descriptor) &&
        Objects.equals(this.orderedColumnNames, gridView.orderedColumnNames) &&
        Objects.equals(this.orderByList, gridView.orderByList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(descriptor, orderedColumnNames, orderByList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GridView {\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    orderedColumnNames: ").append(toIndentedString(orderedColumnNames)).append("\n");
    sb.append("    orderByList: ").append(toIndentedString(orderByList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

