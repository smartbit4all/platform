/*
 * User selector api
 * User selector ui api.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.userselector.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.userselector.bean.UserSelector;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * UserMultiSelector
 */
@JsonPropertyOrder({
  UserMultiSelector.SELECTORS,
  UserMultiSelector.SELECTED,
  UserMultiSelector.IS_SAVING
})
@JsonTypeName("UserMultiSelector")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UserMultiSelector {
  public static final String SELECTORS = "selectors";
  private List<UserSelector> selectors = null;

  public static final String SELECTED = "selected";
  private List<UserSelector> selected = null;

  public static final String IS_SAVING = "isSaving";
  private Boolean isSaving;

  public UserMultiSelector() { 
  }

  public UserMultiSelector selectors(List<UserSelector> selectors) {
    
    this.selectors = selectors;
    return this;
  }

  public UserMultiSelector addSelectorsItem(UserSelector selectorsItem) {
    if (this.selectors == null) {
      this.selectors = new ArrayList<>();
    }
    this.selectors.add(selectorsItem);
    return this;
  }

   /**
   * Get selectors
   * @return selectors
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(SELECTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UserSelector> getSelectors() {
    return selectors;
  }


  @JsonProperty(SELECTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelectors(List<UserSelector> selectors) {
    this.selectors = selectors;
  }


  public UserMultiSelector selected(List<UserSelector> selected) {
    
    this.selected = selected;
    return this;
  }

  public UserMultiSelector addSelectedItem(UserSelector selectedItem) {
    if (this.selected == null) {
      this.selected = new ArrayList<>();
    }
    this.selected.add(selectedItem);
    return this;
  }

   /**
   * Get selected
   * @return selected
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(SELECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UserSelector> getSelected() {
    return selected;
  }


  @JsonProperty(SELECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelected(List<UserSelector> selected) {
    this.selected = selected;
  }


  public UserMultiSelector isSaving(Boolean isSaving) {
    
    this.isSaving = isSaving;
    return this;
  }

   /**
   * Get isSaving
   * @return isSaving
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(IS_SAVING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsSaving() {
    return isSaving;
  }


  @JsonProperty(IS_SAVING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsSaving(Boolean isSaving) {
    this.isSaving = isSaving;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserMultiSelector userMultiSelector = (UserMultiSelector) o;
    return Objects.equals(this.selectors, userMultiSelector.selectors) &&
        Objects.equals(this.selected, userMultiSelector.selected) &&
        Objects.equals(this.isSaving, userMultiSelector.isSaving);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selectors, selected, isSaving);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserMultiSelector {\n");
    sb.append("    selectors: ").append(toIndentedString(selectors)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    isSaving: ").append(toIndentedString(isSaving)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

