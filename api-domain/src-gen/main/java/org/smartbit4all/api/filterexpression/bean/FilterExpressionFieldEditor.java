/*
 * Filter API 2
 * Filter API 2
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.filterexpression.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.formdefinition.bean.SmartLayoutDefinition;
import org.smartbit4all.api.view.bean.UiAction;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * FilterExpressionFieldEditor
 */
@JsonPropertyOrder({
  FilterExpressionFieldEditor.LAYOUT_DEF,
  FilterExpressionFieldEditor.POSSIBLE_ACTIONS
})
@JsonTypeName("FilterExpressionFieldEditor")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FilterExpressionFieldEditor {
  public static final String LAYOUT_DEF = "layoutDef";
  private SmartLayoutDefinition layoutDef = null;

  public static final String POSSIBLE_ACTIONS = "possibleActions";
  private List<UiAction> possibleActions = null;

  public FilterExpressionFieldEditor() { 
  }

  public FilterExpressionFieldEditor layoutDef(SmartLayoutDefinition layoutDef) {
    
    this.layoutDef = layoutDef;
    return this;
  }

   /**
   * Get layoutDef
   * @return layoutDef
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(LAYOUT_DEF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SmartLayoutDefinition getLayoutDef() {
    return layoutDef;
  }


  @JsonProperty(LAYOUT_DEF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLayoutDef(SmartLayoutDefinition layoutDef) {
    this.layoutDef = layoutDef;
  }


  public FilterExpressionFieldEditor possibleActions(List<UiAction> possibleActions) {
    
    this.possibleActions = possibleActions;
    return this;
  }

  public FilterExpressionFieldEditor addPossibleActionsItem(UiAction possibleActionsItem) {
    if (this.possibleActions == null) {
      this.possibleActions = new ArrayList<>();
    }
    this.possibleActions.add(possibleActionsItem);
    return this;
  }

   /**
   * Get possibleActions
   * @return possibleActions
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(POSSIBLE_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UiAction> getPossibleActions() {
    return possibleActions;
  }


  @JsonProperty(POSSIBLE_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPossibleActions(List<UiAction> possibleActions) {
    this.possibleActions = possibleActions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterExpressionFieldEditor filterExpressionFieldEditor = (FilterExpressionFieldEditor) o;
    return Objects.equals(this.layoutDef, filterExpressionFieldEditor.layoutDef) &&
        Objects.equals(this.possibleActions, filterExpressionFieldEditor.possibleActions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layoutDef, possibleActions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterExpressionFieldEditor {\n");
    sb.append("    layoutDef: ").append(toIndentedString(layoutDef)).append("\n");
    sb.append("    possibleActions: ").append(toIndentedString(possibleActions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

