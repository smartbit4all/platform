/*
 * View API
 * View API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.view.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.invocation.bean.InvocationRequest;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * An event handler is a special callback function to call when the given event is occurred. So the event handler can be an action as is or can be fired on a before or after event 
 */
@ApiModel(description = "An event handler is a special callback function to call when the given event is occurred. So the event handler can be an action as is or can be fired on a before or after event ")
@JsonPropertyOrder({
  ViewEventHandler.PATH,
  ViewEventHandler.VIEW_EVENT_TYPE,
  ViewEventHandler.INVOCATION_REQUEST
})
@JsonTypeName("ViewEventHandler")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ViewEventHandler {
  public static final String PATH = "path";
  private List<String> path = null;

  /**
   * Gets or Sets viewEventType
   */
  public enum ViewEventTypeEnum {
    BEFORE("before"),
    
    INSTEAD("instead"),
    
    AFTER("after");

    private String value;

    ViewEventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ViewEventTypeEnum fromValue(String value) {
      for (ViewEventTypeEnum b : ViewEventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String VIEW_EVENT_TYPE = "viewEventType";
  private ViewEventTypeEnum viewEventType;

  public static final String INVOCATION_REQUEST = "invocationRequest";
  private InvocationRequest invocationRequest = null;

  public ViewEventHandler() { 
  }

  public ViewEventHandler path(List<String> path) {
    
    this.path = path;
    return this;
  }

  public ViewEventHandler addPathItem(String pathItem) {
    if (this.path == null) {
      this.path = new ArrayList<>();
    }
    this.path.add(pathItem);
    return this;
  }

   /**
   * The event handler path defines the location of the event. We can use regular expressions to fine tune the event definition. In this way we can add before event handler for all the actions we have. The actions will have a predefined path. The path of the normal actions is the action code itself.  
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The event handler path defines the location of the event. We can use regular expressions to fine tune the event definition. In this way we can add before event handler for all the actions we have. The actions will have a predefined path. The path of the normal actions is the action code itself.  ")
  @JsonProperty(PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPath() {
    return path;
  }


  @JsonProperty(PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(List<String> path) {
    this.path = path;
  }


  public ViewEventHandler viewEventType(ViewEventTypeEnum viewEventType) {
    
    this.viewEventType = viewEventType;
    return this;
  }

   /**
   * Get viewEventType
   * @return viewEventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(VIEW_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ViewEventTypeEnum getViewEventType() {
    return viewEventType;
  }


  @JsonProperty(VIEW_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViewEventType(ViewEventTypeEnum viewEventType) {
    this.viewEventType = viewEventType;
  }


  public ViewEventHandler invocationRequest(InvocationRequest invocationRequest) {
    
    this.invocationRequest = invocationRequest;
    return this;
  }

   /**
   * This is the method to call when the event occurs. It&#39;s signature is the same as the event which it specifies, like ActionHandler or WidgetActionHandler. 
   * @return invocationRequest
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "This is the method to call when the event occurs. It's signature is the same as the event which it specifies, like ActionHandler or WidgetActionHandler. ")
  @JsonProperty(INVOCATION_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InvocationRequest getInvocationRequest() {
    return invocationRequest;
  }


  @JsonProperty(INVOCATION_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvocationRequest(InvocationRequest invocationRequest) {
    this.invocationRequest = invocationRequest;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewEventHandler viewEventHandler = (ViewEventHandler) o;
    return Objects.equals(this.path, viewEventHandler.path) &&
        Objects.equals(this.viewEventType, viewEventHandler.viewEventType) &&
        Objects.equals(this.invocationRequest, viewEventHandler.invocationRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, viewEventType, invocationRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewEventHandler {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    viewEventType: ").append(toIndentedString(viewEventType)).append("\n");
    sb.append("    invocationRequest: ").append(toIndentedString(invocationRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

