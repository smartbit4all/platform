/*
 * View API
 * View API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.view.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.smartbit4all.api.view.bean.MessageOption;
import org.smartbit4all.api.view.bean.MessageType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * MessageData
 */
@JsonPropertyOrder({
  MessageData.UUID,
  MessageData.VIEW_UUID,
  MessageData.TYPE,
  MessageData.HEADER,
  MessageData.TEXT,
  MessageData.OPTIONS
})
@JsonTypeName("MessageData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MessageData {
  public static final String UUID = "uuid";
  private UUID uuid;

  public static final String VIEW_UUID = "viewUuid";
  private UUID viewUuid;

  public static final String TYPE = "type";
  private MessageType type;

  public static final String HEADER = "header";
  private String header;

  public static final String TEXT = "text";
  private String text;

  public static final String OPTIONS = "options";
  private List<MessageOption> options = null;


  public MessageData uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Unique identifier of the Message.
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Unique identifier of the Message.")
  @JsonProperty(UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getUuid() {
    return uuid;
  }


  @JsonProperty(UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public MessageData viewUuid(UUID viewUuid) {
    
    this.viewUuid = viewUuid;
    return this;
  }

   /**
   * UUID of the View, showing this message. May be null.
   * @return viewUuid
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "UUID of the View, showing this message. May be null.")
  @JsonProperty(VIEW_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getViewUuid() {
    return viewUuid;
  }


  @JsonProperty(VIEW_UUID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViewUuid(UUID viewUuid) {
    this.viewUuid = viewUuid;
  }


  public MessageData type(MessageType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MessageType getType() {
    return type;
  }


  @JsonProperty(TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(MessageType type) {
    this.type = type;
  }


  public MessageData header(String header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHeader() {
    return header;
  }


  @JsonProperty(HEADER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeader(String header) {
    this.header = header;
  }


  public MessageData text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getText() {
    return text;
  }


  @JsonProperty(TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setText(String text) {
    this.text = text;
  }


  public MessageData options(List<MessageOption> options) {
    
    this.options = options;
    return this;
  }

  public MessageData addOptionsItem(MessageOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MessageOption> getOptions() {
    return options;
  }


  @JsonProperty(OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(List<MessageOption> options) {
    this.options = options;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageData messageData = (MessageData) o;
    return Objects.equals(this.uuid, messageData.uuid) &&
        Objects.equals(this.viewUuid, messageData.viewUuid) &&
        Objects.equals(this.type, messageData.type) &&
        Objects.equals(this.header, messageData.header) &&
        Objects.equals(this.text, messageData.text) &&
        Objects.equals(this.options, messageData.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, viewUuid, type, header, text, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageData {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    viewUuid: ").append(toIndentedString(viewUuid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

