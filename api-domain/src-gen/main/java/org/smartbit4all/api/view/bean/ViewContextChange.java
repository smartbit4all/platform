/*
 * View API
 * View API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.view.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.view.bean.ComponentModelChange;
import org.smartbit4all.api.view.bean.ViewContextData;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The same session can be valid / used in multiple UIs, this object represents a UI.
 */
@ApiModel(description = "The same session can be valid / used in multiple UIs, this object represents a UI.")
@JsonPropertyOrder({
  ViewContextChange.VIEW_CONTEXT,
  ViewContextChange.CHANGES
})
@JsonTypeName("ViewContextChange")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ViewContextChange {
  public static final String VIEW_CONTEXT = "viewContext";
  private ViewContextData viewContext;

  public static final String CHANGES = "changes";
  private List<ComponentModelChange> changes = new ArrayList<>();

  public ViewContextChange() { 
  }

  public ViewContextChange viewContext(ViewContextData viewContext) {
    
    this.viewContext = viewContext;
    return this;
  }

   /**
   * Get viewContext
   * @return viewContext
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(VIEW_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ViewContextData getViewContext() {
    return viewContext;
  }


  @JsonProperty(VIEW_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setViewContext(ViewContextData viewContext) {
    this.viewContext = viewContext;
  }


  public ViewContextChange changes(List<ComponentModelChange> changes) {
    
    this.changes = changes;
    return this;
  }

  public ViewContextChange addChangesItem(ComponentModelChange changesItem) {
    this.changes.add(changesItem);
    return this;
  }

   /**
   * Get changes
   * @return changes
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(CHANGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ComponentModelChange> getChanges() {
    return changes;
  }


  @JsonProperty(CHANGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChanges(List<ComponentModelChange> changes) {
    this.changes = changes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewContextChange viewContextChange = (ViewContextChange) o;
    return Objects.equals(this.viewContext, viewContextChange.viewContext) &&
        Objects.equals(this.changes, viewContextChange.changes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(viewContext, changes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewContextChange {\n");
    sb.append("    viewContext: ").append(toIndentedString(viewContext)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

