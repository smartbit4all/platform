/*
 * View API
 * View API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.view.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Describes the look of an upload component that is related to a specific UiAction. 
 */
@ApiModel(description = "Describes the look of an upload component that is related to a specific UiAction. ")
@JsonPropertyOrder({
  UiActionUploadDescriptor.TITLE,
  UiActionUploadDescriptor.DESCRIPTION,
  UiActionUploadDescriptor.MAX_SIZE,
  UiActionUploadDescriptor.FORMATS,
  UiActionUploadDescriptor.UPLOAD_BUTTON_TITLE,
  UiActionUploadDescriptor.BACKGROUND_COLOUR,
  UiActionUploadDescriptor.TEXT_COLOUR
})
@JsonTypeName("UiActionUploadDescriptor")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UiActionUploadDescriptor {
  public static final String TITLE = "title";
  private String title;

  public static final String DESCRIPTION = "description";
  private String description;

  public static final String MAX_SIZE = "maxSize";
  private String maxSize;

  public static final String FORMATS = "formats";
  private String formats;

  public static final String UPLOAD_BUTTON_TITLE = "uploadButtonTitle";
  private String uploadButtonTitle;

  public static final String BACKGROUND_COLOUR = "backgroundColour";
  private String backgroundColour;

  public static final String TEXT_COLOUR = "textColour";
  private String textColour;

  public UiActionUploadDescriptor() { 
  }

  public UiActionUploadDescriptor title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(String title) {
    this.title = title;
  }


  public UiActionUploadDescriptor description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public UiActionUploadDescriptor maxSize(String maxSize) {
    
    this.maxSize = maxSize;
    return this;
  }

   /**
   * Get maxSize
   * @return maxSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(MAX_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMaxSize() {
    return maxSize;
  }


  @JsonProperty(MAX_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxSize(String maxSize) {
    this.maxSize = maxSize;
  }


  public UiActionUploadDescriptor formats(String formats) {
    
    this.formats = formats;
    return this;
  }

   /**
   * Get formats
   * @return formats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(FORMATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFormats() {
    return formats;
  }


  @JsonProperty(FORMATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormats(String formats) {
    this.formats = formats;
  }


  public UiActionUploadDescriptor uploadButtonTitle(String uploadButtonTitle) {
    
    this.uploadButtonTitle = uploadButtonTitle;
    return this;
  }

   /**
   * Get uploadButtonTitle
   * @return uploadButtonTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(UPLOAD_BUTTON_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUploadButtonTitle() {
    return uploadButtonTitle;
  }


  @JsonProperty(UPLOAD_BUTTON_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadButtonTitle(String uploadButtonTitle) {
    this.uploadButtonTitle = uploadButtonTitle;
  }


  public UiActionUploadDescriptor backgroundColour(String backgroundColour) {
    
    this.backgroundColour = backgroundColour;
    return this;
  }

   /**
   * Get backgroundColour
   * @return backgroundColour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(BACKGROUND_COLOUR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBackgroundColour() {
    return backgroundColour;
  }


  @JsonProperty(BACKGROUND_COLOUR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBackgroundColour(String backgroundColour) {
    this.backgroundColour = backgroundColour;
  }


  public UiActionUploadDescriptor textColour(String textColour) {
    
    this.textColour = textColour;
    return this;
  }

   /**
   * Get textColour
   * @return textColour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(TEXT_COLOUR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTextColour() {
    return textColour;
  }


  @JsonProperty(TEXT_COLOUR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTextColour(String textColour) {
    this.textColour = textColour;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UiActionUploadDescriptor uiActionUploadDescriptor = (UiActionUploadDescriptor) o;
    return Objects.equals(this.title, uiActionUploadDescriptor.title) &&
        Objects.equals(this.description, uiActionUploadDescriptor.description) &&
        Objects.equals(this.maxSize, uiActionUploadDescriptor.maxSize) &&
        Objects.equals(this.formats, uiActionUploadDescriptor.formats) &&
        Objects.equals(this.uploadButtonTitle, uiActionUploadDescriptor.uploadButtonTitle) &&
        Objects.equals(this.backgroundColour, uiActionUploadDescriptor.backgroundColour) &&
        Objects.equals(this.textColour, uiActionUploadDescriptor.textColour);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, maxSize, formats, uploadButtonTitle, backgroundColour, textColour);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiActionUploadDescriptor {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    uploadButtonTitle: ").append(toIndentedString(uploadButtonTitle)).append("\n");
    sb.append("    backgroundColour: ").append(toIndentedString(backgroundColour)).append("\n");
    sb.append("    textColour: ").append(toIndentedString(textColour)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

