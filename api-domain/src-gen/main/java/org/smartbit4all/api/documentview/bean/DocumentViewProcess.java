/*
 * DocumentView API
 * DocumentView API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.documentview.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.smartbit4all.api.documentview.bean.DisplayMode;
import org.smartbit4all.api.documentview.bean.ImageWithAlt;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * DocumentViewProcess
 */
@JsonPropertyOrder({
  DocumentViewProcess.DISPLAY_MODE,
  DocumentViewProcess.PAGE_INDEX,
  DocumentViewProcess.PAGE_COUNT,
  DocumentViewProcess.ZOOM_VALUE,
  DocumentViewProcess.TEXT,
  DocumentViewProcess.MESSAGE,
  DocumentViewProcess.LEFT_BUTTON_ENABLED,
  DocumentViewProcess.RIGHT_BUTTON_ENABLED,
  DocumentViewProcess.LOADING_SPINNER_DISPLAYED,
  DocumentViewProcess.MAIN_IMAGE,
  DocumentViewProcess.THUMBNAILS
})
@JsonTypeName("DocumentViewProcess")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DocumentViewProcess {
  public static final String DISPLAY_MODE = "displayMode";
  private DisplayMode displayMode;

  public static final String PAGE_INDEX = "pageIndex";
  private String pageIndex;

  public static final String PAGE_COUNT = "pageCount";
  private Integer pageCount;

  public static final String ZOOM_VALUE = "zoomValue";
  private Integer zoomValue;

  public static final String TEXT = "text";
  private String text;

  public static final String MESSAGE = "message";
  private String message;

  public static final String LEFT_BUTTON_ENABLED = "leftButtonEnabled";
  private Boolean leftButtonEnabled;

  public static final String RIGHT_BUTTON_ENABLED = "rightButtonEnabled";
  private Boolean rightButtonEnabled;

  public static final String LOADING_SPINNER_DISPLAYED = "loadingSpinnerDisplayed";
  private Boolean loadingSpinnerDisplayed;

  public static final String MAIN_IMAGE = "mainImage";
  private ImageWithAlt mainImage;

  public static final String THUMBNAILS = "thumbnails";
  private List<ImageWithAlt> thumbnails = null;


  public DocumentViewProcess displayMode(DisplayMode displayMode) {
    
    this.displayMode = displayMode;
    return this;
  }

   /**
   * Get displayMode
   * @return displayMode
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(DISPLAY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DisplayMode getDisplayMode() {
    return displayMode;
  }


  @JsonProperty(DISPLAY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayMode(DisplayMode displayMode) {
    this.displayMode = displayMode;
  }


  public DocumentViewProcess pageIndex(String pageIndex) {
    
    this.pageIndex = pageIndex;
    return this;
  }

   /**
   * Get pageIndex
   * @return pageIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(PAGE_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPageIndex() {
    return pageIndex;
  }


  @JsonProperty(PAGE_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPageIndex(String pageIndex) {
    this.pageIndex = pageIndex;
  }


  public DocumentViewProcess pageCount(Integer pageCount) {
    
    this.pageCount = pageCount;
    return this;
  }

   /**
   * Get pageCount
   * @return pageCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(PAGE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPageCount() {
    return pageCount;
  }


  @JsonProperty(PAGE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPageCount(Integer pageCount) {
    this.pageCount = pageCount;
  }


  public DocumentViewProcess zoomValue(Integer zoomValue) {
    
    this.zoomValue = zoomValue;
    return this;
  }

   /**
   * Get zoomValue
   * @return zoomValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(ZOOM_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getZoomValue() {
    return zoomValue;
  }


  @JsonProperty(ZOOM_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setZoomValue(Integer zoomValue) {
    this.zoomValue = zoomValue;
  }


  public DocumentViewProcess text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getText() {
    return text;
  }


  @JsonProperty(TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setText(String text) {
    this.text = text;
  }


  public DocumentViewProcess message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
  }


  public DocumentViewProcess leftButtonEnabled(Boolean leftButtonEnabled) {
    
    this.leftButtonEnabled = leftButtonEnabled;
    return this;
  }

   /**
   * Get leftButtonEnabled
   * @return leftButtonEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(LEFT_BUTTON_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLeftButtonEnabled() {
    return leftButtonEnabled;
  }


  @JsonProperty(LEFT_BUTTON_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLeftButtonEnabled(Boolean leftButtonEnabled) {
    this.leftButtonEnabled = leftButtonEnabled;
  }


  public DocumentViewProcess rightButtonEnabled(Boolean rightButtonEnabled) {
    
    this.rightButtonEnabled = rightButtonEnabled;
    return this;
  }

   /**
   * Get rightButtonEnabled
   * @return rightButtonEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(RIGHT_BUTTON_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRightButtonEnabled() {
    return rightButtonEnabled;
  }


  @JsonProperty(RIGHT_BUTTON_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRightButtonEnabled(Boolean rightButtonEnabled) {
    this.rightButtonEnabled = rightButtonEnabled;
  }


  public DocumentViewProcess loadingSpinnerDisplayed(Boolean loadingSpinnerDisplayed) {
    
    this.loadingSpinnerDisplayed = loadingSpinnerDisplayed;
    return this;
  }

   /**
   * Get loadingSpinnerDisplayed
   * @return loadingSpinnerDisplayed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(LOADING_SPINNER_DISPLAYED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLoadingSpinnerDisplayed() {
    return loadingSpinnerDisplayed;
  }


  @JsonProperty(LOADING_SPINNER_DISPLAYED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadingSpinnerDisplayed(Boolean loadingSpinnerDisplayed) {
    this.loadingSpinnerDisplayed = loadingSpinnerDisplayed;
  }


  public DocumentViewProcess mainImage(ImageWithAlt mainImage) {
    
    this.mainImage = mainImage;
    return this;
  }

   /**
   * Get mainImage
   * @return mainImage
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(MAIN_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImageWithAlt getMainImage() {
    return mainImage;
  }


  @JsonProperty(MAIN_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMainImage(ImageWithAlt mainImage) {
    this.mainImage = mainImage;
  }


  public DocumentViewProcess thumbnails(List<ImageWithAlt> thumbnails) {
    
    this.thumbnails = thumbnails;
    return this;
  }

  public DocumentViewProcess addThumbnailsItem(ImageWithAlt thumbnailsItem) {
    if (this.thumbnails == null) {
      this.thumbnails = new ArrayList<>();
    }
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Get thumbnails
   * @return thumbnails
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(THUMBNAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ImageWithAlt> getThumbnails() {
    return thumbnails;
  }


  @JsonProperty(THUMBNAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThumbnails(List<ImageWithAlt> thumbnails) {
    this.thumbnails = thumbnails;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentViewProcess documentViewProcess = (DocumentViewProcess) o;
    return Objects.equals(this.displayMode, documentViewProcess.displayMode) &&
        Objects.equals(this.pageIndex, documentViewProcess.pageIndex) &&
        Objects.equals(this.pageCount, documentViewProcess.pageCount) &&
        Objects.equals(this.zoomValue, documentViewProcess.zoomValue) &&
        Objects.equals(this.text, documentViewProcess.text) &&
        Objects.equals(this.message, documentViewProcess.message) &&
        Objects.equals(this.leftButtonEnabled, documentViewProcess.leftButtonEnabled) &&
        Objects.equals(this.rightButtonEnabled, documentViewProcess.rightButtonEnabled) &&
        Objects.equals(this.loadingSpinnerDisplayed, documentViewProcess.loadingSpinnerDisplayed) &&
        Objects.equals(this.mainImage, documentViewProcess.mainImage) &&
        Objects.equals(this.thumbnails, documentViewProcess.thumbnails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayMode, pageIndex, pageCount, zoomValue, text, message, leftButtonEnabled, rightButtonEnabled, loadingSpinnerDisplayed, mainImage, thumbnails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentViewProcess {\n");
    sb.append("    displayMode: ").append(toIndentedString(displayMode)).append("\n");
    sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("    zoomValue: ").append(toIndentedString(zoomValue)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    leftButtonEnabled: ").append(toIndentedString(leftButtonEnabled)).append("\n");
    sb.append("    rightButtonEnabled: ").append(toIndentedString(rightButtonEnabled)).append("\n");
    sb.append("    loadingSpinnerDisplayed: ").append(toIndentedString(loadingSpinnerDisplayed)).append("\n");
    sb.append("    mainImage: ").append(toIndentedString(mainImage)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

