/*
 * storage api
 * The storage api is a generic possibility to store and load objects.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.storage.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The request for adding and removing items from the ObjectMap. The Api accept this object as an input and executes the commands. 
 */
@ApiModel(description = "The request for adding and removing items from the ObjectMap. The Api accept this object as an input and executes the commands. ")
@JsonPropertyOrder({
  ObjectMapRequest.MAP_URI,
  ObjectMapRequest.MAP_NAME,
  ObjectMapRequest.URIS_TO_REMOVE,
  ObjectMapRequest.URIS_TO_ADD
})
@JsonTypeName("ObjectMapRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectMapRequest {
  public static final String MAP_URI = "mapUri";
  private URI mapUri;

  public static final String MAP_NAME = "mapName";
  private String mapName;

  public static final String URIS_TO_REMOVE = "urisToRemove";
  private Map<String, URI> urisToRemove = null;

  public static final String URIS_TO_ADD = "urisToAdd";
  private Map<String, URI> urisToAdd = null;


  public ObjectMapRequest mapUri(URI mapUri) {
    
    this.mapUri = mapUri;
    return this;
  }

   /**
   * If we know the exact uri of the given map, then we can use this to identify the map exactly.
   * @return mapUri
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "If we know the exact uri of the given map, then we can use this to identify the map exactly.")
  @JsonProperty(MAP_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getMapUri() {
    return mapUri;
  }


  @JsonProperty(MAP_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMapUri(URI mapUri) {
    this.mapUri = mapUri;
  }


  public ObjectMapRequest mapName(String mapName) {
    
    this.mapName = mapName;
    return this;
  }

   /**
   * If we know the name of the given map, then we can use this to identify the map exactly in the context.
   * @return mapName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If we know the name of the given map, then we can use this to identify the map exactly in the context.")
  @JsonProperty(MAP_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMapName() {
    return mapName;
  }


  @JsonProperty(MAP_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMapName(String mapName) {
    this.mapName = mapName;
  }


  public ObjectMapRequest urisToRemove(Map<String, URI> urisToRemove) {
    
    this.urisToRemove = urisToRemove;
    return this;
  }

  public ObjectMapRequest putUrisToRemoveItem(String key, URI urisToRemoveItem) {
    if (this.urisToRemove == null) {
      this.urisToRemove = new HashMap<>();
    }
    this.urisToRemove.put(key, urisToRemoveItem);
    return this;
  }

   /**
   * Get urisToRemove
   * @return urisToRemove
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(URIS_TO_REMOVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, URI> getUrisToRemove() {
    return urisToRemove;
  }


  @JsonProperty(URIS_TO_REMOVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrisToRemove(Map<String, URI> urisToRemove) {
    this.urisToRemove = urisToRemove;
  }


  public ObjectMapRequest urisToAdd(Map<String, URI> urisToAdd) {
    
    this.urisToAdd = urisToAdd;
    return this;
  }

  public ObjectMapRequest putUrisToAddItem(String key, URI urisToAddItem) {
    if (this.urisToAdd == null) {
      this.urisToAdd = new HashMap<>();
    }
    this.urisToAdd.put(key, urisToAddItem);
    return this;
  }

   /**
   * Get urisToAdd
   * @return urisToAdd
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(URIS_TO_ADD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, URI> getUrisToAdd() {
    return urisToAdd;
  }


  @JsonProperty(URIS_TO_ADD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrisToAdd(Map<String, URI> urisToAdd) {
    this.urisToAdd = urisToAdd;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectMapRequest objectMapRequest = (ObjectMapRequest) o;
    return Objects.equals(this.mapUri, objectMapRequest.mapUri) &&
        Objects.equals(this.mapName, objectMapRequest.mapName) &&
        Objects.equals(this.urisToRemove, objectMapRequest.urisToRemove) &&
        Objects.equals(this.urisToAdd, objectMapRequest.urisToAdd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mapUri, mapName, urisToRemove, urisToAdd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectMapRequest {\n");
    sb.append("    mapUri: ").append(toIndentedString(mapUri)).append("\n");
    sb.append("    mapName: ").append(toIndentedString(mapName)).append("\n");
    sb.append("    urisToRemove: ").append(toIndentedString(urisToRemove)).append("\n");
    sb.append("    urisToAdd: ").append(toIndentedString(urisToAdd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

