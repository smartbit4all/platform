/*
 * storage api
 * The storage api is a generic possibility to store and load objects.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.storage.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.smartbit4all.api.storage.bean.BranchOperation;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The object branch data is used to hold all the operations about an object on a branch. This object is constructed when the first opartion is executed with the given object. 
 */
@ApiModel(description = "The object branch data is used to hold all the operations about an object on a branch. This object is constructed when the first opartion is executed with the given object. ")
@JsonPropertyOrder({
  ObjectBranchData.OBJECT_URI,
  ObjectBranchData.INIT,
  ObjectBranchData.REBASES,
  ObjectBranchData.MERGES
})
@JsonTypeName("ObjectBranchData")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectBranchData {
  public static final String OBJECT_URI = "objectUri";
  private URI objectUri;

  public static final String INIT = "init";
  private BranchOperation init;

  public static final String REBASES = "rebases";
  private Map<String, BranchOperation> rebases = new HashMap<>();

  public static final String MERGES = "merges";
  private Map<String, BranchOperation> merges = new HashMap<>();


  public ObjectBranchData objectUri(URI objectUri) {
    
    this.objectUri = objectUri;
    return this;
  }

   /**
   * Get objectUri
   * @return objectUri
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(OBJECT_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getObjectUri() {
    return objectUri;
  }


  @JsonProperty(OBJECT_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObjectUri(URI objectUri) {
    this.objectUri = objectUri;
  }


  public ObjectBranchData init(BranchOperation init) {
    
    this.init = init;
    return this;
  }

   /**
   * Get init
   * @return init
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(INIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BranchOperation getInit() {
    return init;
  }


  @JsonProperty(INIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInit(BranchOperation init) {
    this.init = init;
  }


  public ObjectBranchData rebases(Map<String, BranchOperation> rebases) {
    
    this.rebases = rebases;
    return this;
  }

  public ObjectBranchData putRebasesItem(String key, BranchOperation rebasesItem) {
    this.rebases.put(key, rebasesItem);
    return this;
  }

   /**
   * The rebase operations that construct new versions on the branch.
   * @return rebases
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The rebase operations that construct new versions on the branch.")
  @JsonProperty(REBASES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, BranchOperation> getRebases() {
    return rebases;
  }


  @JsonProperty(REBASES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRebases(Map<String, BranchOperation> rebases) {
    this.rebases = rebases;
  }


  public ObjectBranchData merges(Map<String, BranchOperation> merges) {
    
    this.merges = merges;
    return this;
  }

  public ObjectBranchData putMergesItem(String key, BranchOperation mergesItem) {
    this.merges.put(key, mergesItem);
    return this;
  }

   /**
   * The merge operations that construct new versions in the original object.
   * @return merges
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The merge operations that construct new versions in the original object.")
  @JsonProperty(MERGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, BranchOperation> getMerges() {
    return merges;
  }


  @JsonProperty(MERGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerges(Map<String, BranchOperation> merges) {
    this.merges = merges;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectBranchData objectBranchData = (ObjectBranchData) o;
    return Objects.equals(this.objectUri, objectBranchData.objectUri) &&
        Objects.equals(this.init, objectBranchData.init) &&
        Objects.equals(this.rebases, objectBranchData.rebases) &&
        Objects.equals(this.merges, objectBranchData.merges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectUri, init, rebases, merges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectBranchData {\n");
    sb.append("    objectUri: ").append(toIndentedString(objectUri)).append("\n");
    sb.append("    init: ").append(toIndentedString(init)).append("\n");
    sb.append("    rebases: ").append(toIndentedString(rebases)).append("\n");
    sb.append("    merges: ").append(toIndentedString(merges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

