/*
 * storage api
 * The storage api is a generic possibility to store and load objects.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.storage.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * The instance of an aspect with the fully qualified name of the type. It can help to read the object of the aspect with type information.  
 */
@ApiModel(description = "The instance of an aspect with the fully qualified name of the type. It can help to read the object of the aspect with type information.  ")
@JsonPropertyOrder({
  ObjectAspect.TYPE_QUALIFIED_NAME,
  ObjectAspect.OBJECT_AS_MAP
})
@JsonTypeName("ObjectAspect")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectAspect {
  public static final String TYPE_QUALIFIED_NAME = "typeQualifiedName";
  private String typeQualifiedName;

  public static final String OBJECT_AS_MAP = "objectAsMap";
  private Map<String, Object> objectAsMap = null;

  public ObjectAspect() { 
  }

  public ObjectAspect typeQualifiedName(String typeQualifiedName) {
    
    this.typeQualifiedName = typeQualifiedName;
    return this;
  }

   /**
   * The fully qualified name of the given object saved into this aspect.
   * @return typeQualifiedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fully qualified name of the given object saved into this aspect.")
  @JsonProperty(TYPE_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeQualifiedName() {
    return typeQualifiedName;
  }


  @JsonProperty(TYPE_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeQualifiedName(String typeQualifiedName) {
    this.typeQualifiedName = typeQualifiedName;
  }


  public ObjectAspect objectAsMap(Map<String, Object> objectAsMap) {
    
    this.objectAsMap = objectAsMap;
    return this;
  }

  public ObjectAspect putObjectAsMapItem(String key, Object objectAsMapItem) {
    if (this.objectAsMap == null) {
      this.objectAsMap = new HashMap<>();
    }
    this.objectAsMap.put(key, objectAsMapItem);
    return this;
  }

   /**
   * Get objectAsMap
   * @return objectAsMap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(OBJECT_AS_MAP)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getObjectAsMap() {
    return objectAsMap;
  }


  @JsonProperty(OBJECT_AS_MAP)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setObjectAsMap(Map<String, Object> objectAsMap) {
    this.objectAsMap = objectAsMap;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectAspect objectAspect = (ObjectAspect) o;
    return Objects.equals(this.typeQualifiedName, objectAspect.typeQualifiedName) &&
        Objects.equals(this.objectAsMap, objectAspect.objectAsMap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeQualifiedName, objectAsMap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectAspect {\n");
    sb.append("    typeQualifiedName: ").append(toIndentedString(typeQualifiedName)).append("\n");
    sb.append("    objectAsMap: ").append(toIndentedString(objectAsMap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

