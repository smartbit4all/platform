/*
 * Uitree Api
 * Tree domain objects
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.smartbit4all.api.uitree.bean;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.smartbit4all.api.uitree.bean.UiTreePath;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Describes the default selected node of the tree after rendering. 
 */
@ApiModel(description = "Describes the default selected node of the tree after rendering. ")
@JsonPropertyOrder({
  UiTreeDefaultSelection.PATH,
  UiTreeDefaultSelection.HANDLE_SELECTION,
  UiTreeDefaultSelection.ONE_TIME_ONLY
})
@JsonTypeName("UiTreeDefaultSelection")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UiTreeDefaultSelection {
  public static final String PATH = "path";
  private UiTreePath path;

  public static final String HANDLE_SELECTION = "handleSelection";
  private Boolean handleSelection = false;

  public static final String ONE_TIME_ONLY = "oneTimeOnly";
  private Boolean oneTimeOnly = true;

  public UiTreeDefaultSelection() { 
  }

  public UiTreeDefaultSelection path(UiTreePath path) {
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nonnull
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UiTreePath getPath() {
    return path;
  }


  @JsonProperty(PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPath(UiTreePath path) {
    this.path = path;
  }


  public UiTreeDefaultSelection handleSelection(Boolean handleSelection) {
    
    this.handleSelection = handleSelection;
    return this;
  }

   /**
   * Signals whether the tree should handle the default selected node after rendering. 
   * @return handleSelection
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Signals whether the tree should handle the default selected node after rendering. ")
  @JsonProperty(HANDLE_SELECTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHandleSelection() {
    return handleSelection;
  }


  @JsonProperty(HANDLE_SELECTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHandleSelection(Boolean handleSelection) {
    this.handleSelection = handleSelection;
  }


  public UiTreeDefaultSelection oneTimeOnly(Boolean oneTimeOnly) {
    
    this.oneTimeOnly = oneTimeOnly;
    return this;
  }

   /**
   * Signals whether the selection should be set only during initialisation, or every time the tree is rendered. 
   * @return oneTimeOnly
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Signals whether the selection should be set only during initialisation, or every time the tree is rendered. ")
  @JsonProperty(ONE_TIME_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getOneTimeOnly() {
    return oneTimeOnly;
  }


  @JsonProperty(ONE_TIME_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOneTimeOnly(Boolean oneTimeOnly) {
    this.oneTimeOnly = oneTimeOnly;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UiTreeDefaultSelection uiTreeDefaultSelection = (UiTreeDefaultSelection) o;
    return Objects.equals(this.path, uiTreeDefaultSelection.path) &&
        Objects.equals(this.handleSelection, uiTreeDefaultSelection.handleSelection) &&
        Objects.equals(this.oneTimeOnly, uiTreeDefaultSelection.oneTimeOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, handleSelection, oneTimeOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiTreeDefaultSelection {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    handleSelection: ").append(toIndentedString(handleSelection)).append("\n");
    sb.append("    oneTimeOnly: ").append(toIndentedString(oneTimeOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

