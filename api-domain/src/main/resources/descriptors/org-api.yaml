openapi: 3.0.1
info:
  title: org api
  description: org api
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
- name: User
- name: Group
paths:

  #### USER ####

  /getUser/{userUri}:
    get:
      tags:
      - User
      summary: 'Returns the requested User object'
      operationId: 'getUser'
      parameters: 
        - in: path
          name: userUri
          schema:
            type: string
            format: uri
          required: true
          description: 'The URI of the user the data is requested for'
      responses:
        '200':
          description: 'Returns the requested User object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                
  /getAllUsers:
    get:
      tags:
      - User
      summary: 'Returns all users'
      operationId: 'getAllUsers'
      responses:
        '200':
          description: 'Returns all users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    
  /getUsersOfGorup/{groupUri}:
    get:
      tags:
      - User
      summary: 'Returns all users of the specified group'
      operationId: 'getUsersOfGorup'
      parameters: 
        - in: path
          name: groupUri
          schema:
            type: string
            format: uri
          required: true
          description: 'The URI of the group the users are requested from'
      responses:
        '200':
          description: 'Returns all users of the specified group'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /getGroupsOfUser/{userUri}:
    get:
      tags:
      - User
      summary: 'Returns the groups of the specified user'
      operationId: 'getGroupsOfUser'
      parameters: 
        - in: path
          name: userUri
          schema:
            type: string
            format: uri
          required: true
          description: 'The URI of the user the groups are requested from'
      responses:
        '200':
          description: 'Returns the groups of the specified user'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
                  
  #### GROUP ####                
                  
  /getGroup/{groupUri}:
    get:
      tags:
      - Group
      summary: 'Returns the requested Group object'
      operationId: 'getGroup'
      parameters: 
        - in: path
          name: groupUri
          schema:
            type: string
            format: uri
          required: true
          description: 'The URI of the group the data is requested for'
      responses:
        '200':
          description: 'Returns the requested Group object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
                
  /getRootGroups:
    get:
      tags:
      - Group
      summary: 'Returns the groups without parent'
      operationId: 'getRootGroups'
      responses:
        '200':
          description: 'Returns the groups without parent'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'              
                
components:
  schemas:
    User:
      type: object
      required: [uri, attributes]
      properties:
        uri:
          type: string
          format: uri
          description: 'The uri of the user'
        username: 
          type: string
          description: 'The username'
        name: 
          type: string
          description: 'The name fo the user'
        email:
          type: string
          format: email
          description: 'The registered email address that indentifies the user'
        password:
          type: string
          format: password
          description: 'The encripted password of the user'
        inactive:
          type: boolean
          default: false 
        attributes:
          type: object
          additionalProperties:
            type: string
    Group:
      type: object
      required: [uri, name, kind, children]
      properties:
        uri:
          type: string
          format: uri
          description: 'The uri of the group'
        title:
          type: string
          description: 'The title of the group, can be used as display name'
        name:
          type: string
          description: 'The name of the group'
        description:
          type: string
          description: 'The description of the group'
        kindCode:
          type: string
          description: 'The kind code of the group. Eg.: role, organization, team etc.'
        builtIn:
          type: boolean
          default: false
          description: 'Built in groups are unmodifiable'
        children:
          type: array
          items:
            type: string
            format: uri
          description: 'The uris of the child groups'
    GroupsOfUser:
      type: object
      required: [uri, userUri, groups]
      properties:
        uri:
          type: string
          format: uri
        userUri:
          type: string
          format: uri
        groups:
          type: array
          items:
            type: string
            format: uri
    GroupsOfUserCollection:
      type: object
      required: [uri, groupsOfUserCollection]
      properties:
        uri:
          type: string
          format: uri
        groupsOfUserCollection:
          type: array
          items:
            $ref: '#/components/schemas/GroupsOfUser'  
    UsersOfGroup:
      type: object
      required: [uri, groupUri, users]
      properties:
        uri:
          type: string
          format: uri
        groupUri:
          type: string
          format: uri
        users:
          type: array
          items:
            type: string
            format: uri
    UsersOfGroupCollection:
      type: object
      required: [uri, usersOfGroupCollection]
      properties:
        uri:
          type: string
          format: uri
        usersOfGroupCollection:
          type: array
          items:
            $ref: '#/components/schemas/UsersOfGroup'
    
    OrgState:
      type: object
      required: [users, groups, groupsOfGroup, usersOfGroup]
      properties:
        uri:
          type: string
          format: uri
        users:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/User'
        groups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Group'
        usersOfGroup:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/User'
        groupsOfGroup:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Group'
    OrgBulkUpdate:
      type: object
      required: [users, groups, groupsOfGroup, usersOfGroup]
      properties:
        uri:
          type: string
          format: uri
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserUpdate'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupUpdate'
        groupsOfGroup:
          type: array
          items:
            $ref: '#/components/schemas/GroupOfGroupUpdate'
        usersOfGroup:
          type: array
          items:
            $ref: '#/components/schemas/UserOfGroupUpdate'
    BulkUpdateOperation:
      type: string
      enum:
        - INSERT
        - UPDATE
        - DELETE
    UserUpdate:
      type: object
      properties:
        uri:
          type: string
          format: uri
        user:
          $ref: '#/components/schemas/User'
        operation:
          $ref: '#/components/schemas/BulkUpdateOperation'
    GroupUpdate:
      type: object
      properties:
        uri:
          type: string
          format: uri
        group:
          $ref: '#/components/schemas/Group'
        operation:
          $ref: '#/components/schemas/BulkUpdateOperation'
    GroupOfGroupUpdate:
      type: object
      properties:
        uri:
          type: string
          format: uri
        parentGroup:
          $ref: '#/components/schemas/Group'
        childGroup:
          $ref: '#/components/schemas/Group'
        operation:
          $ref: '#/components/schemas/BulkUpdateOperation'
    UserOfGroupUpdate:
      type: object
      properties:
        uri:
          type: string
          format: uri
        group:
          $ref: '#/components/schemas/Group'
        user:
          $ref: '#/components/schemas/User'
        operation:
          $ref: '#/components/schemas/BulkUpdateOperation'
    ACLObject:
      type: object
      properties:    
        uri: 
          type: string
          format: uri
        acl:
          $ref: '#/components/schemas/ACL'
    ACL:
      type: object
      description: |
        The ACL config can be attached as aspect to every object in the storage. This describes available oparations for the subjects.
        The subjects can be contributed by adding new AccessControlApi to the application. It defines the available subjects and produce
        the list of subjects a given user belongs to. It does not have any uri because it usually saved as aspect or inner object as well.
      required: [rootEntry]
      properties:
        rootEntry:
          $ref: '#/components/schemas/ACLEntry'
    ACLEntry:
      type: object
      description: |
        The ACL entry refers to one subject and defines the operations available for the given subject. If it is a set then ACL set is an oragnization unit 
        for other ACLEntries referring to the Subjects. An ACLSet can define the operation that can be all the set operations like: UNION, INTERSECT, DIF, SYMMETRICDIF.
        It is used when evaluating the ACL and calculate the operations available for a user or try to identify the set of users for an operation.
      required: [entryKind, entries, operations]
      properties:
        entryKind:
          description: |
            The entry can refer to a subject that defines a set of users. Or else it can be a set of other ACLEnries recursively.
            The evaluation is using the theories if mathematical sets.
          enum: [SUBJECT, SET]
          default: SUBJECT
        subject:
          description: |
            The reference to the subject defined in the given application. It is set when the kind is SUBJECT.
          $ref: '#/components/schemas/Subject'
        subjectCondition:
          description: |
            If the subject defines the users belongs to the given referred object then the condition is IN. If we would like to define the inverse
            situation then the condition is NOTIN.
          enum: [IN, NOTIN]
          default: IN
        setOperation:
          enum: [UNION, INTERSECT, DIF, SYMMETRICDIF]
          default: UNION
        operations:
          description: The unique identifiers of the operations defined in the given application.
          type: array
          items:
            type: string
        entries:
          description: |
            The list if entries in the given set if the kind is SET.
          type: array
          items:
            $ref: '#/components/schemas/ACLEntry'
    SubjectList:
      type: object
      description: |
        A list of subjects belongs to a given subject model.
      required: [model, items]
      properties:
        model:
          type: string
          description: |
            The name of the subject model.
        items:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
    Subject:
      type: object
      description: |
        The subject is a special selector for users where we assign a subject or a filter for subjects to an object. This object is always a
        inline object, part of the object that describes the given situation.
      required: [type, ref, cond]
      properties:
        type:
          type: string
          description: |
            The unique identifier of the type in the SubjectModel. The helps to evaluate if a given user is part of this subject. The subject model is
            saved here it is managed by the code that uses this Subject. Like the ACL knows that the ACLSubjectModel is used to assign the access control
            list for the given objects.
        ref:
          type: string
          format: uri
          description: |
            The reference to the object referred by this subject. It can be the latest uri of a user, a group or whatever subject we have.
    SubjectModel:
      type: object
      description: |
        The subject model consists of SubjectDescriptors that defines the available subject types. We can select from the available subjects
        to compile a Subject instance object that defines a set of user at the end.
      required: [uri, descriptors]
      properties:
        uri:
          type: string
          format: uri
        name:
          type: string
          description: The name of the subject model that identifies it as a global identifier in an application tenant.
        title:
          type: LangString
        descriptors:
          type: array
          description: The subject descriptors identified by their unique name.
          items:
            $ref: '#/components/schemas/SubjectTypeDescriptor'
    SubjectTypeDescriptor:
      type: object
      description: |
        The ACL subject type is all the subject types that are available in th application. Every subject type must provide SearchIndex
        to be able to select the given object. This type defines how get the unique identifier.
      required: [uri, name, selectionConfig]
      properties:
        name:
          type: string
          description: The name of the subject type.
        title:
          type: LangString
        selectionConfig:
          type: SearchPageConfig
          description: |
            The parameters to open the SearchIndexResultPage for the selection. It defines the name of the search index and also the
            columns of the grid and the filter model.
        parentPropertyName:
          type: string
          description: |
            The property name of the parent property. If it is set then the selector page can show hierarchical view.
        apiName:
          type: string
          description: |
            The name of the api that manages the given subject. We have to provide the necessary apis in advance before we add 
