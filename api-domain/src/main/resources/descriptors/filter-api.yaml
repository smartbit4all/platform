openapi: 3.0.1
info:
  title: Filter API
  description: Filter API
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
  - name: filter
    description: filter
paths:
  /nope:
    post:
      summary: Placeholder for generation
      responses:
        '200':
          description: nope
components:
  schemas:
    FilterConfigMode:
      type: string
      enum: [static, simple_dynamic, dynamic]
    FilterConfig:
      type: object
      properties:
        filterGroupMetas:
          type: array
          items:
            $ref: '#/components/schemas/FilterGroupMeta'
        defaultFilterStyle:
          type: string
        defaultFilterGroupStyle:
          type: string
    FilterFieldMeta:
      type: object
      description: "Descriptor of a possible filter field. This field doesn't have to correspond to an existing entity's property, it is simple a way of filtering."
      properties:
        id:
          type: string
          description: 'Identifier of the filter field metadata. Not mandatory, specify only if in use.'
        labelCode:
          type: string
          description: 'Code of label to display for this filter field selector.'
        iconCode:
          type: string
          description: 'Code of icon to display for this filter field selector.'
        style:
          type: string
        operations:
          type: array
          items:
            $ref: '#/components/schemas/FilterOperation'
    FilterGroupMeta:
      type: object
      properties:
        id:
          type: string
          description: 'Identifier of the filter group metadata. Not mandatory, specify only if in use.'
        filterFieldMetas:
          type: array
          items:
            $ref: '#/components/schemas/FilterFieldMeta'
        labelCode:
          type: string
        iconCode:
          type: string
        style:
          type: string
        type:
          $ref: '#/components/schemas/FilterGroupType'
    FilterOperation:
      type: object
      description: 'Defines a possible way of using a filter field, with specifying Properties as well. For example: exact match, like, sounds like, interval, etc.'
      properties:
        id:
          type: string
          description: 'Identifier of the filter operation within the possible filter operations list of a filter field.'
        filterView:
          type: string
          description: 'Declarative name of a FilterOperationUI, which will handle this operation.'
        propertyUri1:
          type: string
          format: uri
          description: 'Property identifier, specifies which property should be used in this filter.'
        propertyUri2:
          type: string
          format: uri
          description: 'Property identifier, specifies which property should be used in this filter.'
        propertyUri3:
          type: string
          format: uri
          description: 'Property identifier, specifies which property should be used in this filter.'
        possibleValuesUri:
          type: string
          format: uri
          description: 'Value set identifer for selections. Values can be aquired by ValueAPI.'
        operationCode:
          type: string
          description: 'Operation code, specifies the operator of the condition.'
        labelCode:
          type: string
          description: 'Code of label to display for this operation.'
        iconCode:
          type: string
          description: 'Icon'
    FilterGroupType:
      type: string
      enum: [
          AND, OR
        ]
    FilterGroup:
      type: object
      description: 'AND / OR group of filters / groups.'
      properties:
        name:
          type: string
          description: Name of the group.
        type:
          $ref: '#/components/schemas/FilterGroupType'
        filterFields:
          type: array
          items:
            $ref: '#/components/schemas/FilterField'
        filterGroups:
          type: array
          items:
            $ref: '#/components/schemas/FilterGroup'
        isNegated:
          type: boolean
    FilterOperandValue:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    FilterField:
      type: object
      properties:
        propertyUri1:
          type: string
          format: uri
          description: 'Property identifier, specifies which property should be used in this filter.'
        propertyUri2:
          type: string
          format: uri
          description: 'Property identifier, specifies which property should be used in this filter.'
        propertyUri3:
          type: string
          format: uri
          description: 'Property identifier, specifies which property should be used in this filter.'
        operationCode:
          type: string
          description: 'Operation code, specifies the operator of the condition.'
        value1:
          $ref: '#/components/schemas/FilterOperandValue'
        value2:
          $ref: '#/components/schemas/FilterOperandValue'
        value3:
          $ref: '#/components/schemas/FilterOperandValue'
        value4:
          $ref: '#/components/schemas/FilterOperandValue'
        selectedValues:
          type: array
          items:
            type: string
            format: uri
