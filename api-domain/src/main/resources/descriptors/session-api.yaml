openapi: 3.0.1
info:
  title: Session api
  description: Session api...
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
  - name: Session
paths:
  /session:
    put:
      tags:
      - Session
      summary: Creates a new session
      operationId: 'startSession'
      responses:
        '200':
          description: 'The session has started'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfoData'
        '500':
          description: 'Error during session creation'
    get:
      tags:
      - Session
      summary: Returns the existing session info
      operationId: 'getSession'
      responses:
        '200':
          description: 'Returns the existing session info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfoData'
        '400':
          description: 'Missing JWT token'
        '404':
          description: 'The session does not exists with the given token'
        '500':
          description: 'Error occured while fetching the session data'
  /authenticationProviders:
    get:
      tags:
      - Session
      summary: Returns the available authentication providers
      operationId: 'getAuthenticationProviders'
      responses:
        '200':
          description: 'Returns the available authentication providers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthenticationProvidersResponse'
        '400':
          description: 'Missing JWT token'
        '404':
          description: 'The session does not exists with the given token'
        '500':
          description: 'Error occured while fetching the session data'
components:
  schemas:
    Session:
      type: object
      required: [authentications,viewContexts]
      properties:
        uri:
          type: string
          format: uri
        expiration:
          type: string
          format: date-time
        locale:
          type: string
        authentications:
          type: array
          items:
            $ref: '#/components/schemas/AccountInfo'
        user:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: string
        viewContexts:
          type: array
          items:
            $ref: '#/components/schemas/ViewContext'
    SessionInfoData:
      type: object
      required: [sid]
      properties:
        sid:
          type: string
        expiration:
          type: string
          format: date-time
        locale:
          type: string
        authentications:
          type: array
          items:
            $ref: '#/components/schemas/AccountInfo'
    AccountInfo:
      type: object
      required: [kind, userName, displayName]
      properties:
        kind:
          type: string
        userName:
          type: string
        displayName:
          type: string
        imageContent:
          type: string
          format: byte # or binary?
        imageFormat:
          type: string
        roles:
          type: array
          items:
            type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    GetAuthenticationProvidersResponse:
      type: object
      required: [authenticationProviders]
      properties:
        authenticationProviders:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationProviderData'
    AuthenticationProviderData:
      type: object
      required: [kind]
      properties:
        kind:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    ViewContext:
      type: object
      description: The same session can be valid / used in multiple UIs, this object represents a UI.
      required: [uuid,views,messages]
      properties:
        uuid:
          type: string
          format: uuid
        views:
          type: array
          items:
            $ref: '#/components/schemas/ViewData'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageData'
    ViewData:
      type: object
      required: [uuid,viewName,state,type,parameters]
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier of the View.
        viewName:
          type: string
        objectUri:
          type: string
          format: uri
        branchUri:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties: true
        state:
          $ref: '#/components/schemas/ViewState'
        type:
          $ref: '#/components/schemas/ViewType'
        containerUuid:
          type: string
          format: uuid
    ViewState:
      type: string
      enum:
        - to_open
        - opened
        - to_close
        - closed
      default: to_open
    ViewType:
      type: string
      enum:
        - normal
        - dialog
        - embedded
      default: normal
    MessageData:
      type: object
      required: [uuid,type,possibleResults]
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier of the Message.
          $ref: '#/components/schemas/MessageType'
        header:
          type: string
        text:
          type: string
        possibleResults:
          type: array
          items:
            $ref: '#/components/schemas/MessageResult'
        selectResult:
          $ref: '#/components/schemas/MessageResult'
    MessageType:
      type: string
      enum:
        - info
        - question
        - warning
        - error
    MessageResult:
      type: object
      properties:
        code:
          type: string
        label:
          type: string
        icon:
          type: string
        type:
          $ref: '#/components/schemas/MessageResultType'
    MessageResultType:
      type: string
      enum:
        - confirm
        - reject
        - cancel