openapi: 3.0.1
info:
  title: Object api
  description: |
    The object api responsible for the domain object meta information including the object definitions
    and the relations among them. These objects are stored because the modules can contribute. The modules
    have their own ObjectApi that manages the storage and ensure the up-to-date view of the current data.
    The algorithms are running on the ObjectApi cache refreshed periodically.
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
  - name: Object
    description: Object
paths: {}
components:
  schemas:
    ReferenceDefinitionData:
      type: object
      description: |
        The reference definition is a directed navigation between objects. Its name is unique inside the source object that can have only one
        outgoing reference with the same name. In the target object the source object and the name is unique together but the name itself is not
        enough to identify an incoming reference.
      required: 
      - "uri"
      - sourceObjectName
      - propertyPath
      - targetObjectName
      - aggregation
      - multiplicity
      properties:
        uri:
          type: string
          format: uri
          description: |
            The storage identifier of the given definition. It is calculated by the qualified name of the object and the name name of the
            reference. For example object:/com/smartbit4all/mydomain/model/MyObject/firstReference could be a calculated URI for a given reference.
            By deafult it could be a good idea to name the reference by the name of the property that contains the reference value.
        backReference:
          type: string
          format: uri
          description: If an association between two object is navigable into both direction then this uri refers to the opposite reference.
        sourceObjectName:
          type: string
          description: The name of the target object.
        propertyPath:
          description:  |
            The descriptor of a property in a domain object. If there is a simple property then we have only the path. The path is a navigation path to
            identify the property in the object or in its contained objects. The path can be "parent" if the parent property is directly a property inside the
            object. It can be myContained/parent if it is the propery of the myContained object. The property must be an uri or unique identifier to be able to 
            access the object directly by its value.
            If we have an array the the array path contains the path of the array property in the same way. The array must contains uri / identifier values.
          type: string
        targetObjectName:
          type: string
          description: The name of the target object.
        aggregation:
          $ref: '#/components/schemas/AggregationKind'
        propertyKind:
          $ref: '#/components/schemas/ReferencePropertyKind'
    AggregationKind:
      type: string
      description: |
        COMPOSITE means that the source contains the target object. The target object is accessible 
        only from the source. NONE means normal reference, no composition. SHARED is not implemented yet.
      default: none
      enum: [none, shared, composite]
    ReferencePropertyKind:
      type: string
      enum: [reference, list, map]
    ObjectNodeData:
      type: object
      description: |
        This object contains an object instance as map. It can be used to separate the references and the business data in the API implementations. The object node contains 
        an object returned by the RetrievalApi. It can manage the state of the object and we can use it to produce ApplyChangeRequest at the end of the modification.
      required: [qualifiedName, versionNr, state, objectAsMap, references, referenceLists, referenceMaps] 
      properties:
        objectUri:
          type: string
          format: uri
          description: |
            The object URI of the given object state. It is version URI to be able to refere to the given version of the data.
        qualifiedName:
          type: string
          description: |
            The qualified globaly unique name of the object definition. In a java application it is the qualified name of the class.
        storageSchema:
          type: string
          description: |
            The logical storage scheme if it is used in the given storage implementation.
        versionNr:
          type: integer
          format: int64
          default: 0
          description: |
            The version number of the given node. It is filled by the retrieve so if we create a new node
            then it is 0 by default.
        state:
          $ref: '#/components/schemas/ObjectNodeState'
        objectAsMap:
          type: object
          additionalProperties: true
        references:
          type: ObjectNodeData
          additionalProperties:
            $ref: '#/components/schemas/ObjectNodeData'
        referenceLists:
          type: ObjectNodeData
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ObjectNodeData'
        referenceMaps:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/ObjectNodeData'
        resultUri:
          type: string
          format: uri
          description: |
            The object URI after an ObjectApi.save. It can be used to read the result Uri after save.
    ObjectNodeState:
      type: string
      default: NOP
      enum: [NOP, NEW, MODIFIED, REMOVED]
    RetrievalMode:
      type: string
      default: NORMAL
      enum: [NORMAL, LATEST, EXACT_VERSION]
