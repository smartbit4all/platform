openapi: 3.0.1
info:
  title: value api
  description: value api
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
- name: Value
paths:
  /possibleValues/{objectUri}:
    get:
      tags:
      - Value
      summary: Returns the possible value set for the given URI
      operationId: 'possibleValues'
      parameters: 
        - in: path
          name: objectUri
          schema:
            type: string
          required: true
          description: 'The URI of the field the possible values are requested for'
      responses:
        '200':
          description: 'The requested possible values'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Value'
components:
  schemas:
    Value:
      type: object
      required: []
      properties:
        objectUri:
          type: string
          format: uri
          description: 'The uri the object of the value can be accessed.'
        code:
          type: string
          description: The logical code of the selectable value.
        displayValue: 
          type: string
          description: 'The string value that can be shown on ui. It might be a label code or the exact label.'
        iconCode:
          type: string
          description: 'The code of icon that can be associatied with the value. It may be a uri.'
    ValueSetData:
      type: object
      required: [qualifiedName, properties, values]
      description: |
        The instance of the ValueSetDefintion that conatins every information inline.
      properties:
        qualifiedName:
          type: string
        keyProperty:
          type: string
          description: |
            The name of the key property in the value. It will be the value that copied into the reference when a given
            item is selected from the value set.
        properties:
          type: array
          items:
            type: PropertyDefinitionData
        iconCode:
          type: string
          description: Optional icon code for the given value set.
        undefined:
          type: boolean
          default: true
          description: |
            If true then the value set is not defined and not accessible.
        lazy:
          type: boolean
          default: false
          description: |
            If true then the values doesn't contains the the whole values set or it migth be
            empty and we have to ask for filtered set of values using the filter fields available.
        values:
          type: array
          items:
            type: object
        filterModel:
          type: FilterExpressionBuilderModel
          description: The filter expression model for the search from values.
    ValueSetDefinition:
      type: object
      required: [uri, data]
      properties:
        uri:
          type: string
          format: uri
        data:
          $ref: '#/components/schemas/ValueSetDefinitionData'
    ValueSetDefinitionData:
      type: object
      required: [kind, qualifiedName]
      properties:
        kind:
          $ref: '#/components/schemas/ValueSetDefinitionKind'
        qualifiedName:
          type: string
          description: |
            The logical name of the given value set. In case of an enum it is the fully qualified name of the
            enum class.
        objectDefinition:
          type: string
          format: uri
          description: The object definition of the value set. 
        typeClass:
          type: string
          description: The fully qualified name of the type class. 
        keyProperty:
          type: string
          description: |
            The name of the key property in the value. It will be the value that copied into the reference when a given
            item is selected from the value set. If it is not set then the default is the URI if it exists in the given object.
            Or it will be the code or id in this order.
        storageSchema: 
          type: string
          description: The name of the storage schema. Necessary to access the objects or the container (list or map). 
        containerName: 
          type: string
          description: The name of the list or map that contains the object uri list. It must be a unique name inside the storageSchema.
        iconCode:
          type: string
          description: Optional icon code for the given value set.
        inlineValues:
          type: array
          description: The value list that contains the value objects.
          items:
            type: object
        keys:
          type: array
          description: The list of keys. If we have this  
          items:
            type: object
        expression:
          $ref: '#/components/schemas/ValueSetExpression'
    ValueSetDefinitionKind:
      enum: [ENUM, INLINE, LIST, MAP, ALLOF, SETOF, SEARCHINDEXBASED, COMPOSITE, UNDEFINED]
    ValueSetExpression:
      type: object
      required: [operation, ignoreVersion, operands]
      properties:
        operation:
          $ref: '#/components/schemas/ValueSetOperation'
        ignoreVersion:
          type: boolean
          default: false
        operands:
          type: array
          items:
            $ref: '#/components/schemas/ValueSetOperand'          
    ValueSetOperand:
      type: object
      required: [namespace, name]
      properties:
        namespace:
          type: string
          description: |
            The namespace of the referred value set.
        name:
          type: string
          description: |
            The name of the referred value set.
        data:
          $ref: '#/components/schemas/ValueSetDefinitionData'
        expression:
          $ref: '#/components/schemas/ValueSetExpression'
    ValueSetOperation:
      enum: [UNION, INTERSECT, DIF, SYMMETRICDIF]
