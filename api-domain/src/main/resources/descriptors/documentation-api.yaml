openapi: 3.0.1
info:
  title: documentation api
  description: |
    The documentation is a basic structure for constructing hyper linked documentations. This data type and the managing api and
    UI panels can be used in every application for complex dokumentation.
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
- name: Documentation
paths:
  /nope:
    post:
      summary: Placeholder for generation
      responses:
        '200':
          description: nope
                
components:
  schemas:
    DocumentationData:
      type: object
      required: [uri, paragraphs]
      description: |
        The documentation is a complex datatype that is always contained by a domain object. The documentation is usually a property and it has
        an ordered paragraph list. The flexibility comes from the types of the paragraphs because each paragraphs are managed as identified
        object and can be referred from other documentations. The documentation itself does not contain any chapter. It is a plain document section
        containing text paragraphs, pictures, Word documents as content, lists and tables. And later on this component set can be extended with any
        other data types that produces a textual documentation. The documentation has uri and can be referred as paragraph from another documentation.
      properties:
        uri:
          type: string
          format: uri
        containerObjectUri:
          type: string
          format: uri
          description: The documentation is always contained by a container object.
        containerPropertyName:
          type: string
          description: The name of the property from the container object.
        paragraphs:
          type: array
          description: |
            The ordered list of paragraph references. The references are different kinds from the contained rich text to the referred
            other paragraph.  
          items:
            $ref: '#/components/schemas/ParagraphData'
    ParagraphData:
      type: object
      required: [kind, contentUri, contained]
      description: |
        The reference is contained by the documentation and connect it with different kind of objects as paragraph. The paragraph can be contained
        when the container is stored in the paragraph. And even the referrer are part of the model to ensure the reactive events when a documentation
        is changing.
      properties:
        id:
          type: integer
          description: |
            The unique identifier of the given paragraph to identify inside a documentation. By default it is the serial number of the
            paragraph in the array. But if we modify the sort order or delete any item then it is always the largest id + 1 in case of
            a new paragraph.
        orderNo:
          type: integer
          description: |
            The order number in the paragraph list of the owner documentation..
        kind:
          $ref: '#/components/schemas/ParagraphKind'
        contentUri:
          type: string
          format: uri
          description: If the given paragraph is a reference to any other object then this is the URI.
        fragmentId:
          type: string
          description: The fragment is used to identify an element inside the given .
        text:
          type: string
          format: html
    ParagraphKind:
      description: |
        The built in types of the paragraphs. It is part of the documentation domain and can not be extended without modifying the
        module.
      type: string
      enum:
        - RICHTEXT
        - IMAGE
        - MSWORD
        - DOCUMENTATIONREF
