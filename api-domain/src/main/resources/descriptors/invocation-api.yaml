openapi: 3.0.1
info:
  title: invocation api
  description: The invocation api is a generic possibility to call remote apis.
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
- name: Invocation
paths:
  /invokeApi:
    post:
      tags:
      - Invocation
      summary: ''
      operationId: 'invokeApi'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvocationRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvocationParameter'
components:
  schemas:
    InvocationRequest:
      type: object
      description: |
        The data object of an api invocation that contains the interface class name in java style, the name of
        the api if it is provided in multiple instances, the name of the method to call and the parameters as
        object.
      required: [parameters, interfaceClass, methodName]
      properties:
        interfaceClass: 
          type: string
          description: 'The fully qualified name of the interface.'
        name: 
          type: string
          description: 'The fully qualified name of the interface.'
        methodName:
          type: string
          description: 'The name of the method to call'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/InvocationParameter'
        sessionUri:
          type: string
          format: uri
          description: |
            The URI of the session that belongs to the request. Optional and can be used to inherit session
            for the asynchronous call.
    InvocationParameter:
      type: object
      required: [name, typeClass]
      properties:
        name:
          type: string
          description: The symbolic name of the parameter. Must be set and unique inside an invocation request template.
        value:
          type: object
          description: The value of the object.
        typeClass:
          type: string
          description: The fully qualified type class name of the parameter.
    AsyncInvocationRequest:
      type: object
      description: |
        If the invocation is executed asynchronously we need to save te request itself and the result of the call as one
        object. The asynchronous call is managed by a runtime that is also saved into this object. If the invocation failed
        then the exception is also part of this object. This is the whole histoty of the call. If the result of the call is
        awaited by a logic then it can subscribe for the execution result.
      properties:
        uri:
          type: string
          format: uri
        runtimeUri:
          type: string
          format: uri
          description: The URI of the appliocation runtime that is currently responsible for the givan invocation. 
        channel:
          type: string
          description: The name of the channel handles the given invocation.
        request:
          $ref: '#/components/schemas/InvocationRequest'        
    RuntimeAsyncChannelRegistry:
      type: object
      description: |
        This is the central registry of every runtime that manage asynchronous invocation channels. If a new channel is managed 
        by a runtime then first of all it is registered into this object. The InvocationApi of the runtimes are periodically examine
        if the given runtimes are still alive. If not then the channels are going to be pick up by one or more servers.
      properties:
        runtimes:
          type: array
          description: The list of runtimes managing channels.
          items:
            $ref: '#/components/schemas/RuntimeAsyncChannelList'        
    RuntimeAsyncChannelList:
      type: object
      description: |
        This is the central registry of every runtime that manage asynchronous invocation channels. If a new channel is managed 
        by a runtime then first of all it is registered into this object. The InvocationApi of the runtimes are periodically examine
        if the given runtimes are still alive. If not then the channels are going to be pick up by one or more servers.
      properties:
        runtimeUri:
          type: string
          format: uri
          description: The URI of the appliocation runtime that is currently responsible for the givan invocation. 
        channels:
          type: array
          description: The list of the channel object uris managed by the given runtime.
          items:
            type: string
            format: uri
    ObjectSubscription:
      type: object
      description: |
        This object is created when an object has any subscription to be called when the object is changed and has new version.
        The subscription is responsible for storing the invocation requests to be called. If the invocation results an Unsubscribe
        exception then the subscription is going to be removed.
      properties:
        uri:
          type: string
          format: uri
        channel:
          type: string
          description: |
            The name of the channel handles the given invocation asynchronously. If it is empty then the subscription
            execute the invocations synchronously.
        subscriptions:
          $ref: '#/components/schemas/InvocationRequest'        
    ApiRegistryData:
      type: object
      required: [uri,apiList]
      description: |
        The common registry entry for the invocation system. It has a special URI to be able to identify it globally.
      properties:
        uri:
          type: string
          format: uri
        apiList:
          type: array
          description: The available apis of a tenant.
          items:
            type: string
            format: uri
    ApiData:
      type: object
      required: [uri,interfaceName,name,methods]
      description: |
        An api is a programming interface consists of methods to call. An api can be provided by many deployment units at the
        same time. When a deployment unit starts it collects all the apis and methods it has and register it into the storage.
        If another deployment unit has a registration for this api as a remote proxy then this proxy is going to be initiated
        and will be able to call the newly started node. If we have a primary api that collects the available secondary apis
        of an interface then the primary api local instances will be notified about the availability of the given interface
        instance. The remote registration is not saved here to avoid circular references.
      properties:
        uri:
          type: string
          format: uri
        interfaceName:
          type: string
          description: |
            The fully qualified name of the api interface. In case of java it is the name of the interface. There can be more than
            one implementation from an interface class provided by one or more module. But they have to have a unique name in this
            case.
        name:
          type: string
          description: |
            The name of the instance that is equal to the name of the interface if we have only one instance. But if we have
            more than one provided implementation than it is uniquely identify them. Normally in java spring application this
            is the name of the service. It is useful when we have multiple secondary apis registered and the primary api is
            going to collect them all.
        methods:
          type: array
          description: |
            The available methods of the given api interface. All of the methods in the interface are provided by default. If we need
            limited interface then we need to create this interface and publish it.
          items:
            $ref: '#/components/schemas/MethodData'
    MethodData:
      type: object
      required: [uri,name,parameters]
      description: |
        The method of an api that can be called.
      properties:
        uri:
          type: string
          format: uri
        name:
          type: string
        returnType:
          type: string
          description: The qualified name of the type / class or structure. Migth be empty if there is no return value at all.
        parameters:
          type: array
          description: The parameters of the given method.
          items:
            $ref: '#/components/schemas/ParameterData'
    ParameterData:
      type: object
      required: [name,typeName]
      description: |
        The parameter of a given method.
      properties:
        name:
          type: string
          description: Unique name of the parameter.
        typeName:
          type: string
          description: The fully qualified name of the parameter data.
        kind:
          description: The type of the invocation parameter.
          $ref: '#/components/schemas/InvocationParameterKind'
          default: BYVALUE
    InvocationParameterKind:
      type: string
      enum: [
          BYVALUE, BYREFERENCE
        ]
    ApplicationRuntimeData:
      type: object
      required: [uri,uuid,ipAddress,startupTime,lastTouchTime]
      description: |
        The application runtime can be saved into the storage in this object.
      properties:
        uri:
          type: string
          format: uri
          description: The URI of the instance.
        uuid:
          type: string
          format: UUID
          description: The unique identifier of the runtime instance.
        ipAddress:
          type: string
          description: The ip address of the runtime.
        serverPort:
          type: integer
          format: int32
          description: The server port of the runtime.
        startupTime:
          type: integer
          format: int64
          description: The startup time of the given runtime.
        stopTime:
          type: integer
          format: int64
          description: The stop time of the given runtime.
        timeOffset:
          type: integer
          format: int64
          description: The server time offset compared to the storage time.
        lastTouchTime:
          type: integer
          format: int64
          description: The last time when the given runtime updated the entry in the storage.
        apis:
          type: array
          description: The available apis of the runtime.
          items:
            type: string
            format: uri