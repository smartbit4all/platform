openapi: 3.0.1
info:
  title: invocation api
  description: The invocation api is a generic possibility to call remote apis.
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
- name: Invocation
paths:
  /invokeApi:
    post:
      tags:
      - Invocation
      summary: ''
      operationId: 'invokeApi'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvocationRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvocationParameter'
components:
  schemas:
    InvocationRequestDefinition:
      type: object
      description: |
        The definition contains a request as a template and the definitions of the input parameters. It can be used to initiate a new
        InvocationRequest by resolving the necessary input parameters. The result of the invocation can be direct (the return value) and
        indirect, when the invocation itself modifies the related objects.
      required: [request]
      properties:
        request: 
          $ref: '#/components/schemas/InvocationRequest'
          description: |
            The request as a template for initiating a new request instance. The parameters can be set by default. So if we don't define any
            input to resolve then the newly ceated invocation request is simply the copy of this template one. Else we initiate the new
            instance and resolve all the values.
        resolvers:
          type: array
          description: The resolvers are used to setup parameters of the newly created invocation request.
          items:
            $ref: '#/components/schemas/InvocationParameterResolver'
    InvocationParameterResolver:
      type: object
      description: The resolver is responsibe for defining the data uri for a given invocation parameter.
      required: [dataUri]
      properties:
        name:
          type: string
        position:
          type: integer
          format: int32
        propertyUri:
          type: string
          format: uri
          description: |
            The uri of the property entry with the scheme as the name of the related object from the context. The path defines the data access path. We can use this
            URI to resolve the data with the ObjectApi.
          example: state:/object/otherobject#property
    InvocationBatchRequest:
      type: object
      description: |
        A list of InvocationRequest that can be used for the InvocationApi functions.
      required: [requests]
      properties:
        requests: 
          type: array
          description: The invocation requests included in the batch.
          items:
            $ref: '#/components/schemas/InvocationRequest'
    InvocationBatchResult:
      type: object
      description: |
        The ordered list of InvocationResult that are the result of the InvocationRequests from an InvocationBatchRequest.
      required: [results]
      properties:
        results: 
          type: array
          description: The invocation results included in the batch.
          items:
            $ref: '#/components/schemas/InvocationResult'
    InvocationRequest:
      type: object
      description: |
        The data object of an api invocation that contains the interface class name in java style, the name of
        the api if it is provided in multiple instances, the name of the method to call and the parameters as
        object.
      required: [parameters, interfaceClass, methodName]
      properties:
        interfaceClass: 
          type: string
          description: 'The fully qualified name of the interface.'
        name: 
          type: string
          description: 'The fully qualified name of the interface.'
        methodName:
          type: string
          description: 'The name of the method to call'
        scriptKind:
          type: string
          description: The script language managed by the ScripEngine
        scriptBody:
          type: string
          description: The script language managed by the ScripEngine
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/InvocationParameter'
        sessionUri:
          type: string
          format: uri
          description: |
            The URI of the session that belongs to the request. Optional and can be used to inherit session
            for the asynchronous call.
    InvocationParameter:
      type: object
      required: [name, typeClass]
      properties:
        name:
          type: string
          description: The symbolic name of the parameter. Must be set and unique inside an invocation request template.
        value:
          type: object
          description: The value of the object.
        typeClass:
          type: string
          description: The fully qualified type class name of the parameter.
        innerTypeClass:
          type: string
          description: If the type of the parameter is List or Map container then the inner type is saved into this property.
    InvocationResult:
      type: object
      description: |
        As a result of the invocation we get back this object that contains the result if the invocation was successful.
        This can be saved into the AsynInvocationRequest as results and can be managed by the InvocationErrorHandler. The
        decision about the next step is also saved into this object.
      required: [startTime, endTime]
      properties:
        returnValue:
          type: object
          description: The return value of the call if it was successful. If the return value is void then this value is null.
        typeClass:
          type: string
          description: The fully qualified type class name of the parameter.
        innerTypeClass:
          type: string
          description: If the type of the parameter is List or Map container then the inner type is saved into this property.
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        decision:
          $ref: '#/components/schemas/InvocationResultDecision'
        error:
          $ref: '#/components/schemas/InvocationError'
    InvocationResultDecision:
      type: object
      description: |
        The evaluation can make a decision on the result of the invocation. Can ask reschedule, continue can finish the call.
      properties:
        handler:
          type: string
          description: The fully qualified name of the evaluator api that was the decision maker.
        decision:
          enum: [ABORT, RESCHEDULE, CONTINUE]
        scheduledAt:
          type: string
          format: date-time
          description: |
            If the error handler decided to reschedule the given invocation or continue with the andThen calls then we can see 
            the next invocation time in this field.
    InvocationError:
      type: object
      description: |
        The error or exception can be saved into this object that occurred while executing an invocation.
      required: [definition, stackTrace]
      properties:
        definition:
          type: string
          description: |
            The error or exception typically defined in a programming language like java. The fully qualified name of this class
            is the definition of the error.
        message:
          type: string
          description: |
            The programmer defined message of exception that can help to identify the exact problem.
        stackTrace:
          type: array
          description: |
            To be able to identify the original problem, the invocation can provide a deeper information about the exception.
            This ordered list contains the line of the stack trace if available.
          items:
            type: string
    AsyncInvocationRequest:
      type: object
      description: |
        If the invocation is executed asynchronously we need to save te request itself and the result of the call as one
        object. The asynchronous call is managed by a runtime that is also saved into this object. If the invocation failed
        then the exception is also part of this object. This is the whole histoty of the call. If the result of the call is
        awaited by a logic then it can subscribe for the execution result.
      properties:
        uri:
          type: string
          format: uri
        runtimeUri:
          type: string
          format: uri
          description: The URI of the appliocation runtime that is currently responsible for the givan invocation. 
        channel:
          type: string
          description: The name of the channel handles the given invocation.
        request:
          $ref: '#/components/schemas/InvocationRequest'        
        evaluate:
          $ref: '#/components/schemas/InvocationRequest'        
        andThen:
          type: array
          description: |
            The URI of the next asyncronous invocations. This invocation automatically consumes the result of current
            invocation.
          items:
            type: string
            format: uri
        results:
          type: array
          description: |
            Contains the inline list of the results in historic order. If the invocation was executed more then one times 
            then we have all of them here.
          items:
            $ref: '#/components/schemas/InvocationResult'        
    AsyncChannelScheduledInvocationList:
      type: object
      description: |
        For every asynchronous channel it is a central registry for the invocations to execute later. These invocations are 
        not owned by any of the runtimes, they are awaiting for picking up for execution. An active AsynInvocationRequest
        reside in this resigtry or in the RuntimeAsyncChannel object of the given runtime.
      required: [invocationRequests]
      properties:
        invocationRequests:
          type: array
          description: The uri list of the AsyncInvocationRequests that are currently managed by the given runtime.
          items:
            $ref: '#/components/schemas/ScheduledInvocationRequest'        
    ScheduledInvocationRequest:
      type: object
      description: |
        This placeholder object is scheduling an AyncInvocationRequest for a channel. The scheduling is not so precise
        it is just around the real execution time. It is used by the channel to identify the invocation to be executed in the 
        near future. These invocation are going to be activated and scheduled into the in memory executor.
      properties:
        requestUri:
          type: string
          format: uri
          description: The uri of the AsynInvocationRequest.
        scheduledAt:
          type: string
          format: date-time
    RuntimeAsyncChannelRegistry:
      type: object
      description: |
        This is the central registry of every runtime that manage asynchronous invocation channels. If a new channel is managed 
        by a runtime then first of all it is registered into this object. The InvocationApi of the runtimes are periodically examine
        if the given runtimes are still alive. If not then the channels are going to be pick up by one or more servers.
      required: [runtimes]
      properties:
        runtimes:
          type: array
          description: The list of runtimes managing channels.
          items:
            $ref: '#/components/schemas/RuntimeAsyncChannelList'        
    RuntimeAsyncChannelList:
      type: object
      description: |
        For every runtime it is the list of all the channels managed by the given runtime. The channels are managed by runtime
        refreshment implemented in the InvocationRegisterApi.
      required: [channels]
      properties:
        runtimeUri:
          type: string
          format: uri
          description: The URI of the appliocation runtime that is currently responsible for the givan invocation. 
        channels:
          type: object
          description: The list of the channel object uris managed by the given runtime.
          additionalProperties:
            type: string
            format: uri
    RuntimeAsyncChannel:
      type: object
      description: |
        If a runtime starts managing a given channel then this object hold all the invocation requests currently managed by the runtime.
        If the given runtime is stopped then the other runtimes will enqueue these lost invocation requests.
      required: [invocationRequests]
      properties:
        uri:
          type: string
          format: uri
          description: The URI of the channel. 
        runtimeUri:
          type: string
          format: uri
          description: The URI of the appliocation runtime that is currently responsible for the givan invocation. 
        invocationRequests:
          type: array
          description: The uri list of the AsyncInvocationRequests that are currently managed by the given runtime.
          items:
            type: string
            format: uri
    ObjectSubscription:
      type: object
      description: |
        This object is created when an object has any subscription to be called when the object is changed and has new version.
        The subscription is responsible for storing the invocation requests to be called. If the invocation results an Unsubscribe
        exception then the subscription is going to be removed.
      properties:
        uri:
          type: string
          format: uri
        channel:
          type: string
          description: |
            The name of the channel handles the given invocation asynchronously. If it is empty then the subscription
            execute the invocations synchronously.
        subscriptions:
          $ref: '#/components/schemas/InvocationRequest'        
    ApiRegistryData:
      type: object
      required: [uri,apiList]
      description: |
        The common registry entry for the invocation system. It has a special URI to be able to identify it globally.
      properties:
        uri:
          type: string
          format: uri
        apiList:
          type: array
          description: The available apis of a tenant.
          items:
            type: string
            format: uri
    ApiData:
      type: object
      required: [uri,interfaceName,name,methods, publishedEvents, eventSubscriptions]
      description: |
        An api is a programming interface consists of methods to call. An api can be provided by many deployment units at the
        same time. When a deployment unit starts it collects all the apis and methods it has and register it into the storage.
        If another deployment unit has a registration for this api as a remote proxy then this proxy is going to be initiated
        and will be able to call the newly started node. If we have a primary api that collects the available secondary apis
        of an interface then the primary api local instances will be notified about the availability of the given interface
        instance. The remote registration is not saved here to avoid circular references.
      properties:
        uri:
          type: string
          format: uri
        interfaceName:
          type: string
          description: |
            The fully qualified name of the api interface. In case of java it is the name of the interface. There can be more than
            one implementation from an interface class provided by one or more module. But they have to have a unique name in this
            case.
        name:
          type: string
          description: |
            The name of the instance that is equal to the name of the interface if we have only one instance. But if we have
            more than one provided implementation than it is uniquely identify them. Normally in java spring application this
            is the name of the service. It is useful when we have multiple secondary apis registered and the primary api is
            going to collect them all.
        methods:
          type: array
          description: |
            The available methods of the given api interface. All of the methods in the interface are provided by default. If we need
            limited interface then we need to create this interface and publish it.
          items:
            $ref: '#/components/schemas/MethodData'
        publishedEvents:
          type: array
          description: |
            The available events of the given api interface. These are only the logical names of the events that must be globaly unique
            to avoid name clash. The requirements of the consumers are defined by the EventConsumer annotation.
          items:
            $ref: '#/components/schemas/PublishedEventData'
        eventSubscriptions:
          type: array
          description: |
            The  
          items:
            $ref: '#/components/schemas/EventSubscriptionData'
    PublishedEventData:
      type: object
      description: |
        The information about an event of the publisher. It contains the consumers also by the annotation of the provider apis.
      required: [api, event, subscriptions]
      properties:
        api:
          type: string
          description: The name of the api publishing the event.
        event:
          type: string
          description: The name of the publised event.
        parameters:
          type: array
          description: |
            The parameters of the given event. These parameteres are requiered for the subscribed
            methods.
          items:
            $ref: '#/components/schemas/ParameterData'
    EventSubscriptionData:
      type: object
      description: |
        The information about an event of consumer method and the way how to invoke the given api with the event.
      required: [api, event, subscribedApi, subscribedMethod, type]
      properties:
        api:
          type: string
          description: The name of the api publishing the event.
        event:
          type: string
          description: The name of the publised event.
        subscribedApi:
          type: string
          description: The api to call when the event published.
        subscribedMethod:
          type: string
          description: The name of the method to call in the subscribed api.
        asynchronous:
          type: boolean
          description: True if the event is accepted in asynchronous way. This is an instruction for the publisher.
          default: true
        channel:
          type: string
          description: Defines the asynchronous channel to use for processing the invocation.
        type:
          description: | 
            ONE_RUNTIME - The invocation of the publisher method implies exactly one invocation for the given consumer.
            ALL_RUNTIMES - The invocation of the publisher method implies one invocation for the every runtime providing
            the consumer API.
            SESSIONS - The invocation of the publisher method implies one invocation for the every session consuming
            the event. The session storage contains the map for the active sessions and also the sessions
            that are interested in the given event.
          $ref: '#/components/schemas/EventSubscriptionType'
    EventSubscriptionType:
      type: string
      enum: [ ONE_RUNTIME, ALL_RUNTIMES, SESSIONS ]
      description: | 
        ONE_RUNTIME - The invocation of the publisher method implies exactly one invocation for the given consumer.
        ALL_RUNTIMES - The invocation of the publisher method implies one invocation for the every runtime providing
        the consumer API.
        SESSIONS - The invocation of the publisher method implies one invocation for the every session consuming
        the event. The session storage contains the map for the active sessions and also the sessions
        that are interested in the given event.
    MethodData:
      type: object
      required: [uri,name,parameters]
      description: |
        The method of an api that can be called.
      properties:
        id:
          type: string
          description: |
            The unique identifier of the given method inside its api. It consists of the name and the
            names of the parameter types. It must be unique by definition even for the runtime envorinment
            to be able to invoke the proper method.
        name:
          type: string
        returnType:
          type: string
          description: The qualified name of the type / class or structure. Migth be empty if there is no return value at all.
        parameters:
          type: array
          description: The parameters of the given method.
          items:
            $ref: '#/components/schemas/ParameterData'
    ParameterData:
      type: object
      required: [name,typeName]
      description: |
        The parameter of a given method.
      properties:
        name:
          type: string
          description: Unique name of the parameter.
        typeName:
          type: string
          description: The fully qualified name of the parameter data.
        kind:
          description: The type of the invocation parameter.
          $ref: '#/components/schemas/InvocationParameterKind'
          default: BYVALUE
    InvocationParameterKind:
      type: string
      enum: [
          BYVALUE, BYREFERENCE
        ]
    ApplicationRuntimeData:
      type: object
      required: [uri,uuid,ipAddress,startupTime,lastTouchTime]
      description: |
        The application runtime can be saved into the storage in this object.
      properties:
        uri:
          type: string
          format: uri
          description: The URI of the instance.
        uuid:
          type: string
          format: UUID
          description: The unique identifier of the runtime instance.
        ipAddress:
          type: string
          description: The ip address of the runtime.
        baseUrl:
          type: string
          description: The base url of the runtime.
        serverPort:
          type: integer
          format: int32
          description: The server port of the runtime.
        startupTime:
          type: integer
          format: int64
          description: The startup time of the given runtime.
        stopTime:
          type: integer
          format: int64
          description: The stop time of the given runtime.
        timeOffset:
          type: integer
          format: int64
          description: The server time offset compared to the storage time.
        lastTouchTime:
          type: integer
          format: int64
          description: The last time when the given runtime updated the entry in the storage.
        apis:
          type: array
          description: The available apis of the runtime.
          items:
            type: string
            format: uri
    ObjectInvocationConfig:
      type: object
      description: |
        It contains and summarizes the list of objects objects interested in an api call. It can encapsulate the objects and the parameters of the call. This object can be
        saved into an object or can be initiated globally. This object can be used in many situation to save the objects that are interested in an event or an invocation call.
        It can be used directly as parameter for the InvocationApi to invoke... functions or event publishing also.
      required: [uri, objectUris]
      properties:
        uri:
          type: string
          format: uri
        objectUris:
          type: array
          description: |
            The event codes the subscription is looking for. All these event are going to evaluated by this subsription
            object.
          items:
            type: string
            format: uri
    ServiceConnection:
      type: object
      description: |
        This is a generic Service connection parameter object. It can be used genericly to identify a service with all the necessary
        parameters. It can be managed as MDM entry for different purposes.
      properties:
        uri:
          type: string
          format: uri
        name:
          description: The identifier name of the AI service.
          type: string
        apiName:
          description: |
            The name of the local api to access the given endpoint. Usually it is the name of a contribution api.
          type: string
        authToken:
          description: |
            As a crucial parameter for the access the authentication token (bearer token or similar).
          type: string
        apiVersion:
          description: |
            The optional version parameter of the api endpoint.
          type: string
        endpoint:
          description: |
            The endpoint URL typically.
          type: string
        parameters:
          type: object
          additionalProperties: true
