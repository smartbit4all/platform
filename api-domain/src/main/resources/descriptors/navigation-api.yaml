openapi: 3.0.1
info:
  title: smartbit4all navigation api
  description: smartbit4all navigation api
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
- name: Navigation
paths:
  /entry:
    post:
      tags:
      - Navigation
      summary: 'Retrieve the entries from the navigations.'
      operationId: 'getEntry'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [entryMetaUri, objectUri]
              properties: 
                entryMetaUri:
                  type: string
                  format: uri
                objectUri:
                  type: string
                  format: uri
            encoding:
              entryMetaUri:
                contentType: application/json
              objectUri:
                contentType: application/json
      responses:
        '200':
          description: 'The navigation entry if we found it or null if missing'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavigationEntry'
  /navigate:
    post:
      tags:
      - Navigation
      summary: 'Queries all data sources to populate the associations starting from the given entry.'
      operationId: 'navigate'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [objectUri]
              properties:
                objectUri:
                  description: 'The URI of the api object that is the starting point of the navigation. It must be a valid URI that can be the starting point of the associations we provided.'
                  type: string
                  format: uri
                associationMetaUris:
                  description: 'The list of associations to identify the direction we want to navigate. If we skip this parameter (null) then we will have all the associations defined in the meta'
                  type: array
                  items:
                    type: string
                    format: uri
            encoding:
              objectUri:
                contentType: application/json
              associationMetaUris:
                contentType: application/json
      responses:
        '200':
          description: 'The map of the references by the URI of association meta we passed in the associations parameter.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NavigationResponse'
components:
  schemas:
    NavigationResponse:
      type: object
      properties:
        associationMetaUri:
          type: string
          format: uri
        referenceEntries:
          type: array
          items:
            $ref: '#/components/schemas/NavigationReferenceEntry'
    NavigationConfig:
      type: object
      description: 'API: Describes all the entries and associations in the given navigation.'
      properties:
        entries:
          description: 'The available entries in the given navigation config.'
          type: array
          items:
            $ref: '#/components/schemas/NavigationEntryMeta'
        associations:
          description: 'The navigable associations in the given navigation. In case of a navigation tree these are the openable sub trees.'
          type: array
          items:
            $ref: '#/components/schemas/NavigationAssociationMeta'
    NavigationAssociationMeta:
      type: object
      description: 'API: The association meta describes a possible navigation between entry metas. It is part of the configuration.'
      required: [uri, name, startEntry, endEntry]
      properties:
        uri:
          type: string
          format: uri
          description: 'The uri of the resource that uniquely identifies the given navigation inside the navigation api.'
        name:
          type: string
          description: 'The well-formed name of the association.'
        startEntry:
          $ref: '#/components/schemas/NavigationEntryMeta'
        endEntry:
          $ref: '#/components/schemas/NavigationEntryMeta'
        associationEntry:
          $ref: '#/components/schemas/NavigationEntryMeta'
    NavigationEntryMeta:
      type: object
      description: 'API: This meta describes and entry that collabortes in a navigation. This is part of the configuration.'
      required: [uri, name]
      properties:
        uri:
          type: string
          format: uri
          description: 'The uri of the resource that uniquely identifies the given entry inside the navigation api.'
        name:
          type: string
          description: 'The well-formed name of the association.'
        associations:
          type: array
          items:
            $ref: '#/components/schemas/NavigationAssociationMeta'
    NavigationNode:
      type: object
      description: 'UI: The stateful object on the client side. Contains the reference to the NavigationEntry and also the references to the parent and to the children'
      required: [id, entry]
      properties:
        id:
          type: string
          description: 'The unique identifier of the given node - UUID'
        entry:
          $ref: '#/components/schemas/NavigationEntry'
        associations:
          description: 'The possible navigation directions.'
          type: array
          items:
            $ref: '#/components/schemas/NavigationAssociation'
    NavigationAssociation:
      type: object
      description: 'UI: The navigable associations belong to the given node.'
      required: [id, node]
      properties:
        id:
          type: string
          description: 'The unique identifier of the given association - UUID'
        nodeId:
          type: string
          description: 'The unique identifier of the parent node of the given association.'
        metaUri:
          type: string
          format: uri
        lastNavigation:
          type: integer
          description: 'The last navigation time (in millis) when the given association was retrieved. If null then it has never been navigated.'
        hidden:
          type: boolean
          description: 'The association can be hidden. If a node has only one association then it can be an option.'
        caption:
          type: string
          description: 'The caption text, if the association is visible in any UI component'
        icon:
          type: string
          description: 'The icon, if the association is visible in any UI component'
        references:
          description: 'The navigation association instances.'
          type: array
          items:
            $ref: '#/components/schemas/NavigationReference'
    NavigationReference:
      type: object
      description: 'UI: The instance of the association. It is a directed from source to target. If we have data entry on the association itself then we can set this entry to the associationEntry.'
      required: [startNode, endNode]
      properties:
        id:
          type: string
          description: 'The unique identifier of the given association - UUID'
        endNode:
          $ref: '#/components/schemas/NavigationNode'
        associationNode:
          $ref: '#/components/schemas/NavigationNode'
    NavigationReferenceEntry:
      type: object
      description: 'API: The instance of the association. It is a directed from source to target. If we have data entry on the association itself then we can set this entry to the associationEntry.'
      required: [id, startNode, endNode]
      properties:
        id:
          type: string
          description: 'The identifier of the reference that is constructed as startEntry.uri + [ "-" assocEntry.uri + ] "-" + endEntry.uri'
        startEntryUri:
          type: string
          format: uri
          description: 'The URI of the start entry'
        endEntry:
          $ref: '#/components/schemas/NavigationEntry'
        associationEntry:
          $ref: '#/components/schemas/NavigationEntry'
    NavigationEntry:
      type: object
      required: [uri, name]
      properties:
        objectUri:
          type: string
          format: uri
          description: 'The URI identifies the so called API object.'
        metaUri:
          type: string
          format: uri
          description: 'The URI identifies the meta object of the entry'
        name:
          type: string
          description: 'The name of the entry'
        icon:
          type: string
          description: 'The name of the icon resource'
        styles:
          description: 'The string list of the abstract styles that can be applied to the given entry'
          type: array
          items:
            type: string
        views:
          description: 'The string list of the abstract views that are supported by the UI that we have. This view will get the navigation entry as parameter.'
          type: array
          items:
            $ref: '#/components/schemas/NavigationView'
        actions:
          description: 'The executable actions'
          type: array
          items:
            type: string
            format: uri
    NavigationView:
      type: object
      required: [name]
      properties:
        name:
          type: string
          description: 'The symbolic name of the view that must be supported by the given UI implementation.'
        parameters:
          type: string
          additionalProperties:
            properties:
              parameter:
                type: string
                description: 'The key of the parameter'
              value:
                type: string
                description: 'The value of the parameter'
    NavigationPath:
      type: object
      description: |
        This object can hold a navigation path in a navigation. The path must start with an entry object uri.
        This uri must be available as root or child of another node. The next path segment is an association and
        an entry uri again. This can be used for selection and using these path we can restore the state of a navigation.
      required: [seqments]
      properties:
        uri:
          type: string
          format: uri
          description: The navigation can be saved using this.
        segments:
          type: array
          items:
            type: string