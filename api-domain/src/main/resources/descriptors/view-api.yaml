openapi: 3.0.1
info:
  title: View API
  description: View API
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
  - name: View
paths:
  /context:
    post:
      tags:
      - View
      summary: Creates a new ViewContext
      operationId: 'createViewContext'
      responses:
        '200':
          description: 'Context created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewContext'
    put:
      tags:
      - View
      summary: Updates an existing ViewContext
      operationId: 'updateViewContext'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewContextUpdate'
      responses:
        '200':
          description: 'Context updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewContext'
        '404':
          description: 'The context does not exists with the given uuid'
        '500':
          description: 'Error during context update'
  /context/{uuid}:
    get:
      tags:
      - View
      summary: Returns the existing session info
      operationId: 'getViewContext'
      parameters: 
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: ViewContext's unique identifier.
      responses:
        '200':
          description: 'Returns ViewContext by unique identifier'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewContext'
        '404':
          description: 'The context does not exists with the given uuid'
        '500':
          description: 'Error occured while fetching the session data'
  /message/{viewUuid}/{messageUuid}:
    post:
      tags:
      - View
      summary: ''
      operationId: 'message'
      parameters: 
        - in: path
          name: viewUuid
          schema:
            type: string
            format: uuid
          required: true
          description: 'View UUID.'
        - in: path
          name: messageUuid
          schema:
            type: string
            format: uuid
          required: true
          description: 'Message UUID.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageResult'
      responses:
        '200':
          description: ''
  /view/{uuid}/constraint:
    get:
      tags:
      - View
      summary: Returns the view constraint object belongs to the given view
      operationId: 'getViewConstraint'
      parameters: 
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: View's unique identifier.
      responses:
        '200':
          description: 'Returns ViewConstraint object for the view identified by unique identifier'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewConstraint'
        '404':
          description: 'The context does not exists with the given uuid'
        '500':
          description: 'Error occured while fetching the constraints data'
components:
  schemas:
    ViewContext:
      type: object
      description: The same session can be valid / used in multiple UIs, this object represents a UI.
      required: [uri,views,messages]
      properties:
        uri:
          type: string
          format: uri
        uuid:
          type: string
          format: uuid
        views:
          type: array
          items:
            $ref: '#/components/schemas/ViewData'
        openPendingData:
          $ref: '#/components/schemas/OpenPendingData'
    ViewData:
      type: object
      required: [uuid,viewName,state,type,parameters]
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier of the View.
        viewName:
          type: string
        objectUri:
          type: string
          format: uri
        branchUri:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties: true
        state:
          $ref: '#/components/schemas/ViewState'
        type:
          $ref: '#/components/schemas/ViewType'
        constraint:
          $ref: '#/components/schemas/ViewConstraint'
        containerUuid:
          type: string
          format: uuid
    ViewConstraint:
      type: object
      description: |
        The view constraint object encapsulate the constraints can be applied to any view genericly. It consists of
        compenet constraints and many more.
      required: [componentConstraints]
      properties:
        componentConstraints:
          type: array
          items:
            $ref: '#/components/schemas/ComponentConstraint'
    ComponentConstraint:
      type: object
      description: |
        The component constraint is responsible for the constraints belong to a given component (textfield, combobox etc.) on the view. The UI
        must identify the component by the dataName that is a path of the data name separated by dot like dataSheet.field.
      properties:
        dataName:
          type: string
          description: The data name to identify the related component or componenets. If it is a path the format is the following - dataSheet.field.  
        visible:
          type: boolean
          default: true
        mandatory:
          type: boolean
          default: false
        enabled:
          type: boolean
          default: true
    ViewState:
      type: string
      enum:
        - open_pending
        - to_open
        - opened
        - close_pending
        - close_approved
        - to_close
        - closed
      default: to_open
    ViewType:
      type: string
      enum:
        - normal
        - dialog
        - embedded
      default: normal
    MessageData:
      type: object
      required: [uuid,type,possibleResults]
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier of the Message.
        viewUuid:
          type: string
          format: uuid
          description: UUID of the View, showing this message. May be null.
        type:
          $ref: '#/components/schemas/MessageType'
        header:
          type: string
        text:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/MessageOption'
    MessageType:
      type: string
      enum:
        - info
        - question
        - warning
        - error
    MessageOption:
      type: object
      required: [code, label]
      properties:
        code:
          type: string
        label:
          type: string
        icon:
          type: string
        type:
          $ref: '#/components/schemas/MessageOptionType'
    MessageOptionType:
      type: string
      enum:
        - confirm
        - reject
        - cancel
    MessageResult:
      type: object
      required: [selectedOption]
      properties:
        selectedOption:
          $ref: '#/components/schemas/MessageOption'
        additionalData:
          type: object
    ViewStateUpdate:
      description: State update of a view.
      type: object
      properties:
        uuid:
          description: ViewContext's unique identifier.
          type: string
          format: uuid
        state:
          description: Updated state of View.
          $ref: '#/components/schemas/ViewState'
    ViewContextUpdate:
      description: State update of a ViewContext.
      type: object
      properties:
        uuid:
          description: ViewContext's unique identifier.
          type: string
          format: uuid
        updates:
          type: array
          items:
            $ref: '#/components/schemas/ViewStateUpdate'
    ViewResponse:
      description: Wrapper class for a result object and a ViewContext object.
      type: object
      properties:
        result:
          type: object
        viewContext:
          $ref: '#/components/schemas/ViewContext'
    ViewRegistryEntry:
      description: Descriptor of a possible view.
      type: object
      required: [viewName, path]
      properties:
        viewName:
          type: string
          description: Name of the view. Must be unique.
        parentView:
          type: string
          description: Name of parentView, may be null.
    ViewApiError:
      type: object
      description: Generic API error object.
      properties:
        code:
          type: string
        message:
          type: string
    OpenPendingData:
      type: object
      description: All information regarding opening a view.
      required: [results]
      properties:
        viewToOpen:
          type: string
          format: uuid
        viewsToClose:
          type: array
          items:
            type: string
            format: uuid
        results:
          additionalProperties:
            $ref: '#/components/schemas/CloseResult'
    CloseResult:
      type: string
      default: pending
      enum:
        - approved
        - pending
        - rejected
    UiAction:
      type: object
      properties:
        code:
          type: string
        apiName:
          type: string
        apiFunction:
          type: string
        identifier:
          type: string
    UiActionSource:
      type: object
      description: apiFunction specified in UiAction will receive this object as parameter.
      required: [viewUuid]
      properties:
        viewUuid:
          description: Identifier of View where action is performed.
          type: string
          format: uuid
        component:
          description: |
            Identifier of component where action is performed (for example tree's / list's name,
             etc.). Optional.
          type: string
        element:
          description: |
            Identifier of UI element, where action is performed (for example treeNode's / 
            listItem's identifier, etc.). Optional.
          type: string
