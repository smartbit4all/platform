openapi: 3.0.1
info:
  title: storage api
  description: The storage api is a generic possibility to store and load objects.
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
- name: Storage
paths:
  /nope:
    post:
      summary: Placeholder for generation
      responses:
        '200':
          description: nope
                
components:
  schemas:
    StorageSettings:
      type: object
      description: |
        This is a privilegized object for saving the settings information about a Storage as a logical unit of the global storage.
        The named references and collections attached to this settings can be access by name.
      required: [uri]
      properties:
        uri:
          type: string
          format: uri
        schemeName:
          type: string
    TransactionData:
      type: object
      description: |
        The transaction data for the storage transaction management. For every new transaction a new transaction data will be created to 
        have a common entry point for.
      required: [uri, startTime, lastTouch]
      properties:
        uri:
          type: string
          format: uri
          description: The unique identifier of the transaction.
        userUri:
          type: string
          format: uri
          description: The uri of the user who is inititaed the transaction.
        startTime:
          type: string
          format: date-time
          description: The start time of the given transaction.
        lastTouch:
          type: string
          format: date-time
          description: |
            If a transaction is executing then the server is responsible for updating the transaction record with a given frequency. 
            This information will be used by the other servers to detect if the server is down and the transaction will never be
            finished.
        finishTime:
          type: string
          format: date-time
          description: |
            If a transaction is finished on a proper way then this time is set.
        state:
          description: |
            The state of the transaction. From the first time it is exec - executing. If an exception was thrown and the execution
            failed then fail or succ if there was no error. If the server was killed during the execution then the other servers 
            could detect it and set the result to timeout. It's not necessary because it is detected dynamically from the lastTouch time!
          $ref: '#/components/schemas/TransactionState'
    TransactionState:
      type: string
      enum: [exec, succ, fail, timeout]
    StorageObjectData:
      type: object
      description: |
        The basic data object of the storages. This holds the version history and refers the current version. Also has named references 
        and collections.
      required: [uri, currentVersion, versions]
      properties:
        uri:
          type: string
          format: uri
          description: |
            The uri of the object represented by the storage object.
        currentVersion:
          type: object
          description: |
            This is the current version descriptor that is repeated here to have a direct reference for the latest sucessfuly
            transacted version here.
          $ref: '#/components/shemas/ObjectVersion'
        className:
          type: string
          description: |
            The fully qualified name of the bean class. Normally the URI of the given object can contain the class but also the StorageObjectData
            contains it. If we have this in the StorageObjectData then we use this. If it is missing then we try to figure out from the URI.
        pendingVersion:
          type: object
          description: |
            This is the pending version descriptor that is repeated here to have a direct reference for the currently transacted 
            version. If the given object has pending version then depending on the caller there can be more result. We always check
            if we are the transaction or not. If we are the transaction then we can use the pending version. Else reading use the
            current version, locking or saving will be blocked until the finish of the transaction. 
          $ref: '#/components/shemas/ObjectVersion'
        deleted:
          type: boolean
          default: false
          description: |
            The deleted flag is set when the given object is deleted. The deletion is always logical so we know that the object
            exists but we also know that it is already inactivated.
    StorageObjectRelationData:
      type: object
      description: |
        This object contains the references and the collections of the given object. This does not have identity it is bound to 
        the StoaregObject by the ObjectStorage implementation.
      required: [uri]
      properties:
        uri:
          type: string
          format: uri
          description: |
            The uri of the object represented by the storage object.
        references:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ObjectReference'
        collections:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ObjectReferenceList'
    ObjectHistory:
      type: object
      properties:
        objectHistoryEntries:
          type: array
          items:
            $ref: '#/components/schemas/ObjectHistoryEntry'
        selectedVersionUri:
          type: string
          format: uri
    ObjectHistoryEntry:
      type: object
      description: |
        When analysing the history the StorageApi creates a list of history entries for every version of the objects participates
        in the related history. It can contain the object data changes without relation versions. These are the significant versions
        that mean adat modification.
      required: [versionUri]
      properties:
        summary:
          type: string
          description: |
            The summary of the history record constructed from the natural identifiers of the object.
        changes:
          type: string
          description: |
            The changes rendered into a readable format. Every version produces some changes in the detal. This field contains these 
            in a summerized readable format.
        versionUri:
          type: string
          format: uri
          description: |
            The uri of the object version that can be used to read the given version.
        objectType:
          type: string
          description: |
            The object type of the history entry. A list of history entry can contain multiple types if their versions
            are involved.
        version:
          type: object
          $ref: '#/components/schemas/ObjectVersion'
    ObjectVersion:
      type: object
      description: |
        The reference for a given version of the storage object. It contains all the properties about the version like time, user uri, 
        api operation that created the version.
      required: [serialNo, createdAt, createdByUri]
      properties:
        serialNoData:
          type: integer
          format: int64
          description: If it is set then there is an attached version data.
        serialNoRelation:
          type: integer
          format: int64
          description: If it is set then there is an attached version relation set.
        transactionId:
          type: string
          description: |
            The unique identifier of the transaction that constructed this version from the object. It could be
            used to double check if a given transaction was successful.
        createdAt:
          type: string
          format: date-time
          description: The exact date time when the given version was created at.
        createdByUri:
          type: string
          format: uri
          description: The reference of the user or any other participant who created the given version.
        createdBy:
          type: string
          description: The display name of the user or any other participant who created the given version.
        operation:
          type: string
          description: The Api and the operation that was created the given version of the object.
        rebasedFromUri:
          type: string
          format: uri
          description: |
            The reference of the object version the version is based on. In case of branching this is the URI of the source 
            object version if it is a new object on the branch.
        commonAncestorUri:
          type: string
          format: uri
          description: |
            The reference of the object version the version is based on. In the result of a merge operation it is the URI
            of the common ancestor.
        mergedWithUri:
          type: string
          format: uri
          description: |
            The reference of the object version the version is based on. In case of branching this is the URI of the source 
            object version.
        aspects:
          type: object
          description: |
            The aspects are named objects attached to the given object version.
          additionalProperties:
            $ref: '#/components/schemas/ObjectAspect'
    ObjectAspect:
      type: object
      description: |
        The instance of an aspect with the fully qualified name of the type. It can help to read the object of the aspect with
        type information. 
      required: [uri, uris]
      properties:
        typeQualifiedName:
          type: string
          description: The fully qualified name of the given object saved into this aspect.
        objectAsMap:
          type: object
          additionalProperties: true
    ObjectList:
      type: object
      description: |
        The list of references as a container object for the Api. 
      required: [uri, uris]
      properties:
        uri:
          type: string
          format: uri
        uris:
          type: array
          items:
            type: string
            format: uri
    ObjectMap:
      type: object
      description: |
        Map of references as a container object for the Api.
        It can be used to key the URIs with some searchable string key.
      required: [uri, name, uris]
      properties:
        uri:
          type: string
          format: uri
        name:
          type: string
          description: The name is a unique identifier in the given context, let is be user, group or global.
        uris:
          type: object
          additionalProperties:
            type: string
            format: uri
    ObjectMapRequest:
      type: object
      description: |
        The request for adding and removing items from the ObjectMap. The Api accept this object as an input and
        executes the commands.
      properties:
        mapUri:
          type: string
          description: If we know the exact uri of the given map, then we can use this to identify the map exactly.
          format: uri
        mapName:
          type: string
          description: If we know the name of the given map, then we can use this to identify the map exactly in the context.
        urisToRemove:
          type: object
          additionalProperties:
            type: string
            format: uri
        urisToAdd:
          type: object
          additionalProperties:
            type: string
            format: uri
    ObjectReferenceList:
      type: object
      description: |
        The list of references as a container object for the Api. 
      required: [referenceTypeClass, references]
      properties:
        referenceTypeClass:
          type: string
          description: |
            The type of the reference. It can be the qualified name of the java bean class or anything else that can exactly identify
            the type of the reference object.  
        references:
          type: array
          items:
            $ref: '#/components/schemas/ObjectReference'
    ObjectReference:
      type: object
      description: |
        In generally if we have an object stored by a Storage then we might need to store some object references for this. 
        The related object references are more or less a list of URI or other identifier easy to serialize in every storage mechanism. 
        The Storage can publish events when the given object is changed. This can be filtered by this register. 
        The reference can be temporary so we can define a time limit when the Storage will remove the reference. 
        The relation can be renewed by adding it again and again. This object itself is managed by the ObjectStorage to store this in an 
        optimal way for the given storage mechanism.
      required: [uri]
      properties:
        uri:
          type: string
          format: uri
          description: |
            The identifier of the referenced object. This is an URI that identifies the object in the domain.
        referenceId:
          type: string
          description: |
            To separate the references from the same class the api can use this field to store specific data about the referred object.
        expirationTime:
          type: string
          format: date-time
          description: The expiration time for the reference.
    StorageSaveEventObject:
      type: object
      description: |
        When StorageObjects are saved the saving process may manage StorageSaveEvents which also can be stored. For this purpose this
        object can be used.
        A StorageSaveEventObject point to the next event. This way a linked list can be created of these events.
      required: [uri]
      properties:
        uri:
          type: string
          format: uri
          description: |
            The identifier of the StorageSaveEventObject object.  
        oldVersion:
          description: |
            The uri of the object before the save event. It can be null if the object is a new instance.
          type: string
          format: uri
        newVersion:
          description: |
            The uri of the object after the save event.
          type: string
          format: uri
        nextEvent:
          description: |
            The uri of the next save event.
          type: string
          format: uri
    StorageObjectReference:
      type: object
      description: |
        This is the generic reference to another storage object. This object has no data but the object URI itself. So there is no need to have history at all.
        This object is used only by the storage itself to form a special link to an object. It is included into the storage set container and can be used to
        iterate through the referred objects. Of course this results a two phase read but this is the trade off for the flexibility.
      required: [uri, objectUri]
      properties:
        uri:
          type: string
          format: uri
          description: |
            The identifier of the StorageObjectReference object.  
        objectUri:
          type: string
          format: uri
          description: |
            The uri of the original object refrred by the reference object.  
