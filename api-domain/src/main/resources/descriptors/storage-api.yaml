openapi: 3.0.1
info:
  title: storage api
  description: The storage api is a generic possibility to store and load objects.
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
- name: Storage
paths:
  /nope:
    post:
      summary: Placeholder for generation
      responses:
        '200':
          description: nope
                
components:
  schemas:
    StorageSettings:
      type: object
      description: |
        This is a privilegized object for saving the settings information about a Storage as a logical unit of the global storage.
        The named references and collections attached to this settings can be access by name.
      required: [uri]
      properties:
        uri:
          type: string
          format: uri
        schemeName:
          type: string
    StorageObjectData:
      type: object
      description: |
        The basic data object of the storages. This holds the version history and refers the current version. Also has named references 
        and collections.
      required: [uri, currentVersion, versions]
      properties:
        uri:
          type: string
          format: uri
          description: |
            The uri of the object represented by the storage object.
        currentVersion:
          type: object
          $ref: '#/components/shemas/ObjectVersion'
        deleted:
          type: boolean
          default: false
          description: |
            The deleted flag is set when the given object is deleted. The deletion is always logical so we know that the object
            exists but we also know that it is already inactivated.
        pendingVersions:
          type: array
          description: |
            The versions of the object that are currently in transaction. These version can be seen only by the transaction itself
            but all other can see only the current version. At the end of the successful transaction the pending versions are cleared
            and current version is set to the last version. The storage is going to repair the objects left behind by the broken 
            transaction.
          items:
            $ref: '#/components/shemas/ObjectVersion'
    StorageObjectRelationData:
      type: object
      description: |
        This object contains the references and the collections of the given object. This does not have identity it is bound to 
        the StoaregObject by the ObjectStorage implementation.
      required: [uri]
      properties:
        uri:
          type: string
          format: uri
          description: |
            The uri of the object represented by the storage object.
        references:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ObjectReference'
        collections:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ObjectReferenceList'
    ObjectHistory:
      type: object
      properties:
        objectHistoryEntries:
          type: array
          items:
            $ref: '#/components/schemas/ObjectHistoryEntry'
        selectedVersionUri:
          type: string
          format: uri
    ObjectHistoryEntry:
      type: object
      description: |
        When analysing the history the StorageApi creates a list of history entries for every version of the objects participates
        in the related history. It can contain the object data changes without relation versions. These are the significant versions
        that mean adat modification.
      required: [serialNo, createdAt, createdByUri]
      properties:
        summary:
          type: string
          description: |
            The summary of the history record constructed from the natural identifiers of the object.
        changes:
          type: string
          description: |
            The changes rendered into a readable format. Every version produces some changes in the detal. This field contains these 
            in a summerized readable format.
        versionUri:
          type: string
          format: uri
          description: |
            The uri of the object version that can be used to read the given version.
        objectType:
          type: string
          description: |
            The object type of the history entry. A list of history entry can contain multiple types if their versions
            are involved.
        version:
          type: object
          $ref: '#/components/schemas/ObjectVersion'
    ObjectVersion:
      type: object
      description: |
        The reference for a given version of the storage object. It contains all the properties about the version like time, user uri, 
        api operation that created the version.
      required: [serialNo, createdAt, createdByUri]
      properties:
        serialNoData:
          type: integer
          format: int64
          description: If it is set then there is an attached version data.
        serialNoRelation:
          type: integer
          format: int64
          description: If it is set then there is an attached version relation set.
        transactionId:
          type: string
          format: uuid
          description: |
            The unique identifier of the transaction that constructed this version from the object. It could be
            used to double check if a given transaction was successful.
        createdAt:
          type: string
          format: date-time
          description: The exact date time when the given version was created at.
        createdByUri:
          type: string
          format: uri
          description: The reference of the user or any other participant who created the given version.
        createdBy:
          type: string
          description: The display name of the user or any other participant who created the given version.
        operation:
          type: string
          description: The Api and the operation that was created the given version of the object.
    ObjectList:
      type: object
      description: |
        The list of references as a container object for the Api. 
      required: [uri, uris]
      properties:
        uri:
          type: string
          format: uri
        uris:
          type: array
          items:
            type: string
            format: uri
    ObjectMap:
      type: object
      description: |
        Map of references as a container object for the Api.
        It can be used to key the URIs with some searchable string key.
      required: [uri, name, uris]
      properties:
        uri:
          type: string
          format: uri
        name:
          type: string
          description: The name is a unique identifier in the given context, let is be user, group or global.
        uris:
          type: object
          additionalProperties:
            type: string
            format: uri
    ObjectMapRequest:
      type: object
      description: |
        The request for adding and removing items from the ObjectMap. The Api accept this object as an input and
        executes the commands.
      properties:
        mapUri:
          type: string
          description: If we know the exact uri of the given map, then we can use this to identify the map exactly.
          format: uri
        mapName:
          type: string
          description: If we know the name of the given map, then we can use this to identify the map exactly in the context.
        urisToRemove:
          type: object
          additionalProperties:
            type: string
            format: uri
        urisToAdd:
          type: object
          additionalProperties:
            type: string
            format: uri
    ObjectReferenceList:
      type: object
      description: |
        The list of references as a container object for the Api. 
      required: [referenceTypeClass, references]
      properties:
        referenceTypeClass:
          type: string
          description: |
            The type of the reference. It can be the qualified name of the java bean class or anything else that can exactly identify
            the type of the reference object.  
        references:
          type: array
          items:
            $ref: '#/components/schemas/ObjectReference'
    ObjectReference:
      type: object
      description: |
        In generally if we have an object stored by a Storage then we might need to store some object references for this. 
        The related object references are more or less a list of URI or other identifier easy to serialize in every storage mechanism. 
        The Storage can publish events when the given object is changed. This can be filtered by this register. 
        The reference can be temporary so we can define a time limit when the Storage will remove the reference. 
        The relation can be renewed by adding it again and again. This object itself is managed by the ObjectStorage to store this in an 
        optimal way for the given storage mechanism.
      required: [uri]
      properties:
        uri:
          type: string
          format: uri
          description: |
            The identifier of the referenced object. This is an URI that identifies the object in the domain.
        referenceId:
          type: string
          description: |
            To separate the references from the same class the api can use this field to store specific data about the referred object.
        expirationTime:
          type: string
          format: date-time
          description: The expiration time for the reference.
