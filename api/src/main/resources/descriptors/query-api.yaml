openapi: 3.0.1
info:
  title: smartbit4all query api
  description: smartbit4all query api
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
paths:
  /nope:
    post:
      summary: Placeholder for generation
      responses:
        '200':
          description: nope
components:
  schemas:
    Operator:
      type: string
      enum: [
          EQ, LT, LE, GT, GE, LIKE
        ]
      description: 'The operator to use'
    BoolOperator:
      type: string
      enum: [
          AND, OR, XOR
        ]
      description: 'Bool operators fol clauses'
    LiteralValue:
      type: object
      required: [value, typeQName]
      properties:
        value: 
          type: string
          description: 'The string value of the literal'
        typeQName:
          type: string
          description: 'The qualified name of the type of the value'
    ExpressionClause:
      type: object
      required: [boolOperator]
      properties:
        objectQName:
          type: string
          description: 'The qualified name of the bean the expression must run on'
        propertyName:
          type: string
          description: 'Holds the property name of the parent object when the
            expressionClause is embedded'
        isNegate:
          type: boolean
          default: false
          description: 'If the whole clause must be negated'
        boolOperator:
          $ref: '#/components/schemas/BoolOperator'
        expressionClauses:
          type: array
          items:
            $ref: '#/components/schemas/ExpressionClause'
        expression2Ops:
          type: array
          items:
            $ref: '#/components/schemas/Expression2Op'
        expressionBooleans:
          type: array
          items:
            $ref: '#/components/schemas/ExpressionBoolean'
        expressionBetweens:
          type: array
          items:
            $ref: '#/components/schemas/ExpressionBetween'
        expressionIns:
          type: array
          items:
            $ref: '#/components/schemas/ExpressionIn'
        expressionIsNulls:
          type: array
          items:
            $ref: '#/components/schemas/ExpressionIsNull'
    Expression2Op:
      type: object
      required: [operator, operand, literal]
      properties:
        operator:
          $ref: '#/components/schemas/Operator'
        operand:
          type: string
          description: 'The name of the property'
        literal:
          $ref: '#/components/schemas/LiteralValue'
    ExpressionBoolean:
      type: object
      required: [operand, value]
      properties:
        operand:
          type: string
          description: 'The name of the property'
        value:
          type: boolean
          default: true
          description: 'The boolean value of the property'
    ExpressionBetween:
      type: object
      required: [operand, lowerBound, upperBound]
      properties:
        operand:
          type: string
          description: 'The name of the property'
        lowerBound:
          $ref: '#/components/schemas/LiteralValue'
        upperBound:
          $ref: '#/components/schemas/LiteralValue'
    ExpressionIn:
      type: object
      required: [operand, typeQName, values]
      properties:
        operand:
          type: string
          description: 'The name of the property'
        typeQName:
          type: string
          description: 'The qualified name of the type of the value' 
        values:
          description: 'The string form of values'
          type: array
          items:
            type: string
    ExpressionIsNull:
      required: [operand]
      type: object
      properties:
        operand:
          type: string
          description: 'The name of the property'