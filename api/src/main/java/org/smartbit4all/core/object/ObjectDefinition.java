package org.smartbit4all.core.object;

import java.io.IOException;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.smartbit4all.api.binarydata.BinaryData;
import org.smartbit4all.api.object.bean.ObjectDefinitionData;
import org.smartbit4all.api.object.bean.PropertyDefinitionData;
import org.smartbit4all.core.utility.StringConstant;
import com.fasterxml.jackson.core.JsonProcessingException;
import static java.util.stream.Collectors.toList;

/**
 * This definition must exists for every api objects managed by the given module. It contains the
 * class itself, the URI accessor / mutator and the serializing methods.
 *
 * @author Peter Boros
 */
public final class ObjectDefinition<T> {

  public static final String URI_PROPERTY = "uri";

  /**
   * The qualified name is the globally unique name of the given object. The namespace and the name
   * looks like a Java class name. If we need to change the format to use as a path or similar then
   * we can have more then one accessor.
   */
  private String qualifiedName;

  /**
   * The java class of the object.
   */
  private Class<T> clazz;

  /**
   * The URI property of the object. The URI is the unique identifier and storage locator of the
   * given object. It's mandatory if we would like to use it as storage root object.
   */
  private BiConsumer<Object, URI> uriSetter;

  private Function<Object, URI> uriGetter;

  /**
   * The ID property of the object. The ID is a unique identifier that technically unique but
   * doesn't contain the location info. If an object has URI also then it can be used as root object
   * in a Storage.
   */
  private BiConsumer<T, String> idSetter;

  private Function<T, String> idGetter;

  /**
   * The lower case version of the class name or a configured alias.
   */
  private String alias;

  /**
   * The default {@link ObjectSerializer} belongs to the given object. If there is no instruction in
   * the given situation that this will be used. The Storage will save the name of this serializer
   * to enable loading the given object later on.
   */
  private ObjectSerializer defaultSerializer;

  /**
   * In the configuration we can set the preferred {@link ObjectSerializer} by it's name. If it's
   * available in the context then it will be the {@link #defaultSerializer}.
   */
  private String preferredSerializerName;

  /**
   * The object summaries by name. There is always at least one default summary that contains the
   * uri and all the string properties of the given class.
   */
  private Map<String, ObjectSummarySupplier<T>> summariesByName = null;

  /**
   * Not too often but we might have a objects where we can use the URI generated by the business
   * logic. It means that we can set the uri property and use it in the Storage. It must be set
   * carefully to avoid invalid URI creation. It is mainly used by the platform when the object are
   * identified by natural naming. One example is the invocation of apis.
   */
  private boolean explicitUri = false;

  /**
   * The outgoing references of the given object mapped by the name of the referrer property.
   */
  private final Map<String, ReferenceDefinition> outgoingReferences = new HashMap<>();

  /**
   * The incoming references of the given object mapped by the name of the referrer object and
   * inside there is a map based on the back reference property.
   */
  private final Map<String, Map<String, ReferenceDefinition>> incomingReferences = new HashMap<>();

  /**
   * The Bean meta of the given object definition. The bean meta is related to the {@link #clazz}
   * but the object can be retrieved as other Class also.
   */
  private final BeanMeta meta;

  /**
   * If an object has an extension then this definition data exists. The data can be constructed by
   * a builder and can be assigned by an application logic.
   */
  private ObjectDefinitionData definitionData;

  /**
   * The {@link ObjectDefinitionApi} set itself when we get the definition for the first time.
   */
  private ObjectDefinitionApi objectDefinitionApi;

  /**
   * The properties by name is cache to speed up the access to the
   * {@link ObjectDefinitionData#getProperties()} list.
   */
  private final Map<String, PropertyDefinitionData> propertiesByName = new HashMap<>();

  /**
   * The dirty flag for the {@link #propertiesByName} map.
   */
  private boolean propertiesByNameDirty = true;

  /**
   * The lock for reconstructing the properties map.
   */
  private final Lock lockProperties = new ReentrantLock();

  public ObjectDefinition(Class<T> clazz) {
    super();
    this.clazz = clazz;
    this.qualifiedName = clazz.getName();
    meta = BeanMetaUtil.meta(clazz);
  }

  public final Class<T> getClazz() {
    return clazz;
  }

  public final String getAlias() {
    return alias;
  }

  final void setAlias(String alias) {
    this.alias = alias;
  }

  public final ObjectSerializer getDefaultSerializer() {
    return defaultSerializer;
  }

  final void setDefaultSerializer(ObjectSerializer defaultSerializer) {
    this.defaultSerializer = defaultSerializer;
  }

  public final BiConsumer<Object, URI> getUriSetter() {
    return uriSetter;
  }

  public final void setUriSetter(BiConsumer<Object, URI> uriSetter) {
    this.uriSetter = uriSetter;
  }

  public final Function<Object, URI> getUriGetter() {
    return uriGetter;
  }

  public final void setUriGetter(Function<Object, URI> uriGetter) {
    this.uriGetter = uriGetter;
  }

  public URI getUri(T obj) {
    if (uriGetter == null) {
      throw new IllegalStateException(
          "The " + qualifiedName + " object doesn't have any uri property");
    }
    return obj != null ? uriGetter.apply(obj) : null;
  }

  public URI getUriFromMap(Map<String, Object> obj) {
    if (obj == null) {
      return null;
    }
    String uriPropertyName = getUriPropertyName();
    Object uriValue = obj.get(uriPropertyName);
    URI result = null;
    if (uriValue instanceof String) {
      result = URI.create((String) uriValue);
    } else if (uriValue instanceof URI) {
      result = (URI) uriValue;
    }
    return result;
  }

  public String getUriPropertyName() {
    String uriPropertyName = URI_PROPERTY;
    if (definitionData != null && definitionData.getUriProperty() != null) {
      uriPropertyName = definitionData.getUriProperty();
    }
    return uriPropertyName;
  }

  public void setUri(Object obj, URI uri) {
    if (obj instanceof Map) {
      Map<String, Object> objAsMap = ((Map<String, Object>) obj);
      objAsMap.put(getUriPropertyName(), uri);
    } else if (obj != null) {
      uriSetter.accept(obj, uri);
    }
  }

  public String getId(T obj) {
    return obj != null && idGetter != null ? idGetter.apply(obj) : null;
  }

  public void setId(T obj, String uri) {
    if (obj != null && idSetter != null) {
      idSetter.accept(obj, uri);
    }
  }

  public final String getPreferredSerializerName() {
    return preferredSerializerName;
  }

  public final void setPreferredSerializerName(String preferredSerializerName) {
    this.preferredSerializerName = preferredSerializerName;
  }

  public final BinaryData serialize(Object o) {
    return defaultSerializer.serialize(o, getClazz());
  }

  public final Optional<T> deserialize(BinaryData data) throws IOException {
    return defaultSerializer.deserialize(data, clazz);
  }

  @SuppressWarnings("unchecked")
  public final Map<String, Object> deserializeAsMap(BinaryData data) throws IOException {
    return defaultSerializer.deserialize(data, Map.class).orElseGet(() -> new HashMap<>());
  }

  public final Map<String, Object> toMap(Object o) {
    return defaultSerializer.toMap(o);
  }

  public final String writeValueAsString(Object o) throws JsonProcessingException {
    return defaultSerializer.writeValueAsString(o);
  }

  public final T deepCopy(T o) {
    return defaultSerializer.fromMap(defaultSerializer.toMap(o), clazz);
  }

  public final T fromMap(Map<String, Object> map) {
    return defaultSerializer.fromMap(map, clazz);
  }

  public final BiConsumer<T, String> getIdSetter() {
    return idSetter;
  }

  public final void setIdSetter(BiConsumer<T, String> idSetter) {
    this.idSetter = idSetter;
  }

  public final Function<T, String> getIdGetter() {
    return idGetter;
  }

  // TODO should be at least package-private! For setup time configuration a builder must be
  // provided
  public final void setIdGetter(Function<T, String> idGetter) {
    this.idGetter = idGetter;
  }

  public final boolean hasUri() {
    return (uriGetter != null && uriSetter != null)
        || (definitionData != null && definitionData.getUriProperty() != null);
  }

  public final boolean hasId() {
    return idGetter != null && idSetter != null;
  }

  final Map<String, ObjectSummarySupplier<T>> getSummariesByName() {
    return summariesByName;
  }

  @SuppressWarnings("unchecked")
  final void setupSummariesByName(Map<String, ObjectSummarySupplier<?>> summariesByNameParam) {
    if (summariesByName == null) {
      summariesByName = new HashMap<>();
      if (summariesByNameParam != null) {
        for (Entry<String, ObjectSummarySupplier<?>> entry : summariesByNameParam.entrySet()) {
          summariesByName.put(entry.getKey(), (ObjectSummarySupplier<T>) entry.getValue());
        }
      } else {
        summariesByName.put(ObjectSummarySupplier.DEFAULT,
            new ObjectSummarySupplier<T>(clazz, ObjectSummarySupplier.DEFAULT) {

              @Override
              public String apply(T t) {
                return ObjectSummarySupplier.getDefaultSummary(t);
              }
            });
      }
    }
  }

  public final ObjectSummarySupplier<T> getSummarySupplier() {
    return getSummarySupplier(ObjectSummarySupplier.DEFAULT);
  }

  public final ObjectSummarySupplier<T> getSummarySupplier(String name) {
    ObjectSummarySupplier<T> supplier = summariesByName.get(name);
    return supplier == null ? summariesByName.get(ObjectSummarySupplier.DEFAULT) : supplier;
  }

  public final boolean isExplicitUri() {
    return explicitUri;
  }

  public final void setExplicitUri(boolean explicitUri) {
    this.explicitUri = explicitUri;
  }

  /**
   * The outgoing references of the given object mapped by the name of the referrer property.
   */
  public final Map<String, ReferenceDefinition> getOutgoingReferences() {
    return outgoingReferences;
  }

  /**
   * The outgoing reference of the given object by the name of the referrer property.
   */
  public final ReferenceDefinition getOutgoingReference(String referenceName) {
    return outgoingReferences.get(referenceName);
  }

  /**
   * The incoming references of the given object mapped by the name of the referrer object and
   * inside there is a map based on the back reference property.
   */
  public final Map<String, Map<String, ReferenceDefinition>> getIncomingReferences() {
    return incomingReferences;
  }

  /**
   * The qualified name is the globally unique name of the given object. The namespace and the name
   * looks like a Java class name. If we need to change the format to use as a path or similar then
   * we can have more then one accessor.
   *
   * @return
   */
  public final String getQualifiedName() {
    return qualifiedName;
  }

  final void setQualifiedName(String qualifiedName) {
    this.qualifiedName = qualifiedName;
  }

  public final BeanMeta meta() {
    return meta;
  }

  /**
   * Constructs the {@link #definitionData} with {@link #meta} information of the given class. If it
   * is the Object then skip analyzing the bean properties.
   */
  final synchronized void initDefinitionData() {
    definitionData =
        new ObjectDefinitionData().qualifiedName(qualifiedName).uri(uriOf(qualifiedName));
    if (!Object.class.equals(clazz)) {
      definitionData.getProperties()
          .addAll(
              meta.getPropertiesCaseSensitive().entrySet().stream()
                  .map(e -> new PropertyDefinitionData()
                      .name(e.getKey()).typeClass(e.getValue().getType().getName()))
                  .collect(toList()));
    }
  }

  public static <T> URI uriOf(String qualifiedName) {
    return URI
        .create(ObjectDefinitionApiImpl.SCHEMA + StringConstant.COLON + StringConstant.SLASH
            + qualifiedName.replace(StringConstant.DOT, StringConstant.SLASH));
  }

  public final ObjectDefinitionData getDefinitionData() {
    return definitionData;
  }

  final void setObjectDefinitionApi(ObjectDefinitionApi objectDefinitionApi) {
    this.objectDefinitionApi = objectDefinitionApi;
  }

  public final void reloadDefinitionData() {
    if (objectDefinitionApi != null) {
      objectDefinitionApi.reloadDefinitionData(this);
    }
  }

  public final void saveDefinitionData() {
    if (objectDefinitionApi != null) {
      objectDefinitionApi.saveDefinitionData(this);
    }
  }

  public final ObjectDefinitionBuilder builder() {
    return new ObjectDefinitionBuilder(this);
  }

  public final List<PropertyDefinitionData> getProperties() {
    if (definitionData != null) {
      return definitionData.getProperties();
    } else {
      initDefinitionData();
      return definitionData.getProperties();
    }
  }

  public final Map<String, PropertyDefinitionData> getPropertiesByName() {
    if (definitionData != null && propertiesByNameDirty) {
      lockProperties.lock();
      try {
        propertiesByName.putAll(definitionData.getProperties().stream()
            .collect(Collectors.toMap(PropertyDefinitionData::getName, pdd -> pdd)));
      } finally {
        lockProperties.unlock();
      }
    }
    return propertiesByName;
  }

  final boolean isPropertiesByNameDirty() {
    return propertiesByNameDirty;
  }

  final void setPropertiesByNameDirty(boolean propertiesByNameDirty) {
    this.propertiesByNameDirty = propertiesByNameDirty;
  }

  public T newInstance() {
    Object object;
    try {
      object = clazz.newInstance();
    } catch (IllegalAccessException | InstantiationException e) {
      object = new Object();
    }
    return (T) object;
  }

  public Map<String, Object> newInstanceAsMap() {
    if (clazz != null) {
      return toMap(newInstance());
    }
    return new HashMap<>();
  }

  /**
   * Detects if the parameter clazz is equals to the definition.
   * 
   * @param instanceClazz The class to check.
   * @return If the {@link Class#getName()} queals to the {@link #qualifiedName} of the definition.
   */
  public boolean instanceOf(Class<?> instanceClazz) {
    if (instanceClazz == null) {
      return false;
    }
    return instanceClazz.getName().equals(qualifiedName);
  }

  @Override
  public String toString() {
    return "ObjectDefinition: " + qualifiedName;
  }

}
