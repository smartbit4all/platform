package org.smartbit4all.core.object;

import java.net.URI;
import java.util.List;
import org.smartbit4all.api.collection.StoredMap;
import org.smartbit4all.api.object.bean.ObjectDescriptor;
import org.smartbit4all.api.object.bean.ObjectLayoutDescriptor;
import org.smartbit4all.api.object.bean.ObjectPropertyDescriptor;

/**
 * Facilitates dynamic extensions to object definitions and default object layout generation.
 * 
 * @author Szabolcs Bazil Papp
 *
 */
public interface ObjectExtensionApi {

  /** The storage schema for persisting {@link ObjectDescriptor}s. */
  String SCHEMA = "object-extension";

  /** The name of the {@link StoredMap} storing the known extensions by their name. */
  String EXTENSION_MAP = "object-extension-map";

  /**
   * Creates a brand new object definition with the desired name using the specified property
   * descriptors.
   * 
   * <p>
   * The definition name should be unique, using only ANSI alphabetical characters, in the style of
   * a fully qualified class name. Elements of the name may be delimited by dots.
   * 
   * <p>
   * The supplied property descriptors need not be persisted, if their {@code URI} property is null,
   * they are stored in the {@link #SCHEMA} defined in this interface.
   * 
   * <p>
   * The created {@link ObjectDescriptor} is persisted, and its {@code URI} is returned by this
   * method.
   * 
   * <p>
   * A layout is also generated for the new definition, using the widgets found on the provided
   * {@link ObjectPropertyDescriptor}s. If a property descriptor does not possess a widget, a
   * default one is heuristically generated. The extracted widgets and/or components are ordered
   * into a default layout which may be accessed with the {@code "default"} key under
   * {@link ObjectLayoutDescriptor#getLayouts()}. The layout itself is stored by the definition
   * name, and can be accessed either
   * 
   * <ul>
   * <li>by loading the {@code URI} returned by this method and accessing the
   * {@link ObjectDescriptor#getLayoutDescriptor()} {@code URI} property (not a configured
   * reference);
   * <li>by invoking {@link ObjectLayoutApi#getObjectDisplay(URI, String)} with an arbitrary object
   * {@code URI} and the definition name provided here: this will render the layout and calculate
   * the enforced constraints for the supplied object.
   * </ul>
   * 
   * <p>
   * For customising and manipulating the created default layout, refer to the methods offered by
   * the {@link ObjectLayoutApi}. The layouts generated by this method feature no constraints.
   * 
   * @param definitionName a unique {@code String} name for the new object definition, following the
   *        rules for laid out for object definition naming, not null
   * @param propertyDescriptors a {@code List} of {@link ObjectPropertyDescriptor}s enumerating the
   *        properties the newly defined object shall have, not null, not empty
   * @return the {@code URI} of the newly created {@link ObjectDescriptor}, not null
   * 
   * @see ObjectLayoutApi
   * @see ObjectDefinitionApi
   */
  URI create(String definitionName, List<ObjectPropertyDescriptor> propertyDescriptors);

  /**
   * Creates a brand new object definition with the desired name based on the specified object
   * definition, copying its properties and extending it with the provided additional property
   * descriptors.
   * 
   * <p>
   * The definition name should be unique, using only ANSI alphabetical characters, in the style of
   * a fully qualified class name. Elements of the name may be delimited by dots.
   * 
   * <p>
   * The supplied property descriptors need not be persisted, if their {@code URI} property is null,
   * they are stored in the {@link #SCHEMA} defined in this interface.
   * 
   * <p>
   * The created {@link ObjectDescriptor} is persisted, and its {@code URI} is returned by this
   * method.
   * 
   * <p>
   * There is no minimum requirement for the amount of property descriptors needed to be supplied:
   * if none are provided, the original object definition is simply copied with a new name, and a
   * default layout is generated for it. If any of the provided property descriptors collide with
   * the properties found on the model object definition, the former take precedence, and <b>the
   * newly supplied property descriptors overwrite the ones brought from the object definition</b>.
   * 
   * <p>
   * For customising and manipulating the created default layout, refer to the methods offered by
   * the {@link ObjectLayoutApi}. The layouts generated by this method feature no constraints.
   * 
   * @param definitionName a unique {@code String} name for the new object definition, following the
   *        rules for laid out for object definition naming, not null
   * @param definition an {@link ObjectDefinition} on which the new definition shall be based, not
   *        null
   * @param extensionDescriptors a {@code List} of {@link ObjectPropertyDescriptor}s enumerating the
   *        extra properties the newly defined object shall have, may be empty, but not null
   * @return the {@code URI} of the newly created {@link ObjectDescriptor}, not null
   * 
   * @see #create(String, List)
   * @see ObjectLayoutApi
   * @see ObjectDefinitionApi
   */
  URI create(String definitionName, ObjectDefinition<?> definition,
      List<ObjectPropertyDescriptor> extensionDescriptors);

  /**
   * Further extends an existing {@link ObjectDescriptor} and its corresponding
   * {@link ObjectDefinition}.
   * 
   * <p>
   * No new object descriptor or definition is created by this method, rather one existing one shall
   * be updated, therefore the specified definition name must be already known to this API. This can
   * be achieved by invoking {@link #create(String, List)} or
   * {@link #create(String, ObjectDefinition, List)} with the desired definition name.
   * 
   * <p>
   * If a supplied property descriptor's property name clashes with already present among the
   * {@link ObjectDescriptor#getDefinitionProperties()} of the modified descriptor, these properties
   * are overridden and promoted to {@link ObjectDescriptor#getExtensionProperties()}.
   * 
   * <p>
   * The corresponding layout descriptor is <b>not updated</b>, for it might already have been
   * subject to prior modifications since its generation. Clients are invited to use the
   * {@link ObjectLayoutApi#update(String)} builder (using the same definition name) to customise
   * the relevant layouts with the newly added properties.
   * 
   * @param definitionName a unique {@code String} name of an existing {@link ObjectDescriptor}, not
   *        null
   * @param extensionDescriptors a {@code List} of {@link ObjectPropertyDescriptor}s enumerating the
   *        extra properties to add, not null, not empty
   * @return the {@code URI} of the updated {@link ObjectDescriptor}, not null
   * 
   * @see ObjectLayoutApi
   * @see ObjectLayoutApi#update(String)
   * @see ObjectDefinitionApi
   * @see #create(String, List)
   * @see #create(String, ObjectDefinition, List)
   */
  URI extend(String definitionName, List<ObjectPropertyDescriptor> extensionDescriptors);

}
