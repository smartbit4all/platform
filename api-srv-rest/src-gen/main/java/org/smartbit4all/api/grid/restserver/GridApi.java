/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.smartbit4all.api.grid.restserver;

import org.smartbit4all.api.grid.bean.GridModel;
import org.smartbit4all.api.grid.bean.GridUpdateData;
import java.util.UUID;
import org.smartbit4all.api.view.bean.ViewContextChange;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Grid", description = "the Grid API")
public interface GridApi {

    default GridApiDelegate getDelegate() {
        return new GridApiDelegate() {};
    }

    /**
     * POST /grid/{uuid}/{gridId}/{rowId}/expand
     *
     * @param uuid  (required)
     * @param gridId  (required)
     * @param rowId  (required)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "grid" },
        value = "",
        nickname = "expand",
        notes = "",
        response = Object.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "", response = Object.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grid/{uuid}/{gridId}/{rowId}/expand",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> expand(
        @ApiParam(value = "", required = true) @PathVariable("uuid") UUID uuid,
        @ApiParam(value = "", required = true) @PathVariable("gridId") String gridId,
        @ApiParam(value = "", required = true) @PathVariable("rowId") String rowId
    ) throws Exception {
        return getDelegate().expand(uuid, gridId, rowId);
    }


    /**
     * POST /grid/{uuid}/{gridIdentifier}/load
     *
     * @param uuid  (required)
     * @param gridIdentifier  (required)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "grid" },
        value = "",
        nickname = "load",
        notes = "",
        response = GridModel.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "", response = GridModel.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grid/{uuid}/{gridIdentifier}/load",
        produces = { "application/json" }
    )
    default ResponseEntity<GridModel> load(
        @ApiParam(value = "", required = true) @PathVariable("uuid") UUID uuid,
        @ApiParam(value = "", required = true) @PathVariable("gridIdentifier") String gridIdentifier
    ) throws Exception {
        return getDelegate().load(uuid, gridIdentifier);
    }


    /**
     * POST /grid/{uuid}/{gridId}/{rowId}/select
     *
     * @param uuid  (required)
     * @param gridId  (required)
     * @param rowId  (required)
     * @param selected  (optional)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "grid" },
        value = "",
        nickname = "select",
        notes = "",
        response = ViewContextChange.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "", response = ViewContextChange.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grid/{uuid}/{gridId}/{rowId}/select",
        produces = { "application/json" }
    )
    default ResponseEntity<ViewContextChange> select(
        @ApiParam(value = "", required = true) @PathVariable("uuid") UUID uuid,
        @ApiParam(value = "", required = true) @PathVariable("gridId") String gridId,
        @ApiParam(value = "", required = true) @PathVariable("rowId") String rowId,
        @ApiParam(value = "") @RequestHeader(value = "selected", required = false) Boolean selected
    ) throws Exception {
        return getDelegate().select(uuid, gridId, rowId, selected);
    }


    /**
     * POST /grid/{uuid}/{gridId}/select
     *
     * @param uuid  (required)
     * @param gridId  (required)
     * @param selected  (optional)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "grid" },
        value = "",
        nickname = "selectAll",
        notes = "",
        response = ViewContextChange.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "", response = ViewContextChange.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grid/{uuid}/{gridId}/select",
        produces = { "application/json" }
    )
    default ResponseEntity<ViewContextChange> selectAll(
        @ApiParam(value = "", required = true) @PathVariable("uuid") UUID uuid,
        @ApiParam(value = "", required = true) @PathVariable("gridId") String gridId,
        @ApiParam(value = "") @RequestHeader(value = "selected", required = false) Boolean selected
    ) throws Exception {
        return getDelegate().selectAll(uuid, gridId, selected);
    }


    /**
     * POST /grid/{uuid}/{gridIdentifier}/page/{offset}/{limit}
     *
     * @param uuid  (required)
     * @param gridIdentifier  (required)
     * @param offset  (required)
     * @param limit  (required)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "grid" },
        value = "",
        nickname = "setPage",
        notes = ""
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "")
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grid/{uuid}/{gridIdentifier}/page/{offset}/{limit}"
    )
    default ResponseEntity<Void> setPage(
        @ApiParam(value = "", required = true) @PathVariable("uuid") UUID uuid,
        @ApiParam(value = "", required = true) @PathVariable("gridIdentifier") String gridIdentifier,
        @ApiParam(value = "", required = true) @PathVariable("offset") String offset,
        @ApiParam(value = "", required = true) @PathVariable("limit") String limit
    ) throws Exception {
        return getDelegate().setPage(uuid, gridIdentifier, offset, limit);
    }


    /**
     * POST /grid/{uuid}/{gridIdentifier}/update
     *
     * @param uuid  (required)
     * @param gridIdentifier  (required)
     * @param gridUpdateData  (required)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "grid" },
        value = "",
        nickname = "update",
        notes = "",
        response = GridModel.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "", response = GridModel.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/grid/{uuid}/{gridIdentifier}/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GridModel> update(
        @ApiParam(value = "", required = true) @PathVariable("uuid") UUID uuid,
        @ApiParam(value = "", required = true) @PathVariable("gridIdentifier") String gridIdentifier,
        @ApiParam(value = "", required = true) @Valid @RequestBody GridUpdateData gridUpdateData
    ) throws Exception {
        return getDelegate().update(uuid, gridIdentifier, gridUpdateData);
    }

}
