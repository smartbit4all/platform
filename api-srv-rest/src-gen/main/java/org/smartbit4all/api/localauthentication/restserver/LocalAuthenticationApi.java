/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.smartbit4all.api.localauthentication.restserver;

import org.smartbit4all.api.localauthentication.bean.LocalAuthenticationLoginRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "LocalAuthentication", description = "the LocalAuthentication API")
public interface LocalAuthenticationApi {

    default LocalAuthenticationApiDelegate getDelegate() {
        return new LocalAuthenticationApiDelegate() {};
    }

    /**
     * POST /login : Logs in the user with the credentails given.
     *
     * @param localAuthenticationLoginRequest  (required)
     * @return User successfully logged in (status code 200)
     *         or Unable to log in user with the given credentials (status code 400)
     *         or Error during login process (status code 500)
     */
    @ApiOperation(value = "Logs in the user with the credentails given.", nickname = "login", notes = "", tags={ "LocalAuthentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User successfully logged in"),
        @ApiResponse(code = 400, message = "Unable to log in user with the given credentials"),
        @ApiResponse(code = 500, message = "Error during login process") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/login",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> login(@ApiParam(value = "", required = true) @Valid @RequestBody LocalAuthenticationLoginRequest localAuthenticationLoginRequest) throws Exception {
        return getDelegate().login(localAuthenticationLoginRequest);
    }


    /**
     * POST /logout : Logs out the currently logged in user
     *
     * @return User successfully logged out (status code 200)
     *         or The user is not logged in (status code 400)
     *         or Error during logout process (status code 500)
     */
    @ApiOperation(value = "Logs out the currently logged in user", nickname = "logout", notes = "", tags={ "LocalAuthentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User successfully logged out"),
        @ApiResponse(code = 400, message = "The user is not logged in"),
        @ApiResponse(code = 500, message = "Error during logout process") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/logout"
    )
    default ResponseEntity<Void> logout() throws Exception {
        return getDelegate().logout();
    }

}
