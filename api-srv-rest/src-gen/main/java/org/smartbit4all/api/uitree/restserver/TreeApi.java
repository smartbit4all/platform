/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.smartbit4all.api.uitree.restserver;

import org.smartbit4all.api.uitree.bean.SmartTreeNode;
import java.util.UUID;
import org.smartbit4all.api.view.bean.UiAction;
import org.smartbit4all.api.view.bean.UiActionRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Tree", description = "the Tree API")
public interface TreeApi {

    default TreeApiDelegate getDelegate() {
        return new TreeApiDelegate() {};
    }

    /**
     * POST /{treeId}/{viewUuid}/{treeId}/{nodeId}/collapse
     * Collapses the given treenode. The viewcontext will hold the appropriate instruction  for the ui. Returns the collapsed SmartTreeNode. 
     *
     * @param viewUuid  (required)
     * @param treeId  (required)
     * @param nodeId  (required)
     * @return Collapsed SmartTreeNode object (status code 200)
     */
    @ApiOperation(
        tags = { "tree" },
        value = "",
        nickname = "collapseNode",
        notes = "Collapses the given treenode. The viewcontext will hold the appropriate instruction  for the ui. Returns the collapsed SmartTreeNode. ",
        response = SmartTreeNode.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "Collapsed SmartTreeNode object", response = SmartTreeNode.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{treeId}/{viewUuid}/{treeId}/{nodeId}/collapse",
        produces = { "application/json" }
    )
    default ResponseEntity<SmartTreeNode> collapseNode(
        @ApiParam(value = "", required = true) @PathVariable("viewUuid") UUID viewUuid,
        @ApiParam(value = "", required = true) @PathVariable("treeId") String treeId,
        @ApiParam(value = "", required = true) @PathVariable("nodeId") String nodeId
    ) throws Exception {
        return getDelegate().collapseNode(viewUuid, treeId, nodeId);
    }


    /**
     * POST /{treeId}/{viewUuid}/{treeId}/{nodeId}/expand
     * Expands the given treenode. The viewcontext will hold the appropriate instruction  for the ui, if any. Returns the expanded SmartTreeNode. 
     *
     * @param viewUuid  (required)
     * @param treeId  (required)
     * @param nodeId  (required)
     * @return Expanded SmartTreeNode object (status code 200)
     */
    @ApiOperation(
        tags = { "tree" },
        value = "",
        nickname = "expandNode",
        notes = "Expands the given treenode. The viewcontext will hold the appropriate instruction  for the ui, if any. Returns the expanded SmartTreeNode. ",
        response = SmartTreeNode.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "Expanded SmartTreeNode object", response = SmartTreeNode.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{treeId}/{viewUuid}/{treeId}/{nodeId}/expand",
        produces = { "application/json" }
    )
    default ResponseEntity<SmartTreeNode> expandNode(
        @ApiParam(value = "", required = true) @PathVariable("viewUuid") UUID viewUuid,
        @ApiParam(value = "", required = true) @PathVariable("treeId") String treeId,
        @ApiParam(value = "", required = true) @PathVariable("nodeId") String nodeId
    ) throws Exception {
        return getDelegate().expandNode(viewUuid, treeId, nodeId);
    }


    /**
     * GET /{treeId}/{viewUuid}/{treeId}/{nodeId}
     * Query the child nodes of the tree&#39;s node given in the parameter
     *
     * @param viewUuid  (required)
     * @param treeId  (required)
     * @param nodeId  (required)
     * @return List of SmartTreeNode objects (status code 200)
     */
    @ApiOperation(
        tags = { "tree" },
        value = "",
        nickname = "getChildrenNodes",
        notes = "Query the child nodes of the tree's node given in the parameter",
        response = SmartTreeNode.class,
        responseContainer = "List"
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "List of SmartTreeNode objects", response = SmartTreeNode.class, responseContainer = "List")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{treeId}/{viewUuid}/{treeId}/{nodeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SmartTreeNode>> getChildrenNodes(
        @ApiParam(value = "", required = true) @PathVariable("viewUuid") UUID viewUuid,
        @ApiParam(value = "", required = true) @PathVariable("treeId") String treeId,
        @ApiParam(value = "", required = true) @PathVariable("nodeId") String nodeId
    ) throws Exception {
        return getDelegate().getChildrenNodes(viewUuid, treeId, nodeId);
    }


    /**
     * GET /{treeId}/{viewUuid}/{treeId}/action
     * Query all tree nodes.
     *
     * @param viewUuid  (required)
     * @param treeId  (required)
     * @return List of UiAction objects (status code 200)
     */
    @ApiOperation(
        tags = { "tree" },
        value = "",
        nickname = "getMainActions",
        notes = "Query all tree nodes.",
        response = UiAction.class,
        responseContainer = "List"
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "List of UiAction objects", response = UiAction.class, responseContainer = "List")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{treeId}/{viewUuid}/{treeId}/action",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UiAction>> getMainActions(
        @ApiParam(value = "", required = true) @PathVariable("viewUuid") UUID viewUuid,
        @ApiParam(value = "", required = true) @PathVariable("treeId") String treeId
    ) throws Exception {
        return getDelegate().getMainActions(viewUuid, treeId);
    }


    /**
     * GET /{treeId}/{viewUuid}/{treeId}
     * Query all tree nodes.
     *
     * @param viewUuid  (required)
     * @param treeId  (required)
     * @return List of SmartTreeNode objects (status code 200)
     */
    @ApiOperation(
        tags = { "tree" },
        value = "",
        nickname = "getRootNodes",
        notes = "Query all tree nodes.",
        response = SmartTreeNode.class,
        responseContainer = "List"
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "List of SmartTreeNode objects", response = SmartTreeNode.class, responseContainer = "List")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{treeId}/{viewUuid}/{treeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SmartTreeNode>> getRootNodes(
        @ApiParam(value = "", required = true) @PathVariable("viewUuid") UUID viewUuid,
        @ApiParam(value = "", required = true) @PathVariable("treeId") String treeId
    ) throws Exception {
        return getDelegate().getRootNodes(viewUuid, treeId);
    }


    /**
     * POST /{treeId}/{viewUuid}/{treeId}/{nodeId}/action
     * Performs an action on the given treenode. The viewcontext will hold the appropriate instruction  for the ui. Returns the SmartTreeNode which the action was performed on. 
     *
     * @param viewUuid  (required)
     * @param treeId  (required)
     * @param nodeId  (required)
     * @param body  (required)
     * @return Changed tree state. (status code 200)
     */
    @ApiOperation(
        tags = { "tree" },
        value = "",
        nickname = "performAction",
        notes = "Performs an action on the given treenode. The viewcontext will hold the appropriate instruction  for the ui. Returns the SmartTreeNode which the action was performed on. ",
        response = SmartTreeNode.class,
        responseContainer = "List"
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "Changed tree state.", response = SmartTreeNode.class, responseContainer = "List")
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{treeId}/{viewUuid}/{treeId}/{nodeId}/action",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<SmartTreeNode>> performAction(
        @ApiParam(value = "", required = true) @PathVariable("viewUuid") UUID viewUuid,
        @ApiParam(value = "", required = true) @PathVariable("treeId") String treeId,
        @ApiParam(value = "", required = true) @PathVariable("nodeId") String nodeId,
        @ApiParam(value = "", required = true) @Valid @RequestBody UiActionRequest body
    ) throws Exception {
        return getDelegate().performAction(viewUuid, treeId, nodeId, body);
    }


    /**
     * POST /{treeId}/{viewUuid}/{treeId}/action
     * Performs an action on the given treenode. The viewcontext will hold the appropriate instruction  for the ui. Returns the SmartTreeNode which the action was performed on. 
     *
     * @param viewUuid  (required)
     * @param treeId  (required)
     * @param body  (required)
     * @return Changed tree state. (status code 200)
     */
    @ApiOperation(
        tags = { "tree" },
        value = "",
        nickname = "performMainAction",
        notes = "Performs an action on the given treenode. The viewcontext will hold the appropriate instruction  for the ui. Returns the SmartTreeNode which the action was performed on. ",
        response = SmartTreeNode.class,
        responseContainer = "List"
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "Changed tree state.", response = SmartTreeNode.class, responseContainer = "List")
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{treeId}/{viewUuid}/{treeId}/action",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<SmartTreeNode>> performMainAction(
        @ApiParam(value = "", required = true) @PathVariable("viewUuid") UUID viewUuid,
        @ApiParam(value = "", required = true) @PathVariable("treeId") String treeId,
        @ApiParam(value = "", required = true) @Valid @RequestBody UiActionRequest body
    ) throws Exception {
        return getDelegate().performMainAction(viewUuid, treeId, body);
    }


    /**
     * POST /{treeId}/{viewUuid}/{treeId}/{nodeId}/select
     * Collapses the given treenode. The viewcontext will hold the appropriate instruction  for the ui. Returns the collapsed SmartTreeNode. 
     *
     * @param viewUuid  (required)
     * @param treeId  (required)
     * @param nodeId  (required)
     * @return Collapsed SmartTreeNode object (status code 200)
     */
    @ApiOperation(
        tags = { "tree" },
        value = "",
        nickname = "selectNode",
        notes = "Collapses the given treenode. The viewcontext will hold the appropriate instruction  for the ui. Returns the collapsed SmartTreeNode. ",
        response = SmartTreeNode.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "Collapsed SmartTreeNode object", response = SmartTreeNode.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{treeId}/{viewUuid}/{treeId}/{nodeId}/select",
        produces = { "application/json" }
    )
    default ResponseEntity<SmartTreeNode> selectNode(
        @ApiParam(value = "", required = true) @PathVariable("viewUuid") UUID viewUuid,
        @ApiParam(value = "", required = true) @PathVariable("treeId") String treeId,
        @ApiParam(value = "", required = true) @PathVariable("nodeId") String nodeId
    ) throws Exception {
        return getDelegate().selectNode(viewUuid, treeId, nodeId);
    }

}
