/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.smartbit4all.ui.api.navigation.restserver;

import org.smartbit4all.ui.api.navigation.model.CommandData;
import org.smartbit4all.ui.api.navigation.model.CommandResult;
import org.smartbit4all.ui.api.navigation.model.MessageResult;
import org.smartbit4all.ui.api.navigation.model.NavigationTarget;
import java.util.UUID;
import org.smartbit4all.ui.api.navigation.model.ViewModelData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "ViewModel", description = "the ViewModel API")
public interface ViewModelApi {

    default ViewModelApiDelegate getDelegate() {
        return new ViewModelApiDelegate() {};
    }

    /**
     * POST /close/{uuid}
     *
     * @param uuid ViewModel UUID which has closed. (required)
     * @return OK (status code 200)
     */
    @ApiOperation(
        tags = { "view-model" },
        value = "",
        nickname = "close",
        notes = ""
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "OK")
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/close/{uuid}"
    )
    default ResponseEntity<Void> close(
        @ApiParam(value = "ViewModel UUID which has closed.", required = true) @PathVariable("uuid") UUID uuid
    ) throws Exception {
        return getDelegate().close(uuid);
    }


    /**
     * POST /createViewModel
     *
     * @param navigationTarget  (required)
     * @return  (status code 201)
     */
    @ApiOperation(
        tags = { "view-model" },
        value = "",
        nickname = "createViewModel",
        notes = "",
        response = ViewModelData.class
    )
    @ApiResponses({
        @ApiResponse(code = 201, message = "", response = ViewModelData.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/createViewModel",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ViewModelData> createViewModel(
        @ApiParam(value = "", required = true) @Valid @RequestBody NavigationTarget navigationTarget
    ) throws Exception {
        return getDelegate().createViewModel(navigationTarget);
    }


    /**
     * GET /download/{vmUuid}/{dataIdentifier}
     *
     * @param vmUuid  (required)
     * @param dataIdentifier  (required)
     * @return Data in given ViewModel (vmUuid) with the given dataUuid. (status code 200)
     */
    @ApiOperation(
        tags = { "view-model" },
        value = "",
        nickname = "download",
        notes = "",
        response = org.springframework.core.io.Resource.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "Data in given ViewModel (vmUuid) with the given dataUuid.", response = org.springframework.core.io.Resource.class)
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/download/{vmUuid}/{dataIdentifier}",
        produces = { "application/octet-stream" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> download(
        @ApiParam(value = "", required = true) @PathVariable("vmUuid") UUID vmUuid,
        @ApiParam(value = "", required = true) @PathVariable("dataIdentifier") String dataIdentifier
    ) throws Exception {
        return getDelegate().download(vmUuid, dataIdentifier);
    }


    /**
     * POST /executeCommand/{uuid}
     *
     * @param uuid  (required)
     * @param commandData  (required)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "view-model" },
        value = "",
        nickname = "executeCommand",
        notes = "",
        response = CommandResult.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "", response = CommandResult.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/executeCommand/{uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CommandResult> executeCommand(
        @ApiParam(value = "", required = true) @PathVariable("uuid") UUID uuid,
        @ApiParam(value = "", required = true) @Valid @RequestBody CommandData commandData
    ) throws Exception {
        return getDelegate().executeCommand(uuid, commandData);
    }


    /**
     * GET /getModel/{uuid}
     *
     * @param uuid  (required)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "view-model" },
        value = "",
        nickname = "getModel",
        notes = "",
        response = ViewModelData.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "", response = ViewModelData.class)
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/getModel/{uuid}",
        produces = { "application/json" }
    )
    default ResponseEntity<ViewModelData> getModel(
        @ApiParam(value = "", required = true) @PathVariable("uuid") UUID uuid
    ) throws Exception {
        return getDelegate().getModel(uuid);
    }


    /**
     * POST /message/{uuid}
     *
     * @param uuid Message UUID. (required)
     * @param messageResult  (required)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "view-model" },
        value = "",
        nickname = "message",
        notes = "",
        response = CommandResult.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "", response = CommandResult.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/message/{uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CommandResult> message(
        @ApiParam(value = "Message UUID.", required = true) @PathVariable("uuid") UUID uuid,
        @ApiParam(value = "", required = true) @Valid @RequestBody MessageResult messageResult
    ) throws Exception {
        return getDelegate().message(uuid, messageResult);
    }


    /**
     * POST /setModel/{uuid}
     *
     * @param uuid  (required)
     * @param body  (required)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "view-model" },
        value = "",
        nickname = "setModel",
        notes = ""
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "")
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/setModel/{uuid}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> setModel(
        @ApiParam(value = "", required = true) @PathVariable("uuid") UUID uuid,
        @ApiParam(value = "", required = true) @Valid @RequestBody Object body
    ) throws Exception {
        return getDelegate().setModel(uuid, body);
    }


    /**
     * POST /upload : Executes a command similar to executeCommand, but appends a BinaryData to it params
     *
     * @param uuid  (optional)
     * @param command  (optional)
     * @param content  (optional)
     * @return  (status code 200)
     */
    @ApiOperation(
        tags = { "view-model" },
        value = "Executes a command similar to executeCommand, but appends a BinaryData to it params",
        nickname = "upload",
        notes = "",
        response = CommandResult.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "", response = CommandResult.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/upload",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<CommandResult> upload(
        @ApiParam(value = "") @Valid @RequestPart(value = "uuid", required = false) String uuid,
        @ApiParam(value = "") @Valid @RequestPart(value = "command", required = false) CommandData command,
        @ApiParam(value = "") @RequestPart(value = "content", required = false) MultipartFile content
    ) throws Exception {
        return getDelegate().upload(uuid, command, content);
    }

}
